
LED_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000760c  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08007858  08007858  00008858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007894  08007894  00009028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007894  08007894  00008894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800789c  0800789c  00009028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800789c  0800789c  0000889c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080078a0  080078a0  000088a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  080078a4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000028  080078cc  00009028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  080078cc  00009150  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00009028  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148b6  00000000  00000000  0000905e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a4  00000000  00000000  0001d914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  0001fcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dad  00000000  00000000  00020e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031e0e  00000000  00000000  00021bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015be4  00000000  00000000  000539fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00142cbe  00000000  00000000  000695df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ac29d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b28  00000000  00000000  001ac2e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001b0e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000028 	.word	0x20000028
 8000268:	00000000 	.word	0x00000000
 800026c:	08007840 	.word	0x08007840

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	2000002c 	.word	0x2000002c
 8000288:	08007840 	.word	0x08007840

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b9b0 	b.w	8000604 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	4688      	mov	r8, r1
 80002c4:	4604      	mov	r4, r0
 80002c6:	468e      	mov	lr, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14a      	bne.n	8000362 <__udivmoddi4+0xa6>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	4617      	mov	r7, r2
 80002d0:	d95f      	bls.n	8000392 <__udivmoddi4+0xd6>
 80002d2:	fab2 f682 	clz	r6, r2
 80002d6:	b14e      	cbz	r6, 80002ec <__udivmoddi4+0x30>
 80002d8:	f1c6 0320 	rsb	r3, r6, #32
 80002dc:	fa01 fe06 	lsl.w	lr, r1, r6
 80002e0:	40b7      	lsls	r7, r6
 80002e2:	40b4      	lsls	r4, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	ea43 0e0e 	orr.w	lr, r3, lr
 80002ec:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f0:	fa1f fc87 	uxth.w	ip, r7
 80002f4:	0c23      	lsrs	r3, r4, #16
 80002f6:	fbbe f1f8 	udiv	r1, lr, r8
 80002fa:	fb08 ee11 	mls	lr, r8, r1, lr
 80002fe:	fb01 f20c 	mul.w	r2, r1, ip
 8000302:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x5e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x5c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 8154 	bhi.w	80005c0 <__udivmoddi4+0x304>
 8000318:	4601      	mov	r1, r0
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	b2a2      	uxth	r2, r4
 800031e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000322:	fb08 3310 	mls	r3, r8, r0, r3
 8000326:	fb00 fc0c 	mul.w	ip, r0, ip
 800032a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800032e:	4594      	cmp	ip, r2
 8000330:	d90b      	bls.n	800034a <__udivmoddi4+0x8e>
 8000332:	18ba      	adds	r2, r7, r2
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	bf2c      	ite	cs
 800033a:	2401      	movcs	r4, #1
 800033c:	2400      	movcc	r4, #0
 800033e:	4594      	cmp	ip, r2
 8000340:	d902      	bls.n	8000348 <__udivmoddi4+0x8c>
 8000342:	2c00      	cmp	r4, #0
 8000344:	f000 813f 	beq.w	80005c6 <__udivmoddi4+0x30a>
 8000348:	4618      	mov	r0, r3
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	eba2 020c 	sub.w	r2, r2, ip
 8000352:	2100      	movs	r1, #0
 8000354:	b11d      	cbz	r5, 800035e <__udivmoddi4+0xa2>
 8000356:	40f2      	lsrs	r2, r6
 8000358:	2300      	movs	r3, #0
 800035a:	e9c5 2300 	strd	r2, r3, [r5]
 800035e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000362:	428b      	cmp	r3, r1
 8000364:	d905      	bls.n	8000372 <__udivmoddi4+0xb6>
 8000366:	b10d      	cbz	r5, 800036c <__udivmoddi4+0xb0>
 8000368:	e9c5 0100 	strd	r0, r1, [r5]
 800036c:	2100      	movs	r1, #0
 800036e:	4608      	mov	r0, r1
 8000370:	e7f5      	b.n	800035e <__udivmoddi4+0xa2>
 8000372:	fab3 f183 	clz	r1, r3
 8000376:	2900      	cmp	r1, #0
 8000378:	d14e      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037a:	4543      	cmp	r3, r8
 800037c:	f0c0 8112 	bcc.w	80005a4 <__udivmoddi4+0x2e8>
 8000380:	4282      	cmp	r2, r0
 8000382:	f240 810f 	bls.w	80005a4 <__udivmoddi4+0x2e8>
 8000386:	4608      	mov	r0, r1
 8000388:	2d00      	cmp	r5, #0
 800038a:	d0e8      	beq.n	800035e <__udivmoddi4+0xa2>
 800038c:	e9c5 4e00 	strd	r4, lr, [r5]
 8000390:	e7e5      	b.n	800035e <__udivmoddi4+0xa2>
 8000392:	2a00      	cmp	r2, #0
 8000394:	f000 80ac 	beq.w	80004f0 <__udivmoddi4+0x234>
 8000398:	fab2 f682 	clz	r6, r2
 800039c:	2e00      	cmp	r6, #0
 800039e:	f040 80bb 	bne.w	8000518 <__udivmoddi4+0x25c>
 80003a2:	1a8b      	subs	r3, r1, r2
 80003a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003a8:	b2bc      	uxth	r4, r7
 80003aa:	2101      	movs	r1, #1
 80003ac:	0c02      	lsrs	r2, r0, #16
 80003ae:	b280      	uxth	r0, r0
 80003b0:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003bc:	fb04 f20c 	mul.w	r2, r4, ip
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d90e      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c4:	18fb      	adds	r3, r7, r3
 80003c6:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80ec 	beq.w	80005b8 <__udivmoddi4+0x2fc>
 80003e0:	46c4      	mov	ip, r8
 80003e2:	1a9b      	subs	r3, r3, r2
 80003e4:	fbb3 f8fe 	udiv	r8, r3, lr
 80003e8:	fb0e 3318 	mls	r3, lr, r8, r3
 80003ec:	fb04 f408 	mul.w	r4, r4, r8
 80003f0:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003f4:	4294      	cmp	r4, r2
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x154>
 80003f8:	18ba      	adds	r2, r7, r2
 80003fa:	f108 33ff 	add.w	r3, r8, #4294967295
 80003fe:	bf2c      	ite	cs
 8000400:	2001      	movcs	r0, #1
 8000402:	2000      	movcc	r0, #0
 8000404:	4294      	cmp	r4, r2
 8000406:	d902      	bls.n	800040e <__udivmoddi4+0x152>
 8000408:	2800      	cmp	r0, #0
 800040a:	f000 80d1 	beq.w	80005b0 <__udivmoddi4+0x2f4>
 800040e:	4698      	mov	r8, r3
 8000410:	1b12      	subs	r2, r2, r4
 8000412:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa08 f401 	lsl.w	r4, r8, r1
 8000422:	fa00 f901 	lsl.w	r9, r0, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	fa28 f806 	lsr.w	r8, r8, r6
 800042e:	408a      	lsls	r2, r1
 8000430:	431f      	orrs	r7, r3
 8000432:	fa20 f306 	lsr.w	r3, r0, r6
 8000436:	0c38      	lsrs	r0, r7, #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa1f fc87 	uxth.w	ip, r7
 800043e:	0c1c      	lsrs	r4, r3, #16
 8000440:	fbb8 fef0 	udiv	lr, r8, r0
 8000444:	fb00 881e 	mls	r8, r0, lr, r8
 8000448:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800044c:	fb0e f80c 	mul.w	r8, lr, ip
 8000450:	45a0      	cmp	r8, r4
 8000452:	d90e      	bls.n	8000472 <__udivmoddi4+0x1b6>
 8000454:	193c      	adds	r4, r7, r4
 8000456:	f10e 3aff 	add.w	sl, lr, #4294967295
 800045a:	bf2c      	ite	cs
 800045c:	f04f 0b01 	movcs.w	fp, #1
 8000460:	f04f 0b00 	movcc.w	fp, #0
 8000464:	45a0      	cmp	r8, r4
 8000466:	d903      	bls.n	8000470 <__udivmoddi4+0x1b4>
 8000468:	f1bb 0f00 	cmp.w	fp, #0
 800046c:	f000 80b8 	beq.w	80005e0 <__udivmoddi4+0x324>
 8000470:	46d6      	mov	lr, sl
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fa1f f883 	uxth.w	r8, r3
 800047a:	fbb4 f3f0 	udiv	r3, r4, r0
 800047e:	fb00 4413 	mls	r4, r0, r3, r4
 8000482:	fb03 fc0c 	mul.w	ip, r3, ip
 8000486:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800048a:	45a4      	cmp	ip, r4
 800048c:	d90e      	bls.n	80004ac <__udivmoddi4+0x1f0>
 800048e:	193c      	adds	r4, r7, r4
 8000490:	f103 30ff 	add.w	r0, r3, #4294967295
 8000494:	bf2c      	ite	cs
 8000496:	f04f 0801 	movcs.w	r8, #1
 800049a:	f04f 0800 	movcc.w	r8, #0
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d903      	bls.n	80004aa <__udivmoddi4+0x1ee>
 80004a2:	f1b8 0f00 	cmp.w	r8, #0
 80004a6:	f000 809f 	beq.w	80005e8 <__udivmoddi4+0x32c>
 80004aa:	4603      	mov	r3, r0
 80004ac:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b0:	eba4 040c 	sub.w	r4, r4, ip
 80004b4:	fba0 ec02 	umull	lr, ip, r0, r2
 80004b8:	4564      	cmp	r4, ip
 80004ba:	4673      	mov	r3, lr
 80004bc:	46e0      	mov	r8, ip
 80004be:	d302      	bcc.n	80004c6 <__udivmoddi4+0x20a>
 80004c0:	d107      	bne.n	80004d2 <__udivmoddi4+0x216>
 80004c2:	45f1      	cmp	r9, lr
 80004c4:	d205      	bcs.n	80004d2 <__udivmoddi4+0x216>
 80004c6:	ebbe 0302 	subs.w	r3, lr, r2
 80004ca:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ce:	3801      	subs	r0, #1
 80004d0:	46e0      	mov	r8, ip
 80004d2:	b15d      	cbz	r5, 80004ec <__udivmoddi4+0x230>
 80004d4:	ebb9 0203 	subs.w	r2, r9, r3
 80004d8:	eb64 0408 	sbc.w	r4, r4, r8
 80004dc:	fa04 f606 	lsl.w	r6, r4, r6
 80004e0:	fa22 f301 	lsr.w	r3, r2, r1
 80004e4:	40cc      	lsrs	r4, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	e9c5 6400 	strd	r6, r4, [r5]
 80004ec:	2100      	movs	r1, #0
 80004ee:	e736      	b.n	800035e <__udivmoddi4+0xa2>
 80004f0:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f4:	0c01      	lsrs	r1, r0, #16
 80004f6:	4614      	mov	r4, r2
 80004f8:	b280      	uxth	r0, r0
 80004fa:	4696      	mov	lr, r2
 80004fc:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000500:	2620      	movs	r6, #32
 8000502:	4690      	mov	r8, r2
 8000504:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000508:	4610      	mov	r0, r2
 800050a:	fbb1 f1f2 	udiv	r1, r1, r2
 800050e:	eba3 0308 	sub.w	r3, r3, r8
 8000512:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000516:	e74b      	b.n	80003b0 <__udivmoddi4+0xf4>
 8000518:	40b7      	lsls	r7, r6
 800051a:	f1c6 0320 	rsb	r3, r6, #32
 800051e:	fa01 f206 	lsl.w	r2, r1, r6
 8000522:	fa21 f803 	lsr.w	r8, r1, r3
 8000526:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800052a:	fa20 f303 	lsr.w	r3, r0, r3
 800052e:	b2bc      	uxth	r4, r7
 8000530:	40b0      	lsls	r0, r6
 8000532:	4313      	orrs	r3, r2
 8000534:	0c02      	lsrs	r2, r0, #16
 8000536:	0c19      	lsrs	r1, r3, #16
 8000538:	b280      	uxth	r0, r0
 800053a:	fbb8 f9fe 	udiv	r9, r8, lr
 800053e:	fb0e 8819 	mls	r8, lr, r9, r8
 8000542:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000546:	fb09 f804 	mul.w	r8, r9, r4
 800054a:	4588      	cmp	r8, r1
 800054c:	d951      	bls.n	80005f2 <__udivmoddi4+0x336>
 800054e:	1879      	adds	r1, r7, r1
 8000550:	f109 3cff 	add.w	ip, r9, #4294967295
 8000554:	bf2c      	ite	cs
 8000556:	f04f 0a01 	movcs.w	sl, #1
 800055a:	f04f 0a00 	movcc.w	sl, #0
 800055e:	4588      	cmp	r8, r1
 8000560:	d902      	bls.n	8000568 <__udivmoddi4+0x2ac>
 8000562:	f1ba 0f00 	cmp.w	sl, #0
 8000566:	d031      	beq.n	80005cc <__udivmoddi4+0x310>
 8000568:	eba1 0108 	sub.w	r1, r1, r8
 800056c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000570:	fb09 f804 	mul.w	r8, r9, r4
 8000574:	fb0e 1119 	mls	r1, lr, r9, r1
 8000578:	b29b      	uxth	r3, r3
 800057a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800057e:	4543      	cmp	r3, r8
 8000580:	d235      	bcs.n	80005ee <__udivmoddi4+0x332>
 8000582:	18fb      	adds	r3, r7, r3
 8000584:	f109 31ff 	add.w	r1, r9, #4294967295
 8000588:	bf2c      	ite	cs
 800058a:	f04f 0a01 	movcs.w	sl, #1
 800058e:	f04f 0a00 	movcc.w	sl, #0
 8000592:	4543      	cmp	r3, r8
 8000594:	d2bb      	bcs.n	800050e <__udivmoddi4+0x252>
 8000596:	f1ba 0f00 	cmp.w	sl, #0
 800059a:	d1b8      	bne.n	800050e <__udivmoddi4+0x252>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e7b4      	b.n	800050e <__udivmoddi4+0x252>
 80005a4:	1a84      	subs	r4, r0, r2
 80005a6:	eb68 0203 	sbc.w	r2, r8, r3
 80005aa:	2001      	movs	r0, #1
 80005ac:	4696      	mov	lr, r2
 80005ae:	e6eb      	b.n	8000388 <__udivmoddi4+0xcc>
 80005b0:	443a      	add	r2, r7
 80005b2:	f1a8 0802 	sub.w	r8, r8, #2
 80005b6:	e72b      	b.n	8000410 <__udivmoddi4+0x154>
 80005b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80005bc:	443b      	add	r3, r7
 80005be:	e710      	b.n	80003e2 <__udivmoddi4+0x126>
 80005c0:	3902      	subs	r1, #2
 80005c2:	443b      	add	r3, r7
 80005c4:	e6a9      	b.n	800031a <__udivmoddi4+0x5e>
 80005c6:	443a      	add	r2, r7
 80005c8:	3802      	subs	r0, #2
 80005ca:	e6be      	b.n	800034a <__udivmoddi4+0x8e>
 80005cc:	eba7 0808 	sub.w	r8, r7, r8
 80005d0:	f1a9 0c02 	sub.w	ip, r9, #2
 80005d4:	4441      	add	r1, r8
 80005d6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005da:	fb09 f804 	mul.w	r8, r9, r4
 80005de:	e7c9      	b.n	8000574 <__udivmoddi4+0x2b8>
 80005e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80005e4:	443c      	add	r4, r7
 80005e6:	e744      	b.n	8000472 <__udivmoddi4+0x1b6>
 80005e8:	3b02      	subs	r3, #2
 80005ea:	443c      	add	r4, r7
 80005ec:	e75e      	b.n	80004ac <__udivmoddi4+0x1f0>
 80005ee:	4649      	mov	r1, r9
 80005f0:	e78d      	b.n	800050e <__udivmoddi4+0x252>
 80005f2:	eba1 0108 	sub.w	r1, r1, r8
 80005f6:	46cc      	mov	ip, r9
 80005f8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fc:	fb09 f804 	mul.w	r8, r9, r4
 8000600:	e7b8      	b.n	8000574 <__udivmoddi4+0x2b8>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fd9a 	bl	8001144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f83a 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f958 	bl	80008c8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000618:	f000 f8a6 	bl	8000768 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800061c:	2100      	movs	r1, #0
 800061e:	4818      	ldr	r0, [pc, #96]	@ (8000680 <main+0x78>)
 8000620:	f005 f9bc 	bl	800599c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000624:	2000      	movs	r0, #0
 8000626:	f000 fbb9 	bl	8000d9c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 800062a:	2001      	movs	r0, #1
 800062c:	f000 fbb6 	bl	8000d9c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000630:	2002      	movs	r0, #2
 8000632:	f000 fbb3 	bl	8000d9c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000636:	2101      	movs	r1, #1
 8000638:	2000      	movs	r0, #0
 800063a:	f000 fc25 	bl	8000e88 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800063e:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <main+0x7c>)
 8000640:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000644:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000646:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <main+0x7c>)
 8000648:	2200      	movs	r2, #0
 800064a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800064c:	4b0d      	ldr	r3, [pc, #52]	@ (8000684 <main+0x7c>)
 800064e:	2200      	movs	r2, #0
 8000650:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <main+0x7c>)
 8000654:	2200      	movs	r2, #0
 8000656:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000658:	4b0a      	ldr	r3, [pc, #40]	@ (8000684 <main+0x7c>)
 800065a:	2200      	movs	r2, #0
 800065c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800065e:	4909      	ldr	r1, [pc, #36]	@ (8000684 <main+0x7c>)
 8000660:	2000      	movs	r0, #0
 8000662:	f000 fcab 	bl	8000fbc <BSP_COM_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <main+0x68>
  {
    Error_Handler();
 800066c:	f000 fa50 	bl	8000b10 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle_ramp());
 8000670:	f000 fa28 	bl	8000ac4 <duty_cycle_ramp>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b01      	ldr	r3, [pc, #4]	@ (8000680 <main+0x78>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	635a      	str	r2, [r3, #52]	@ 0x34
 800067e:	e7f7      	b.n	8000670 <main+0x68>
 8000680:	20000054 	.word	0x20000054
 8000684:	20000044 	.word	0x20000044

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b09c      	sub	sp, #112	@ 0x70
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2250      	movs	r2, #80	@ 0x50
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f007 f8a5 	bl	80077e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
 80006ac:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000760 <SystemClock_Config+0xd8>)
 80006b0:	691b      	ldr	r3, [r3, #16]
 80006b2:	4a2b      	ldr	r2, [pc, #172]	@ (8000760 <SystemClock_Config+0xd8>)
 80006b4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80006b8:	6113      	str	r3, [r2, #16]
 80006ba:	4b29      	ldr	r3, [pc, #164]	@ (8000760 <SystemClock_Config+0xd8>)
 80006bc:	691b      	ldr	r3, [r3, #16]
 80006be:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c6:	bf00      	nop
 80006c8:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <SystemClock_Config+0xd8>)
 80006ca:	695b      	ldr	r3, [r3, #20]
 80006cc:	f003 0308 	and.w	r3, r3, #8
 80006d0:	2b08      	cmp	r3, #8
 80006d2:	d1f9      	bne.n	80006c8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d4:	2301      	movs	r3, #1
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006d8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	2302      	movs	r3, #2
 80006e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80006e2:	2303      	movs	r3, #3
 80006e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e6:	2304      	movs	r3, #4
 80006e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 80006ea:	23fa      	movs	r3, #250	@ 0xfa
 80006ec:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80006fa:	2304      	movs	r3, #4
 80006fc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80006fe:	2300      	movs	r3, #0
 8000700:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	4618      	mov	r0, r3
 800070c:	f001 f976 	bl	80019fc <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000716:	f000 f9fb 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	231f      	movs	r3, #31
 800071c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2303      	movs	r3, #3
 8000720:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	2105      	movs	r1, #5
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fd97 	bl	800226c <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000744:	f000 f9e4 	bl	8000b10 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <SystemClock_Config+0xdc>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000750:	4a04      	ldr	r2, [pc, #16]	@ (8000764 <SystemClock_Config+0xdc>)
 8000752:	f043 0320 	orr.w	r3, r3, #32
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	bf00      	nop
 800075a:	3770      	adds	r7, #112	@ 0x70
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	44020800 	.word	0x44020800
 8000764:	40022000 	.word	0x40022000

08000768 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b09c      	sub	sp, #112	@ 0x70
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000788:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
 8000798:	615a      	str	r2, [r3, #20]
 800079a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2234      	movs	r2, #52	@ 0x34
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f007 f81f 	bl	80077e6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a8:	4b45      	ldr	r3, [pc, #276]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007aa:	4a46      	ldr	r2, [pc, #280]	@ (80008c4 <MX_TIM1_Init+0x15c>)
 80007ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007ae:	4b44      	ldr	r3, [pc, #272]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b4:	4b42      	ldr	r3, [pc, #264]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 80007ba:	4b41      	ldr	r3, [pc, #260]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007bc:	22ff      	movs	r2, #255	@ 0xff
 80007be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c0:	4b3f      	ldr	r3, [pc, #252]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c6:	4b3e      	ldr	r3, [pc, #248]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007cc:	4b3c      	ldr	r3, [pc, #240]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007ce:	2280      	movs	r2, #128	@ 0x80
 80007d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d2:	483b      	ldr	r0, [pc, #236]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007d4:	f005 f82a 	bl	800582c <HAL_TIM_Base_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80007de:	f000 f997 	bl	8000b10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007e8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007ec:	4619      	mov	r1, r3
 80007ee:	4834      	ldr	r0, [pc, #208]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007f0:	f005 fb48 	bl	8005e84 <HAL_TIM_ConfigClockSource>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007fa:	f000 f989 	bl	8000b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007fe:	4830      	ldr	r0, [pc, #192]	@ (80008c0 <MX_TIM1_Init+0x158>)
 8000800:	f005 f86b 	bl	80058da <HAL_TIM_PWM_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800080a:	f000 f981 	bl	8000b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080e:	2300      	movs	r3, #0
 8000810:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000812:	2300      	movs	r3, #0
 8000814:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800081a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800081e:	4619      	mov	r1, r3
 8000820:	4827      	ldr	r0, [pc, #156]	@ (80008c0 <MX_TIM1_Init+0x158>)
 8000822:	f006 fa0f 	bl	8006c44 <HAL_TIMEx_MasterConfigSynchronization>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800082c:	f000 f970 	bl	8000b10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000830:	2360      	movs	r3, #96	@ 0x60
 8000832:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 255;
 8000834:	23ff      	movs	r3, #255	@ 0xff
 8000836:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000838:	2300      	movs	r3, #0
 800083a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800083c:	2300      	movs	r3, #0
 800083e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000844:	2300      	movs	r3, #0
 8000846:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800084c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000850:	2200      	movs	r2, #0
 8000852:	4619      	mov	r1, r3
 8000854:	481a      	ldr	r0, [pc, #104]	@ (80008c0 <MX_TIM1_Init+0x158>)
 8000856:	f005 fa01 	bl	8005c5c <HAL_TIM_PWM_ConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000860:	f000 f956 	bl	8000b10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000878:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800087c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800088a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800088e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	4619      	mov	r1, r3
 80008a0:	4807      	ldr	r0, [pc, #28]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80008a2:	f006 fa9f 	bl	8006de4 <HAL_TIMEx_ConfigBreakDeadTime>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80008ac:	f000 f930 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008b0:	4803      	ldr	r0, [pc, #12]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80008b2:	f000 f95b 	bl	8000b6c <HAL_TIM_MspPostInit>

}
 80008b6:	bf00      	nop
 80008b8:	3770      	adds	r7, #112	@ 0x70
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000054 	.word	0x20000054
 80008c4:	40012c00 	.word	0x40012c00

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08c      	sub	sp, #48	@ 0x30
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008de:	4b73      	ldr	r3, [pc, #460]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 80008e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008e4:	4a71      	ldr	r2, [pc, #452]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 80008e6:	f043 0310 	orr.w	r3, r3, #16
 80008ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008ee:	4b6f      	ldr	r3, [pc, #444]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 80008f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008f4:	f003 0310 	and.w	r3, r3, #16
 80008f8:	61bb      	str	r3, [r7, #24]
 80008fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fc:	4b6b      	ldr	r3, [pc, #428]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 80008fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000902:	4a6a      	ldr	r2, [pc, #424]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800090c:	4b67      	ldr	r3, [pc, #412]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 800090e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091a:	4b64      	ldr	r3, [pc, #400]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 800091c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000920:	4a62      	ldr	r2, [pc, #392]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 8000922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000926:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800092a:	4b60      	ldr	r3, [pc, #384]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 800092c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	4b5c      	ldr	r3, [pc, #368]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 800093a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800093e:	4a5b      	ldr	r2, [pc, #364]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000948:	4b58      	ldr	r3, [pc, #352]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 800094a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	4b55      	ldr	r3, [pc, #340]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 8000958:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800095c:	4a53      	ldr	r2, [pc, #332]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 800095e:	f043 0302 	orr.w	r3, r3, #2
 8000962:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000966:	4b51      	ldr	r3, [pc, #324]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 8000968:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800096c:	f003 0302 	and.w	r3, r3, #2
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000974:	4b4d      	ldr	r3, [pc, #308]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 8000976:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800097a:	4a4c      	ldr	r2, [pc, #304]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 800097c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000980:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000984:	4b49      	ldr	r3, [pc, #292]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 8000986:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800098a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000992:	2332      	movs	r3, #50	@ 0x32
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099e:	2302      	movs	r3, #2
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009a2:	230b      	movs	r3, #11
 80009a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4840      	ldr	r0, [pc, #256]	@ (8000ab0 <MX_GPIO_Init+0x1e8>)
 80009ae:	f000 fe9f 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009b2:	2386      	movs	r3, #134	@ 0x86
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009be:	2302      	movs	r3, #2
 80009c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009c2:	230b      	movs	r3, #11
 80009c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4839      	ldr	r0, [pc, #228]	@ (8000ab4 <MX_GPIO_Init+0x1ec>)
 80009ce:	f000 fe8f 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80009d2:	2310      	movs	r3, #16
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d6:	2303      	movs	r3, #3
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4833      	ldr	r0, [pc, #204]	@ (8000ab4 <MX_GPIO_Init+0x1ec>)
 80009e6:	f000 fe83 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 80009ea:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f0:	2303      	movs	r3, #3
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	482e      	ldr	r0, [pc, #184]	@ (8000ab8 <MX_GPIO_Init+0x1f0>)
 8000a00:	f000 fe76 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a12:	2302      	movs	r3, #2
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a16:	230b      	movs	r3, #11
 8000a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4825      	ldr	r0, [pc, #148]	@ (8000ab8 <MX_GPIO_Init+0x1f0>)
 8000a22:	f000 fe65 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000a26:	2380      	movs	r3, #128	@ 0x80
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2a:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <MX_GPIO_Init+0x1f4>)
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4821      	ldr	r0, [pc, #132]	@ (8000ac0 <MX_GPIO_Init+0x1f8>)
 8000a3a:	f000 fe59 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000a3e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000a50:	230a      	movs	r3, #10
 8000a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4816      	ldr	r0, [pc, #88]	@ (8000ab4 <MX_GPIO_Init+0x1ec>)
 8000a5c:	f000 fe48 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8000a60:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a72:	230b      	movs	r3, #11
 8000a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4810      	ldr	r0, [pc, #64]	@ (8000ac0 <MX_GPIO_Init+0x1f8>)
 8000a7e:	f000 fe37 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000a82:	23c0      	movs	r3, #192	@ 0xc0
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a92:	2308      	movs	r3, #8
 8000a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4806      	ldr	r0, [pc, #24]	@ (8000ab8 <MX_GPIO_Init+0x1f0>)
 8000a9e:	f000 fe27 	bl	80016f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3730      	adds	r7, #48	@ 0x30
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	44020c00 	.word	0x44020c00
 8000ab0:	42020800 	.word	0x42020800
 8000ab4:	42020000 	.word	0x42020000
 8000ab8:	42020400 	.word	0x42020400
 8000abc:	10110000 	.word	0x10110000
 8000ac0:	42021800 	.word	0x42021800

08000ac4 <duty_cycle_ramp>:

/* USER CODE BEGIN 4 */
uint8_t duty_cycle_ramp(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	static uint8_t pwm = 0;
	static uint32_t last_time = 0;
	static uint32_t now = 0;

	now = HAL_GetTick();
 8000ac8:	f000 fbee 	bl	80012a8 <HAL_GetTick>
 8000acc:	4603      	mov	r3, r0
 8000ace:	4a0d      	ldr	r2, [pc, #52]	@ (8000b04 <duty_cycle_ramp+0x40>)
 8000ad0:	6013      	str	r3, [r2, #0]
	if (HAL_GetTick() - last_time > 300)
 8000ad2:	f000 fbe9 	bl	80012a8 <HAL_GetTick>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <duty_cycle_ramp+0x44>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000ae2:	d90d      	bls.n	8000b00 <duty_cycle_ramp+0x3c>
	{
		if (pwm<=255){
		pwm = pwm + 1;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <duty_cycle_ramp+0x48>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <duty_cycle_ramp+0x48>)
 8000aee:	701a      	strb	r2, [r3, #0]
		last_time = HAL_GetTick();
 8000af0:	f000 fbda 	bl	80012a8 <HAL_GetTick>
 8000af4:	4603      	mov	r3, r0
 8000af6:	4a04      	ldr	r2, [pc, #16]	@ (8000b08 <duty_cycle_ramp+0x44>)
 8000af8:	6013      	str	r3, [r2, #0]
		return pwm;
 8000afa:	4b04      	ldr	r3, [pc, #16]	@ (8000b0c <duty_cycle_ramp+0x48>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	e7ff      	b.n	8000b00 <duty_cycle_ramp+0x3c>
		}
	}


}
 8000b00:	4618      	mov	r0, r3
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200000a0 	.word	0x200000a0
 8000b08:	200000a4 	.word	0x200000a4
 8000b0c:	200000a8 	.word	0x200000a8

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <Error_Handler+0x8>

08000b1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END MspInit 0 */

  /* System interrupt init*/

  /* Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b20:	f000 ff5c 	bl	80019dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0b      	ldr	r2, [pc, #44]	@ (8000b64 <HAL_TIM_Base_MspInit+0x3c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d10e      	bne.n	8000b58 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b68 <HAL_TIM_Base_MspInit+0x40>)
 8000b3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000b40:	4a09      	ldr	r2, [pc, #36]	@ (8000b68 <HAL_TIM_Base_MspInit+0x40>)
 8000b42:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b46:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000b4a:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <HAL_TIM_Base_MspInit+0x40>)
 8000b4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000b50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000b58:	bf00      	nop
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	40012c00 	.word	0x40012c00
 8000b68:	44020c00 	.word	0x44020c00

08000b6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a13      	ldr	r2, [pc, #76]	@ (8000bd8 <HAL_TIM_MspPostInit+0x6c>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d11f      	bne.n	8000bce <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b8e:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <HAL_TIM_MspPostInit+0x70>)
 8000b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b94:	4a11      	ldr	r2, [pc, #68]	@ (8000bdc <HAL_TIM_MspPostInit+0x70>)
 8000b96:	f043 0310 	orr.w	r3, r3, #16
 8000b9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <HAL_TIM_MspPostInit+0x70>)
 8000ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ba4:	f003 0310 	and.w	r3, r3, #16
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bb0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <HAL_TIM_MspPostInit+0x74>)
 8000bca:	f000 fd91 	bl	80016f0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	3720      	adds	r7, #32
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40012c00 	.word	0x40012c00
 8000bdc:	44020c00 	.word	0x44020c00
 8000be0:	42021000 	.word	0x42021000

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <NMI_Handler+0x4>

08000bec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3a:	f000 fb21 	bl	8001280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 f996 	bl	8000f78 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c56:	4b35      	ldr	r3, [pc, #212]	@ (8000d2c <SystemInit+0xdc>)
 8000c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c5c:	4a33      	ldr	r2, [pc, #204]	@ (8000d2c <SystemInit+0xdc>)
 8000c5e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c62:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000c66:	4b32      	ldr	r3, [pc, #200]	@ (8000d30 <SystemInit+0xe0>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000c6c:	4b30      	ldr	r3, [pc, #192]	@ (8000d30 <SystemInit+0xe0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000c72:	4b2f      	ldr	r3, [pc, #188]	@ (8000d30 <SystemInit+0xe0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000c78:	4b2d      	ldr	r3, [pc, #180]	@ (8000d30 <SystemInit+0xe0>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	492c      	ldr	r1, [pc, #176]	@ (8000d30 <SystemInit+0xe0>)
 8000c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d34 <SystemInit+0xe4>)
 8000c80:	4013      	ands	r3, r2
 8000c82:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000c84:	4b2a      	ldr	r3, [pc, #168]	@ (8000d30 <SystemInit+0xe0>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000c8a:	4b29      	ldr	r3, [pc, #164]	@ (8000d30 <SystemInit+0xe0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000c90:	4b27      	ldr	r3, [pc, #156]	@ (8000d30 <SystemInit+0xe0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000c96:	4b26      	ldr	r3, [pc, #152]	@ (8000d30 <SystemInit+0xe0>)
 8000c98:	4a27      	ldr	r2, [pc, #156]	@ (8000d38 <SystemInit+0xe8>)
 8000c9a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000c9c:	4b24      	ldr	r3, [pc, #144]	@ (8000d30 <SystemInit+0xe0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000ca2:	4b23      	ldr	r3, [pc, #140]	@ (8000d30 <SystemInit+0xe0>)
 8000ca4:	4a24      	ldr	r2, [pc, #144]	@ (8000d38 <SystemInit+0xe8>)
 8000ca6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000ca8:	4b21      	ldr	r3, [pc, #132]	@ (8000d30 <SystemInit+0xe0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000cae:	4b20      	ldr	r3, [pc, #128]	@ (8000d30 <SystemInit+0xe0>)
 8000cb0:	4a21      	ldr	r2, [pc, #132]	@ (8000d38 <SystemInit+0xe8>)
 8000cb2:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d30 <SystemInit+0xe0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000cba:	4b1d      	ldr	r3, [pc, #116]	@ (8000d30 <SystemInit+0xe0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8000d30 <SystemInit+0xe0>)
 8000cc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cc4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d30 <SystemInit+0xe0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ccc:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <SystemInit+0xdc>)
 8000cce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000cd2:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000cd4:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <SystemInit+0xec>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000cdc:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000ce4:	d003      	beq.n	8000cee <SystemInit+0x9e>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000cec:	d117      	bne.n	8000d1e <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000cee:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <SystemInit+0xec>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d005      	beq.n	8000d06 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	@ (8000d3c <SystemInit+0xec>)
 8000cfc:	4a10      	ldr	r2, [pc, #64]	@ (8000d40 <SystemInit+0xf0>)
 8000cfe:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000d00:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <SystemInit+0xec>)
 8000d02:	4a10      	ldr	r2, [pc, #64]	@ (8000d44 <SystemInit+0xf4>)
 8000d04:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000d06:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <SystemInit+0xec>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d3c <SystemInit+0xec>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000d12:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <SystemInit+0xec>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	4a09      	ldr	r2, [pc, #36]	@ (8000d3c <SystemInit+0xec>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	61d3      	str	r3, [r2, #28]
  }
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00
 8000d30:	44020c00 	.word	0x44020c00
 8000d34:	eae2eae3 	.word	0xeae2eae3
 8000d38:	01010280 	.word	0x01010280
 8000d3c:	40022000 	.word	0x40022000
 8000d40:	08192a3b 	.word	0x08192a3b
 8000d44:	4c5d6e7f 	.word	0x4c5d6e7f

08000d48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d48:	480d      	ldr	r0, [pc, #52]	@ (8000d80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d4a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d4c:	f7ff ff80 	bl	8000c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d50:	480c      	ldr	r0, [pc, #48]	@ (8000d84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d52:	490d      	ldr	r1, [pc, #52]	@ (8000d88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d54:	4a0d      	ldr	r2, [pc, #52]	@ (8000d8c <LoopForever+0xe>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d58:	e002      	b.n	8000d60 <LoopCopyDataInit>

08000d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5e:	3304      	adds	r3, #4

08000d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d64:	d3f9      	bcc.n	8000d5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d66:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d68:	4c0a      	ldr	r4, [pc, #40]	@ (8000d94 <LoopForever+0x16>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d6c:	e001      	b.n	8000d72 <LoopFillZerobss>

08000d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d70:	3204      	adds	r2, #4

08000d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d74:	d3fb      	bcc.n	8000d6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d76:	f006 fd3f 	bl	80077f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d7a:	f7ff fc45 	bl	8000608 <main>

08000d7e <LoopForever>:

LoopForever:
    b LoopForever
 8000d7e:	e7fe      	b.n	8000d7e <LoopForever>
  ldr   r0, =_estack
 8000d80:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000d8c:	080078a4 	.word	0x080078a4
  ldr r2, =_sbss
 8000d90:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000d94:	20000150 	.word	0x20000150

08000d98 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC1_IRQHandler>
	...

08000d9c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	@ 0x30
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d009      	beq.n	8000dc4 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d006      	beq.n	8000dc4 <BSP_LED_Init+0x28>
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d003      	beq.n	8000dc4 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000dbc:	f06f 0301 	mvn.w	r3, #1
 8000dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000dc2:	e055      	b.n	8000e70 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d10f      	bne.n	8000dea <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 8000dca:	4b2c      	ldr	r3, [pc, #176]	@ (8000e7c <BSP_LED_Init+0xe0>)
 8000dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dd0:	4a2a      	ldr	r2, [pc, #168]	@ (8000e7c <BSP_LED_Init+0xe0>)
 8000dd2:	f043 0320 	orr.w	r3, r3, #32
 8000dd6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dda:	4b28      	ldr	r3, [pc, #160]	@ (8000e7c <BSP_LED_Init+0xe0>)
 8000ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000de0:	f003 0320 	and.w	r3, r3, #32
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	e021      	b.n	8000e2e <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d10f      	bne.n	8000e10 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8000df0:	4b22      	ldr	r3, [pc, #136]	@ (8000e7c <BSP_LED_Init+0xe0>)
 8000df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000df6:	4a21      	ldr	r2, [pc, #132]	@ (8000e7c <BSP_LED_Init+0xe0>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e00:	4b1e      	ldr	r3, [pc, #120]	@ (8000e7c <BSP_LED_Init+0xe0>)
 8000e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	e00e      	b.n	8000e2e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000e10:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <BSP_LED_Init+0xe0>)
 8000e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e16:	4a19      	ldr	r2, [pc, #100]	@ (8000e7c <BSP_LED_Init+0xe0>)
 8000e18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e1c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e20:	4b16      	ldr	r3, [pc, #88]	@ (8000e7c <BSP_LED_Init+0xe0>)
 8000e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	4a13      	ldr	r2, [pc, #76]	@ (8000e80 <BSP_LED_Init+0xe4>)
 8000e32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e36:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4a0f      	ldr	r2, [pc, #60]	@ (8000e84 <BSP_LED_Init+0xe8>)
 8000e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4c:	f107 0218 	add.w	r2, r7, #24
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 fc4c 	bl	80016f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <BSP_LED_Init+0xe8>)
 8000e5c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	4a07      	ldr	r2, [pc, #28]	@ (8000e80 <BSP_LED_Init+0xe4>)
 8000e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f000 fd9e 	bl	80019ac <HAL_GPIO_WritePin>
  }

  return ret;
 8000e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3730      	adds	r7, #48	@ 0x30
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	44020c00 	.word	0x44020c00
 8000e80:	08007870 	.word	0x08007870
 8000e84:	20000008 	.word	0x20000008

08000e88 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	460a      	mov	r2, r1
 8000e92:	71fb      	strb	r3, [r7, #7]
 8000e94:	4613      	mov	r3, r2
 8000e96:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000e98:	4b30      	ldr	r3, [pc, #192]	@ (8000f5c <BSP_PB_Init+0xd4>)
 8000e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e9e:	4a2f      	ldr	r2, [pc, #188]	@ (8000f5c <BSP_PB_Init+0xd4>)
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ea8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f5c <BSP_PB_Init+0xd4>)
 8000eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000eb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eba:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000ec4:	79bb      	ldrb	r3, [r7, #6]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d10c      	bne.n	8000ee4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	4a23      	ldr	r2, [pc, #140]	@ (8000f60 <BSP_PB_Init+0xd8>)
 8000ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed6:	f107 020c 	add.w	r2, r7, #12
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 fc07 	bl	80016f0 <HAL_GPIO_Init>
 8000ee2:	e036      	b.n	8000f52 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f64 <BSP_PB_Init+0xdc>)
 8000ee6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	4a1d      	ldr	r2, [pc, #116]	@ (8000f60 <BSP_PB_Init+0xd8>)
 8000eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef0:	f107 020c 	add.w	r2, r7, #12
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 fbfa 	bl	80016f0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000efc:	79fa      	ldrb	r2, [r7, #7]
 8000efe:	4613      	mov	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	4413      	add	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4a18      	ldr	r2, [pc, #96]	@ (8000f68 <BSP_PB_Init+0xe0>)
 8000f08:	441a      	add	r2, r3
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	4917      	ldr	r1, [pc, #92]	@ (8000f6c <BSP_PB_Init+0xe4>)
 8000f0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f12:	4619      	mov	r1, r3
 8000f14:	4610      	mov	r0, r2
 8000f16:	f000 fb8f 	bl	8001638 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000f1a:	79fa      	ldrb	r2, [r7, #7]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4413      	add	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4a10      	ldr	r2, [pc, #64]	@ (8000f68 <BSP_PB_Init+0xe0>)
 8000f26:	1898      	adds	r0, r3, r2
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	4a11      	ldr	r2, [pc, #68]	@ (8000f70 <BSP_PB_Init+0xe8>)
 8000f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f30:	461a      	mov	r2, r3
 8000f32:	2100      	movs	r1, #0
 8000f34:	f000 fb54 	bl	80015e0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000f38:	2018      	movs	r0, #24
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f74 <BSP_PB_Init+0xec>)
 8000f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f42:	2200      	movs	r2, #0
 8000f44:	4619      	mov	r1, r3
 8000f46:	f000 fa73 	bl	8001430 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000f4a:	2318      	movs	r3, #24
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fa89 	bl	8001464 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3720      	adds	r7, #32
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	44020c00 	.word	0x44020c00
 8000f60:	20000014 	.word	0x20000014
 8000f64:	10110000 	.word	0x10110000
 8000f68:	200000ac 	.word	0x200000ac
 8000f6c:	08007878 	.word	0x08007878
 8000f70:	20000018 	.word	0x20000018
 8000f74:	2000001c 	.word	0x2000001c

08000f78 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000f82:	79fa      	ldrb	r2, [r7, #7]
 8000f84:	4613      	mov	r3, r2
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	4413      	add	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4a04      	ldr	r2, [pc, #16]	@ (8000fa0 <BSP_PB_IRQHandler+0x28>)
 8000f8e:	4413      	add	r3, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 fb65 	bl	8001660 <HAL_EXTI_IRQHandler>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200000ac 	.word	0x200000ac

08000fa4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000fd2:	f06f 0301 	mvn.w	r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	e018      	b.n	800100c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2294      	movs	r2, #148	@ 0x94
 8000fde:	fb02 f303 	mul.w	r3, r2, r3
 8000fe2:	4a0d      	ldr	r2, [pc, #52]	@ (8001018 <BSP_COM_Init+0x5c>)
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 f854 	bl	8001094 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	2294      	movs	r2, #148	@ 0x94
 8000ff0:	fb02 f303 	mul.w	r3, r2, r3
 8000ff4:	4a08      	ldr	r2, [pc, #32]	@ (8001018 <BSP_COM_Init+0x5c>)
 8000ff6:	4413      	add	r3, r2
 8000ff8:	6839      	ldr	r1, [r7, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f80e 	bl	800101c <MX_USART_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d002      	beq.n	800100c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001006:	f06f 0303 	mvn.w	r3, #3
 800100a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800100c:	68fb      	ldr	r3, [r7, #12]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200000b8 	.word	0x200000b8

0800101c <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001026:	4b16      	ldr	r3, [pc, #88]	@ (8001080 <MX_USART_Init+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	220c      	movs	r2, #12
 800103a:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	895b      	ldrh	r3, [r3, #10]
 8001040:	461a      	mov	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	891b      	ldrh	r3, [r3, #8]
 8001052:	461a      	mov	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	899b      	ldrh	r3, [r3, #12]
 800105c:	461a      	mov	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001068:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f005 ff51 	bl	8006f18 <HAL_UART_Init>
 8001076:	4603      	mov	r3, r0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000004 	.word	0x20000004

08001084 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001088:	2000      	movs	r0, #0
 800108a:	f7ff ff8b 	bl	8000fa4 <BSP_PB_Callback>
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	@ 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800109c:	4b27      	ldr	r3, [pc, #156]	@ (800113c <COM1_MspInit+0xa8>)
 800109e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010a2:	4a26      	ldr	r2, [pc, #152]	@ (800113c <COM1_MspInit+0xa8>)
 80010a4:	f043 0308 	orr.w	r3, r3, #8
 80010a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010ac:	4b23      	ldr	r3, [pc, #140]	@ (800113c <COM1_MspInit+0xa8>)
 80010ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010b2:	f003 0308 	and.w	r3, r3, #8
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80010ba:	4b20      	ldr	r3, [pc, #128]	@ (800113c <COM1_MspInit+0xa8>)
 80010bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010c0:	4a1e      	ldr	r2, [pc, #120]	@ (800113c <COM1_MspInit+0xa8>)
 80010c2:	f043 0308 	orr.w	r3, r3, #8
 80010c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010ca:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <COM1_MspInit+0xa8>)
 80010cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80010d8:	4b18      	ldr	r3, [pc, #96]	@ (800113c <COM1_MspInit+0xa8>)
 80010da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80010de:	4a17      	ldr	r2, [pc, #92]	@ (800113c <COM1_MspInit+0xa8>)
 80010e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010e4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <COM1_MspInit+0xa8>)
 80010ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80010ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80010f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010fa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001100:	2302      	movs	r3, #2
 8001102:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001104:	2301      	movs	r3, #1
 8001106:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001108:	2307      	movs	r3, #7
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	480b      	ldr	r0, [pc, #44]	@ (8001140 <COM1_MspInit+0xac>)
 8001114:	f000 faec 	bl	80016f0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001118:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800111c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001122:	2307      	movs	r3, #7
 8001124:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	4804      	ldr	r0, [pc, #16]	@ (8001140 <COM1_MspInit+0xac>)
 800112e:	f000 fadf 	bl	80016f0 <HAL_GPIO_Init>
}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	@ 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	44020c00 	.word	0x44020c00
 8001140:	42020c00 	.word	0x42020c00

08001144 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001148:	2003      	movs	r0, #3
 800114a:	f000 f966 	bl	800141a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800114e:	f001 fa45 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 8001152:	4602      	mov	r2, r0
 8001154:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <HAL_Init+0x44>)
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	f003 030f 	and.w	r3, r3, #15
 800115c:	490b      	ldr	r1, [pc, #44]	@ (800118c <HAL_Init+0x48>)
 800115e:	5ccb      	ldrb	r3, [r1, r3]
 8001160:	fa22 f303 	lsr.w	r3, r2, r3
 8001164:	4a0a      	ldr	r2, [pc, #40]	@ (8001190 <HAL_Init+0x4c>)
 8001166:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001168:	2004      	movs	r0, #4
 800116a:	f000 f9ab 	bl	80014c4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800116e:	200f      	movs	r0, #15
 8001170:	f000 f810 	bl	8001194 <HAL_InitTick>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e002      	b.n	8001184 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800117e:	f7ff fccd 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	bd80      	pop	{r7, pc}
 8001188:	44020c00 	.word	0x44020c00
 800118c:	08007858 	.word	0x08007858
 8001190:	20000000 	.word	0x20000000

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80011a0:	4b33      	ldr	r3, [pc, #204]	@ (8001270 <HAL_InitTick+0xdc>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d101      	bne.n	80011ac <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e05c      	b.n	8001266 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80011ac:	4b31      	ldr	r3, [pc, #196]	@ (8001274 <HAL_InitTick+0xe0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d10c      	bne.n	80011d2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80011b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001278 <HAL_InitTick+0xe4>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001270 <HAL_InitTick+0xdc>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	e037      	b.n	8001242 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80011d2:	f000 f9cf 	bl	8001574 <HAL_SYSTICK_GetCLKSourceConfig>
 80011d6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d023      	beq.n	8001226 <HAL_InitTick+0x92>
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d82d      	bhi.n	8001240 <HAL_InitTick+0xac>
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_InitTick+0x5e>
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d00d      	beq.n	800120c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80011f0:	e026      	b.n	8001240 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80011f2:	4b21      	ldr	r3, [pc, #132]	@ (8001278 <HAL_InitTick+0xe4>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001270 <HAL_InitTick+0xdc>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	4619      	mov	r1, r3
 80011fc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001200:	fbb3 f3f1 	udiv	r3, r3, r1
 8001204:	fbb2 f3f3 	udiv	r3, r2, r3
 8001208:	60fb      	str	r3, [r7, #12]
        break;
 800120a:	e01a      	b.n	8001242 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800120c:	4b18      	ldr	r3, [pc, #96]	@ (8001270 <HAL_InitTick+0xdc>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001216:	fbb3 f3f2 	udiv	r3, r3, r2
 800121a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	60fb      	str	r3, [r7, #12]
        break;
 8001224:	e00d      	b.n	8001242 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001226:	4b12      	ldr	r3, [pc, #72]	@ (8001270 <HAL_InitTick+0xdc>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001230:	fbb3 f3f2 	udiv	r3, r3, r2
 8001234:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001238:	fbb2 f3f3 	udiv	r3, r2, r3
 800123c:	60fb      	str	r3, [r7, #12]
        break;
 800123e:	e000      	b.n	8001242 <HAL_InitTick+0xae>
        break;
 8001240:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f000 f91c 	bl	8001480 <HAL_SYSTICK_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e009      	b.n	8001266 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001252:	2200      	movs	r2, #0
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	f04f 30ff 	mov.w	r0, #4294967295
 800125a:	f000 f8e9 	bl	8001430 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800125e:	4a07      	ldr	r2, [pc, #28]	@ (800127c <HAL_InitTick+0xe8>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000024 	.word	0x20000024
 8001274:	e000e010 	.word	0xe000e010
 8001278:	20000000 	.word	0x20000000
 800127c:	20000020 	.word	0x20000020

08001280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <HAL_IncTick+0x20>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_IncTick+0x24>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4413      	add	r3, r2
 8001290:	4a04      	ldr	r2, [pc, #16]	@ (80012a4 <HAL_IncTick+0x24>)
 8001292:	6013      	str	r3, [r2, #0]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000024 	.word	0x20000024
 80012a4:	2000014c 	.word	0x2000014c

080012a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b03      	ldr	r3, [pc, #12]	@ (80012bc <HAL_GetTick+0x14>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	2000014c 	.word	0x2000014c

080012c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f2:	4a04      	ldr	r2, [pc, #16]	@ (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60d3      	str	r3, [r2, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <__NVIC_GetPriorityGrouping+0x18>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0307 	and.w	r3, r3, #7
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800132e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001332:	2b00      	cmp	r3, #0
 8001334:	db0b      	blt.n	800134e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	f003 021f 	and.w	r2, r3, #31
 800133c:	4907      	ldr	r1, [pc, #28]	@ (800135c <__NVIC_EnableIRQ+0x38>)
 800133e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001342:	095b      	lsrs	r3, r3, #5
 8001344:	2001      	movs	r0, #1
 8001346:	fa00 f202 	lsl.w	r2, r0, r2
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000e100 	.word	0xe000e100

08001360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800136c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001370:	2b00      	cmp	r3, #0
 8001372:	db0a      	blt.n	800138a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	490c      	ldr	r1, [pc, #48]	@ (80013ac <__NVIC_SetPriority+0x4c>)
 800137a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137e:	0112      	lsls	r2, r2, #4
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	440b      	add	r3, r1
 8001384:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001388:	e00a      	b.n	80013a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4908      	ldr	r1, [pc, #32]	@ (80013b0 <__NVIC_SetPriority+0x50>)
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	3b04      	subs	r3, #4
 8001398:	0112      	lsls	r2, r2, #4
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	440b      	add	r3, r1
 800139e:	761a      	strb	r2, [r3, #24]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000e100 	.word	0xe000e100
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	@ 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f1c3 0307 	rsb	r3, r3, #7
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	bf28      	it	cs
 80013d2:	2304      	movcs	r3, #4
 80013d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3304      	adds	r3, #4
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d902      	bls.n	80013e4 <NVIC_EncodePriority+0x30>
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3b03      	subs	r3, #3
 80013e2:	e000      	b.n	80013e6 <NVIC_EncodePriority+0x32>
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	43d9      	mvns	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	4313      	orrs	r3, r2
         );
}
 800140e:	4618      	mov	r0, r3
 8001410:	3724      	adds	r7, #36	@ 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ff4c 	bl	80012c0 <__NVIC_SetPriorityGrouping>
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800143e:	f7ff ff63 	bl	8001308 <__NVIC_GetPriorityGrouping>
 8001442:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	68b9      	ldr	r1, [r7, #8]
 8001448:	6978      	ldr	r0, [r7, #20]
 800144a:	f7ff ffb3 	bl	80013b4 <NVIC_EncodePriority>
 800144e:	4602      	mov	r2, r0
 8001450:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001454:	4611      	mov	r1, r2
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ff82 	bl	8001360 <__NVIC_SetPriority>
}
 800145c:	bf00      	nop
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800146e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ff56 	bl	8001324 <__NVIC_EnableIRQ>
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001490:	d301      	bcc.n	8001496 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001492:	2301      	movs	r3, #1
 8001494:	e00d      	b.n	80014b2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001496:	4a0a      	ldr	r2, [pc, #40]	@ (80014c0 <HAL_SYSTICK_Config+0x40>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800149e:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <HAL_SYSTICK_Config+0x40>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80014a4:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <HAL_SYSTICK_Config+0x40>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a05      	ldr	r2, [pc, #20]	@ (80014c0 <HAL_SYSTICK_Config+0x40>)
 80014aa:	f043 0303 	orr.w	r3, r3, #3
 80014ae:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000e010 	.word	0xe000e010

080014c4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d844      	bhi.n	800155c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80014d2:	a201      	add	r2, pc, #4	@ (adr r2, 80014d8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80014d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d8:	080014fb 	.word	0x080014fb
 80014dc:	08001519 	.word	0x08001519
 80014e0:	0800153b 	.word	0x0800153b
 80014e4:	0800155d 	.word	0x0800155d
 80014e8:	080014ed 	.word	0x080014ed
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80014ec:	4b1f      	ldr	r3, [pc, #124]	@ (800156c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a1e      	ldr	r2, [pc, #120]	@ (800156c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014f2:	f043 0304 	orr.w	r3, r3, #4
 80014f6:	6013      	str	r3, [r2, #0]
      break;
 80014f8:	e031      	b.n	800155e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80014fa:	4b1c      	ldr	r3, [pc, #112]	@ (800156c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a1b      	ldr	r2, [pc, #108]	@ (800156c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001500:	f023 0304 	bic.w	r3, r3, #4
 8001504:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001506:	4b1a      	ldr	r3, [pc, #104]	@ (8001570 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001508:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800150c:	4a18      	ldr	r2, [pc, #96]	@ (8001570 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800150e:	f023 030c 	bic.w	r3, r3, #12
 8001512:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001516:	e022      	b.n	800155e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001518:	4b14      	ldr	r3, [pc, #80]	@ (800156c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a13      	ldr	r2, [pc, #76]	@ (800156c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800151e:	f023 0304 	bic.w	r3, r3, #4
 8001522:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001524:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001526:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800152a:	f023 030c 	bic.w	r3, r3, #12
 800152e:	4a10      	ldr	r2, [pc, #64]	@ (8001570 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001538:	e011      	b.n	800155e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800153a:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a0b      	ldr	r2, [pc, #44]	@ (800156c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001540:	f023 0304 	bic.w	r3, r3, #4
 8001544:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001546:	4b0a      	ldr	r3, [pc, #40]	@ (8001570 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001548:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800154c:	f023 030c 	bic.w	r3, r3, #12
 8001550:	4a07      	ldr	r2, [pc, #28]	@ (8001570 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001552:	f043 0308 	orr.w	r3, r3, #8
 8001556:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800155a:	e000      	b.n	800155e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800155c:	bf00      	nop
  }
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000e010 	.word	0xe000e010
 8001570:	44020c00 	.word	0x44020c00

08001574 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800157a:	4b17      	ldr	r3, [pc, #92]	@ (80015d8 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	2b00      	cmp	r3, #0
 8001584:	d002      	beq.n	800158c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001586:	2304      	movs	r3, #4
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	e01e      	b.n	80015ca <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 800158c:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800158e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	2b08      	cmp	r3, #8
 800159c:	d00f      	beq.n	80015be <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d80f      	bhi.n	80015c4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b04      	cmp	r3, #4
 80015ae:	d003      	beq.n	80015b8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80015b0:	e008      	b.n	80015c4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
        break;
 80015b6:	e008      	b.n	80015ca <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80015b8:	2301      	movs	r3, #1
 80015ba:	607b      	str	r3, [r7, #4]
        break;
 80015bc:	e005      	b.n	80015ca <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80015be:	2302      	movs	r3, #2
 80015c0:	607b      	str	r3, [r7, #4]
        break;
 80015c2:	e002      	b.n	80015ca <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80015c4:	2300      	movs	r3, #0
 80015c6:	607b      	str	r3, [r7, #4]
        break;
 80015c8:	bf00      	nop
    }
  }
  return systick_source;
 80015ca:	687b      	ldr	r3, [r7, #4]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000e010 	.word	0xe000e010
 80015dc:	44020c00 	.word	0x44020c00

080015e0 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80015e0:	b480      	push	{r7}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	460b      	mov	r3, r1
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80015f2:	7afb      	ldrb	r3, [r7, #11]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d011      	beq.n	800161c <HAL_EXTI_RegisterCallback+0x3c>
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	dc13      	bgt.n	8001624 <HAL_EXTI_RegisterCallback+0x44>
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d002      	beq.n	8001606 <HAL_EXTI_RegisterCallback+0x26>
 8001600:	2b01      	cmp	r3, #1
 8001602:	d007      	beq.n	8001614 <HAL_EXTI_RegisterCallback+0x34>
 8001604:	e00e      	b.n	8001624 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	609a      	str	r2, [r3, #8]
      break;
 8001612:	e00a      	b.n	800162a <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	605a      	str	r2, [r3, #4]
      break;
 800161a:	e006      	b.n	800162a <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	609a      	str	r2, [r3, #8]
      break;
 8001622:	e002      	b.n	800162a <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	75fb      	strb	r3, [r7, #23]
      break;
 8001628:	bf00      	nop
  }

  return status;
 800162a:	7dfb      	ldrb	r3, [r7, #23]
}
 800162c:	4618      	mov	r0, r3
 800162e:	371c      	adds	r7, #28
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e003      	b.n	8001654 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001652:	2300      	movs	r3, #0
  }
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	0c1b      	lsrs	r3, r3, #16
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 031f 	and.w	r3, r3, #31
 800167c:	2201      	movs	r2, #1
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	015a      	lsls	r2, r3, #5
 8001688:	4b17      	ldr	r3, [pc, #92]	@ (80016e8 <HAL_EXTI_IRQHandler+0x88>)
 800168a:	4413      	add	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d009      	beq.n	80016b2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	015a      	lsls	r2, r3, #5
 80016b6:	4b0d      	ldr	r3, [pc, #52]	@ (80016ec <HAL_EXTI_IRQHandler+0x8c>)
 80016b8:	4413      	add	r3, r2
 80016ba:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d009      	beq.n	80016e0 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d002      	beq.n	80016e0 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	4798      	blx	r3
    }
  }
}
 80016e0:	bf00      	nop
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	4402200c 	.word	0x4402200c
 80016ec:	44022010 	.word	0x44022010

080016f0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b087      	sub	sp, #28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80016fe:	e142      	b.n	8001986 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	2101      	movs	r1, #1
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	fa01 f303 	lsl.w	r3, r1, r3
 800170c:	4013      	ands	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 8134 	beq.w	8001980 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x38>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b12      	cmp	r3, #18
 8001726:	d125      	bne.n	8001774 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	08da      	lsrs	r2, r3, #3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3208      	adds	r2, #8
 8001730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001734:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	220f      	movs	r2, #15
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4013      	ands	r3, r2
 800174a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	f003 020f 	and.w	r2, r3, #15
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	4313      	orrs	r3, r2
 8001764:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	08da      	lsrs	r2, r3, #3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3208      	adds	r2, #8
 800176e:	6979      	ldr	r1, [r7, #20]
 8001770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	2203      	movs	r2, #3
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	4013      	ands	r3, r2
 800178a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0203 	and.w	r2, r3, #3
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	4313      	orrs	r3, r2
 80017a0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d00b      	beq.n	80017c8 <HAL_GPIO_Init+0xd8>
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d007      	beq.n	80017c8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017bc:	2b11      	cmp	r3, #17
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b12      	cmp	r3, #18
 80017c6:	d130      	bne.n	800182a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	2203      	movs	r2, #3
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4013      	ands	r3, r2
 80017de:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	68da      	ldr	r2, [r3, #12]
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017fe:	2201      	movs	r2, #1
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	4013      	ands	r3, r2
 800180c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	f003 0201 	and.w	r2, r3, #1
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	4313      	orrs	r3, r2
 8001822:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	2b03      	cmp	r3, #3
 8001834:	d109      	bne.n	800184a <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 800183e:	2b03      	cmp	r3, #3
 8001840:	d11b      	bne.n	800187a <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d017      	beq.n	800187a <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	2203      	movs	r2, #3
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	4013      	ands	r3, r2
 8001860:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	4313      	orrs	r3, r2
 8001872:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d07c      	beq.n	8001980 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001886:	4a47      	ldr	r2, [pc, #284]	@ (80019a4 <HAL_GPIO_Init+0x2b4>)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	089b      	lsrs	r3, r3, #2
 800188c:	3318      	adds	r3, #24
 800188e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001892:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	220f      	movs	r2, #15
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	4013      	ands	r3, r2
 80018a8:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	0a9a      	lsrs	r2, r3, #10
 80018ae:	4b3e      	ldr	r3, [pc, #248]	@ (80019a8 <HAL_GPIO_Init+0x2b8>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	f002 0203 	and.w	r2, r2, #3
 80018b8:	00d2      	lsls	r2, r2, #3
 80018ba:	4093      	lsls	r3, r2
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	4313      	orrs	r3, r2
 80018c0:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80018c2:	4938      	ldr	r1, [pc, #224]	@ (80019a4 <HAL_GPIO_Init+0x2b4>)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	3318      	adds	r3, #24
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80018d0:	4b34      	ldr	r3, [pc, #208]	@ (80019a4 <HAL_GPIO_Init+0x2b4>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	43db      	mvns	r3, r3
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4013      	ands	r3, r2
 80018de:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80018f4:	4a2b      	ldr	r2, [pc, #172]	@ (80019a4 <HAL_GPIO_Init+0x2b4>)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80018fa:	4b2a      	ldr	r3, [pc, #168]	@ (80019a4 <HAL_GPIO_Init+0x2b4>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	43db      	mvns	r3, r3
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	4013      	ands	r3, r2
 8001908:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4313      	orrs	r3, r2
 800191c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800191e:	4a21      	ldr	r2, [pc, #132]	@ (80019a4 <HAL_GPIO_Init+0x2b4>)
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001924:	4b1f      	ldr	r3, [pc, #124]	@ (80019a4 <HAL_GPIO_Init+0x2b4>)
 8001926:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800192a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	43db      	mvns	r3, r3
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	4013      	ands	r3, r2
 8001934:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800194a:	4a16      	ldr	r2, [pc, #88]	@ (80019a4 <HAL_GPIO_Init+0x2b4>)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001952:	4b14      	ldr	r3, [pc, #80]	@ (80019a4 <HAL_GPIO_Init+0x2b4>)
 8001954:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001958:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	43db      	mvns	r3, r3
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	4013      	ands	r3, r2
 8001962:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4313      	orrs	r3, r2
 8001976:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001978:	4a0a      	ldr	r2, [pc, #40]	@ (80019a4 <HAL_GPIO_Init+0x2b4>)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	3301      	adds	r3, #1
 8001984:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	f47f aeb5 	bne.w	8001700 <HAL_GPIO_Init+0x10>
  }
}
 8001996:	bf00      	nop
 8001998:	bf00      	nop
 800199a:	371c      	adds	r7, #28
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	44022000 	.word	0x44022000
 80019a8:	002f7f7f 	.word	0x002f7f7f

080019ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	807b      	strh	r3, [r7, #2]
 80019b8:	4613      	mov	r3, r2
 80019ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019bc:	787b      	ldrb	r3, [r7, #1]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019c2:	887a      	ldrh	r2, [r7, #2]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019c8:	e002      	b.n	80019d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ca:	887a      	ldrh	r2, [r7, #2]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80019e0:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80019e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e4:	4a04      	ldr	r2, [pc, #16]	@ (80019f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	44020800 	.word	0x44020800

080019fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d102      	bne.n	8001a10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f000 bc28 	b.w	8002260 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a10:	4b94      	ldr	r3, [pc, #592]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	f003 0318 	and.w	r3, r3, #24
 8001a18:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001a1a:	4b92      	ldr	r3, [pc, #584]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0310 	and.w	r3, r3, #16
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d05b      	beq.n	8001ae8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d005      	beq.n	8001a42 <HAL_RCC_OscConfig+0x46>
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	2b18      	cmp	r3, #24
 8001a3a:	d114      	bne.n	8001a66 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d111      	bne.n	8001a66 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d102      	bne.n	8001a50 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	f000 bc08 	b.w	8002260 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001a50:	4b84      	ldr	r3, [pc, #528]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	041b      	lsls	r3, r3, #16
 8001a5e:	4981      	ldr	r1, [pc, #516]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001a64:	e040      	b.n	8001ae8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d023      	beq.n	8001ab6 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a6e:	4b7d      	ldr	r3, [pc, #500]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a7c      	ldr	r2, [pc, #496]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7a:	f7ff fc15 	bl	80012a8 <HAL_GetTick>
 8001a7e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001a82:	f7ff fc11 	bl	80012a8 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e3e5      	b.n	8002260 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001a94:	4b73      	ldr	r3, [pc, #460]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f0      	beq.n	8001a82 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001aa0:	4b70      	ldr	r3, [pc, #448]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	041b      	lsls	r3, r3, #16
 8001aae:	496d      	ldr	r1, [pc, #436]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	618b      	str	r3, [r1, #24]
 8001ab4:	e018      	b.n	8001ae8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ab6:	4b6b      	ldr	r3, [pc, #428]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a6a      	ldr	r2, [pc, #424]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001abc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac2:	f7ff fbf1 	bl	80012a8 <HAL_GetTick>
 8001ac6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001aca:	f7ff fbed 	bl	80012a8 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e3c1      	b.n	8002260 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001adc:	4b61      	ldr	r3, [pc, #388]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f0      	bne.n	8001aca <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80a0 	beq.w	8001c36 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	2b10      	cmp	r3, #16
 8001afa:	d005      	beq.n	8001b08 <HAL_RCC_OscConfig+0x10c>
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	2b18      	cmp	r3, #24
 8001b00:	d109      	bne.n	8001b16 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d106      	bne.n	8001b16 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f040 8092 	bne.w	8001c36 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e3a4      	b.n	8002260 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b1e:	d106      	bne.n	8001b2e <HAL_RCC_OscConfig+0x132>
 8001b20:	4b50      	ldr	r3, [pc, #320]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a4f      	ldr	r2, [pc, #316]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001b26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	e058      	b.n	8001be0 <HAL_RCC_OscConfig+0x1e4>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d112      	bne.n	8001b5c <HAL_RCC_OscConfig+0x160>
 8001b36:	4b4b      	ldr	r3, [pc, #300]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a4a      	ldr	r2, [pc, #296]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001b3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	4b48      	ldr	r3, [pc, #288]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a47      	ldr	r2, [pc, #284]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001b48:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	4b45      	ldr	r3, [pc, #276]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a44      	ldr	r2, [pc, #272]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001b54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	e041      	b.n	8001be0 <HAL_RCC_OscConfig+0x1e4>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b64:	d112      	bne.n	8001b8c <HAL_RCC_OscConfig+0x190>
 8001b66:	4b3f      	ldr	r3, [pc, #252]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a3e      	ldr	r2, [pc, #248]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001b6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	4b3c      	ldr	r3, [pc, #240]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a3b      	ldr	r2, [pc, #236]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001b78:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	4b39      	ldr	r3, [pc, #228]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a38      	ldr	r2, [pc, #224]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e029      	b.n	8001be0 <HAL_RCC_OscConfig+0x1e4>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001b94:	d112      	bne.n	8001bbc <HAL_RCC_OscConfig+0x1c0>
 8001b96:	4b33      	ldr	r3, [pc, #204]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a32      	ldr	r2, [pc, #200]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001b9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	4b30      	ldr	r3, [pc, #192]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a2f      	ldr	r2, [pc, #188]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001ba8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b2d      	ldr	r3, [pc, #180]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a2c      	ldr	r2, [pc, #176]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e011      	b.n	8001be0 <HAL_RCC_OscConfig+0x1e4>
 8001bbc:	4b29      	ldr	r3, [pc, #164]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a28      	ldr	r2, [pc, #160]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001bc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	4b26      	ldr	r3, [pc, #152]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a25      	ldr	r2, [pc, #148]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001bce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b23      	ldr	r3, [pc, #140]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a22      	ldr	r2, [pc, #136]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001bda:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d013      	beq.n	8001c10 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7ff fb5e 	bl	80012a8 <HAL_GetTick>
 8001bec:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001bf0:	f7ff fb5a 	bl	80012a8 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b64      	cmp	r3, #100	@ 0x64
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e32e      	b.n	8002260 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c02:	4b18      	ldr	r3, [pc, #96]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x1f4>
 8001c0e:	e012      	b.n	8001c36 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7ff fb4a 	bl	80012a8 <HAL_GetTick>
 8001c14:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001c18:	f7ff fb46 	bl	80012a8 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	@ 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e31a      	b.n	8002260 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c64 <HAL_RCC_OscConfig+0x268>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 809a 	beq.w	8001d78 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d005      	beq.n	8001c56 <HAL_RCC_OscConfig+0x25a>
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	2b18      	cmp	r3, #24
 8001c4e:	d149      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d146      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d104      	bne.n	8001c68 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e2fe      	b.n	8002260 <HAL_RCC_OscConfig+0x864>
 8001c62:	bf00      	nop
 8001c64:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d11c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001c6e:	4b9a      	ldr	r3, [pc, #616]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0218 	and.w	r2, r3, #24
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d014      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001c7e:	4b96      	ldr	r3, [pc, #600]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 0218 	bic.w	r2, r3, #24
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	4993      	ldr	r1, [pc, #588]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001c90:	f000 fdd0 	bl	8002834 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c94:	4b91      	ldr	r3, [pc, #580]	@ (8001edc <HAL_RCC_OscConfig+0x4e0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fa7b 	bl	8001194 <HAL_InitTick>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e2db      	b.n	8002260 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fafe 	bl	80012a8 <HAL_GetTick>
 8001cac:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001cb0:	f7ff fafa 	bl	80012a8 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e2ce      	b.n	8002260 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc2:	4b85      	ldr	r3, [pc, #532]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001cce:	4b82      	ldr	r3, [pc, #520]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	041b      	lsls	r3, r3, #16
 8001cdc:	497e      	ldr	r1, [pc, #504]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001ce2:	e049      	b.n	8001d78 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d02c      	beq.n	8001d46 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001cec:	4b7a      	ldr	r3, [pc, #488]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f023 0218 	bic.w	r2, r3, #24
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	4977      	ldr	r1, [pc, #476]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001cfe:	4b76      	ldr	r3, [pc, #472]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a75      	ldr	r2, [pc, #468]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0a:	f7ff facd 	bl	80012a8 <HAL_GetTick>
 8001d0e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001d12:	f7ff fac9 	bl	80012a8 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e29d      	b.n	8002260 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d24:	4b6c      	ldr	r3, [pc, #432]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001d30:	4b69      	ldr	r3, [pc, #420]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	041b      	lsls	r3, r3, #16
 8001d3e:	4966      	ldr	r1, [pc, #408]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	610b      	str	r3, [r1, #16]
 8001d44:	e018      	b.n	8001d78 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d46:	4b64      	ldr	r3, [pc, #400]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a63      	ldr	r2, [pc, #396]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001d4c:	f023 0301 	bic.w	r3, r3, #1
 8001d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d52:	f7ff faa9 	bl	80012a8 <HAL_GetTick>
 8001d56:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001d5a:	f7ff faa5 	bl	80012a8 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e279      	b.n	8002260 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d6c:	4b5a      	ldr	r3, [pc, #360]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f0      	bne.n	8001d5a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d03c      	beq.n	8001dfe <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d01c      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8c:	4b52      	ldr	r3, [pc, #328]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001d8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d92:	4a51      	ldr	r2, [pc, #324]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001d94:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9c:	f7ff fa84 	bl	80012a8 <HAL_GetTick>
 8001da0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001da4:	f7ff fa80 	bl	80012a8 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e254      	b.n	8002260 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001db6:	4b48      	ldr	r3, [pc, #288]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0ef      	beq.n	8001da4 <HAL_RCC_OscConfig+0x3a8>
 8001dc4:	e01b      	b.n	8001dfe <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dc6:	4b44      	ldr	r3, [pc, #272]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001dc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dcc:	4a42      	ldr	r2, [pc, #264]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001dce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001dd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd6:	f7ff fa67 	bl	80012a8 <HAL_GetTick>
 8001dda:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001dde:	f7ff fa63 	bl	80012a8 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e237      	b.n	8002260 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001df0:	4b39      	ldr	r3, [pc, #228]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001df2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001df6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1ef      	bne.n	8001dde <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 80d2 	beq.w	8001fb0 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001e0c:	4b34      	ldr	r3, [pc, #208]	@ (8001ee0 <HAL_RCC_OscConfig+0x4e4>)
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d118      	bne.n	8001e4a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001e18:	4b31      	ldr	r3, [pc, #196]	@ (8001ee0 <HAL_RCC_OscConfig+0x4e4>)
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1c:	4a30      	ldr	r2, [pc, #192]	@ (8001ee0 <HAL_RCC_OscConfig+0x4e4>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e24:	f7ff fa40 	bl	80012a8 <HAL_GetTick>
 8001e28:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2c:	f7ff fa3c 	bl	80012a8 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e210      	b.n	8002260 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001e3e:	4b28      	ldr	r3, [pc, #160]	@ (8001ee0 <HAL_RCC_OscConfig+0x4e4>)
 8001e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d108      	bne.n	8001e64 <HAL_RCC_OscConfig+0x468>
 8001e52:	4b21      	ldr	r3, [pc, #132]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e58:	4a1f      	ldr	r2, [pc, #124]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e62:	e074      	b.n	8001f4e <HAL_RCC_OscConfig+0x552>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d118      	bne.n	8001e9e <HAL_RCC_OscConfig+0x4a2>
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001e6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e72:	4a19      	ldr	r2, [pc, #100]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e7c:	4b16      	ldr	r3, [pc, #88]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e82:	4a15      	ldr	r2, [pc, #84]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001e84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e88:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e8c:	4b12      	ldr	r3, [pc, #72]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001e8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e92:	4a11      	ldr	r2, [pc, #68]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001e94:	f023 0304 	bic.w	r3, r3, #4
 8001e98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e9c:	e057      	b.n	8001f4e <HAL_RCC_OscConfig+0x552>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b05      	cmp	r3, #5
 8001ea4:	d11e      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4e8>
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001ea8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001eac:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001eae:	f043 0304 	orr.w	r3, r3, #4
 8001eb2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001eb6:	4b08      	ldr	r3, [pc, #32]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001eb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ebc:	4a06      	ldr	r2, [pc, #24]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001ebe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ec2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ec6:	4b04      	ldr	r3, [pc, #16]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001ec8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ecc:	4a02      	ldr	r2, [pc, #8]	@ (8001ed8 <HAL_RCC_OscConfig+0x4dc>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ed6:	e03a      	b.n	8001f4e <HAL_RCC_OscConfig+0x552>
 8001ed8:	44020c00 	.word	0x44020c00
 8001edc:	20000020 	.word	0x20000020
 8001ee0:	44020800 	.word	0x44020800
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b85      	cmp	r3, #133	@ 0x85
 8001eea:	d118      	bne.n	8001f1e <HAL_RCC_OscConfig+0x522>
 8001eec:	4ba2      	ldr	r3, [pc, #648]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8001eee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ef2:	4aa1      	ldr	r2, [pc, #644]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8001ef4:	f043 0304 	orr.w	r3, r3, #4
 8001ef8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001efc:	4b9e      	ldr	r3, [pc, #632]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8001efe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f02:	4a9d      	ldr	r2, [pc, #628]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8001f04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f08:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f0c:	4b9a      	ldr	r3, [pc, #616]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8001f0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f12:	4a99      	ldr	r2, [pc, #612]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f1c:	e017      	b.n	8001f4e <HAL_RCC_OscConfig+0x552>
 8001f1e:	4b96      	ldr	r3, [pc, #600]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8001f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f24:	4a94      	ldr	r2, [pc, #592]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8001f26:	f023 0301 	bic.w	r3, r3, #1
 8001f2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f2e:	4b92      	ldr	r3, [pc, #584]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8001f30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f34:	4a90      	ldr	r2, [pc, #576]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8001f36:	f023 0304 	bic.w	r3, r3, #4
 8001f3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f3e:	4b8e      	ldr	r3, [pc, #568]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8001f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f44:	4a8c      	ldr	r2, [pc, #560]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8001f46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d016      	beq.n	8001f84 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f56:	f7ff f9a7 	bl	80012a8 <HAL_GetTick>
 8001f5a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7ff f9a3 	bl	80012a8 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e175      	b.n	8002260 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f74:	4b80      	ldr	r3, [pc, #512]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8001f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0ed      	beq.n	8001f5e <HAL_RCC_OscConfig+0x562>
 8001f82:	e015      	b.n	8001fb0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f84:	f7ff f990 	bl	80012a8 <HAL_GetTick>
 8001f88:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f8a:	e00a      	b.n	8001fa2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8c:	f7ff f98c 	bl	80012a8 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e15e      	b.n	8002260 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fa2:	4b75      	ldr	r3, [pc, #468]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8001fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1ed      	bne.n	8001f8c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0320 	and.w	r3, r3, #32
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d036      	beq.n	800202a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d019      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fc4:	4b6c      	ldr	r3, [pc, #432]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a6b      	ldr	r2, [pc, #428]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8001fca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd0:	f7ff f96a 	bl	80012a8 <HAL_GetTick>
 8001fd4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001fd8:	f7ff f966 	bl	80012a8 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e13a      	b.n	8002260 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001fea:	4b63      	ldr	r3, [pc, #396]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x5dc>
 8001ff6:	e018      	b.n	800202a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ff8:	4b5f      	ldr	r3, [pc, #380]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a5e      	ldr	r2, [pc, #376]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8001ffe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002002:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7ff f950 	bl	80012a8 <HAL_GetTick>
 8002008:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800200c:	f7ff f94c 	bl	80012a8 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e120      	b.n	8002260 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800201e:	4b56      	ldr	r3, [pc, #344]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 8115 	beq.w	800225e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2b18      	cmp	r3, #24
 8002038:	f000 80af 	beq.w	800219a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002040:	2b02      	cmp	r3, #2
 8002042:	f040 8086 	bne.w	8002152 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002046:	4b4c      	ldr	r3, [pc, #304]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a4b      	ldr	r2, [pc, #300]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 800204c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002052:	f7ff f929 	bl	80012a8 <HAL_GetTick>
 8002056:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800205a:	f7ff f925 	bl	80012a8 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e0f9      	b.n	8002260 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800206c:	4b42      	ldr	r3, [pc, #264]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f0      	bne.n	800205a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002078:	4b3f      	ldr	r3, [pc, #252]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 800207a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002080:	f023 0303 	bic.w	r3, r3, #3
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800208c:	0212      	lsls	r2, r2, #8
 800208e:	430a      	orrs	r2, r1
 8002090:	4939      	ldr	r1, [pc, #228]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8002092:	4313      	orrs	r3, r2
 8002094:	628b      	str	r3, [r1, #40]	@ 0x28
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800209a:	3b01      	subs	r3, #1
 800209c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a4:	3b01      	subs	r3, #1
 80020a6:	025b      	lsls	r3, r3, #9
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b0:	3b01      	subs	r3, #1
 80020b2:	041b      	lsls	r3, r3, #16
 80020b4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	3b01      	subs	r3, #1
 80020c0:	061b      	lsls	r3, r3, #24
 80020c2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80020c6:	492c      	ldr	r1, [pc, #176]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80020cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 80020ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d0:	4a29      	ldr	r2, [pc, #164]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 80020d2:	f023 0310 	bic.w	r3, r3, #16
 80020d6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020dc:	4a26      	ldr	r2, [pc, #152]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80020e2:	4b25      	ldr	r3, [pc, #148]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 80020e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e6:	4a24      	ldr	r2, [pc, #144]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 80020e8:	f043 0310 	orr.w	r3, r3, #16
 80020ec:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80020ee:	4b22      	ldr	r3, [pc, #136]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 80020f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f2:	f023 020c 	bic.w	r2, r3, #12
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fa:	491f      	ldr	r1, [pc, #124]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002100:	4b1d      	ldr	r3, [pc, #116]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8002102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002104:	f023 0220 	bic.w	r2, r3, #32
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800210c:	491a      	ldr	r1, [pc, #104]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 800210e:	4313      	orrs	r3, r2
 8002110:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002112:	4b19      	ldr	r3, [pc, #100]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8002114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002116:	4a18      	ldr	r2, [pc, #96]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800211c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800211e:	4b16      	ldr	r3, [pc, #88]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a15      	ldr	r2, [pc, #84]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8002124:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212a:	f7ff f8bd 	bl	80012a8 <HAL_GetTick>
 800212e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002132:	f7ff f8b9 	bl	80012a8 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e08d      	b.n	8002260 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002144:	4b0c      	ldr	r3, [pc, #48]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f0      	beq.n	8002132 <HAL_RCC_OscConfig+0x736>
 8002150:	e085      	b.n	800225e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002152:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a08      	ldr	r2, [pc, #32]	@ (8002178 <HAL_RCC_OscConfig+0x77c>)
 8002158:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800215c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215e:	f7ff f8a3 	bl	80012a8 <HAL_GetTick>
 8002162:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002164:	e00a      	b.n	800217c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002166:	f7ff f89f 	bl	80012a8 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d903      	bls.n	800217c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e073      	b.n	8002260 <HAL_RCC_OscConfig+0x864>
 8002178:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800217c:	4b3a      	ldr	r3, [pc, #232]	@ (8002268 <HAL_RCC_OscConfig+0x86c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1ee      	bne.n	8002166 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002188:	4b37      	ldr	r3, [pc, #220]	@ (8002268 <HAL_RCC_OscConfig+0x86c>)
 800218a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218c:	4a36      	ldr	r2, [pc, #216]	@ (8002268 <HAL_RCC_OscConfig+0x86c>)
 800218e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002192:	f023 0303 	bic.w	r3, r3, #3
 8002196:	6293      	str	r3, [r2, #40]	@ 0x28
 8002198:	e061      	b.n	800225e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800219a:	4b33      	ldr	r3, [pc, #204]	@ (8002268 <HAL_RCC_OscConfig+0x86c>)
 800219c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80021a0:	4b31      	ldr	r3, [pc, #196]	@ (8002268 <HAL_RCC_OscConfig+0x86c>)
 80021a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d031      	beq.n	8002212 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	f003 0203 	and.w	r2, r3, #3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d12a      	bne.n	8002212 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	0a1b      	lsrs	r3, r3, #8
 80021c0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d122      	bne.n	8002212 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021d6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d11a      	bne.n	8002212 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	0a5b      	lsrs	r3, r3, #9
 80021e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d111      	bne.n	8002212 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	0c1b      	lsrs	r3, r3, #16
 80021f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021fa:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d108      	bne.n	8002212 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	0e1b      	lsrs	r3, r3, #24
 8002204:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e024      	b.n	8002260 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002216:	4b14      	ldr	r3, [pc, #80]	@ (8002268 <HAL_RCC_OscConfig+0x86c>)
 8002218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800221a:	08db      	lsrs	r3, r3, #3
 800221c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002224:	429a      	cmp	r2, r3
 8002226:	d01a      	beq.n	800225e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002228:	4b0f      	ldr	r3, [pc, #60]	@ (8002268 <HAL_RCC_OscConfig+0x86c>)
 800222a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800222c:	4a0e      	ldr	r2, [pc, #56]	@ (8002268 <HAL_RCC_OscConfig+0x86c>)
 800222e:	f023 0310 	bic.w	r3, r3, #16
 8002232:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7ff f838 	bl	80012a8 <HAL_GetTick>
 8002238:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800223a:	bf00      	nop
 800223c:	f7ff f834 	bl	80012a8 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	4293      	cmp	r3, r2
 8002246:	d0f9      	beq.n	800223c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800224c:	4a06      	ldr	r2, [pc, #24]	@ (8002268 <HAL_RCC_OscConfig+0x86c>)
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002252:	4b05      	ldr	r3, [pc, #20]	@ (8002268 <HAL_RCC_OscConfig+0x86c>)
 8002254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002256:	4a04      	ldr	r2, [pc, #16]	@ (8002268 <HAL_RCC_OscConfig+0x86c>)
 8002258:	f043 0310 	orr.w	r3, r3, #16
 800225c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3720      	adds	r7, #32
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	44020c00 	.word	0x44020c00

0800226c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e19e      	b.n	80025be <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002280:	4b83      	ldr	r3, [pc, #524]	@ (8002490 <HAL_RCC_ClockConfig+0x224>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 030f 	and.w	r3, r3, #15
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d910      	bls.n	80022b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228e:	4b80      	ldr	r3, [pc, #512]	@ (8002490 <HAL_RCC_ClockConfig+0x224>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 020f 	bic.w	r2, r3, #15
 8002296:	497e      	ldr	r1, [pc, #504]	@ (8002490 <HAL_RCC_ClockConfig+0x224>)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800229e:	4b7c      	ldr	r3, [pc, #496]	@ (8002490 <HAL_RCC_ClockConfig+0x224>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d001      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e186      	b.n	80025be <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d012      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	695a      	ldr	r2, [r3, #20]
 80022c0:	4b74      	ldr	r3, [pc, #464]	@ (8002494 <HAL_RCC_ClockConfig+0x228>)
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d909      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80022ce:	4b71      	ldr	r3, [pc, #452]	@ (8002494 <HAL_RCC_ClockConfig+0x228>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	021b      	lsls	r3, r3, #8
 80022dc:	496d      	ldr	r1, [pc, #436]	@ (8002494 <HAL_RCC_ClockConfig+0x228>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d012      	beq.n	8002314 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	4b68      	ldr	r3, [pc, #416]	@ (8002494 <HAL_RCC_ClockConfig+0x228>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d909      	bls.n	8002314 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002300:	4b64      	ldr	r3, [pc, #400]	@ (8002494 <HAL_RCC_ClockConfig+0x228>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	4961      	ldr	r1, [pc, #388]	@ (8002494 <HAL_RCC_ClockConfig+0x228>)
 8002310:	4313      	orrs	r3, r2
 8002312:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d010      	beq.n	8002342 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	4b5b      	ldr	r3, [pc, #364]	@ (8002494 <HAL_RCC_ClockConfig+0x228>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800232c:	429a      	cmp	r2, r3
 800232e:	d908      	bls.n	8002342 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002330:	4b58      	ldr	r3, [pc, #352]	@ (8002494 <HAL_RCC_ClockConfig+0x228>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4955      	ldr	r1, [pc, #340]	@ (8002494 <HAL_RCC_ClockConfig+0x228>)
 800233e:	4313      	orrs	r3, r2
 8002340:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d010      	beq.n	8002370 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	4b50      	ldr	r3, [pc, #320]	@ (8002494 <HAL_RCC_ClockConfig+0x228>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	429a      	cmp	r2, r3
 800235c:	d908      	bls.n	8002370 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800235e:	4b4d      	ldr	r3, [pc, #308]	@ (8002494 <HAL_RCC_ClockConfig+0x228>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	f023 020f 	bic.w	r2, r3, #15
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	494a      	ldr	r1, [pc, #296]	@ (8002494 <HAL_RCC_ClockConfig+0x228>)
 800236c:	4313      	orrs	r3, r2
 800236e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 8093 	beq.w	80024a4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b03      	cmp	r3, #3
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002386:	4b43      	ldr	r3, [pc, #268]	@ (8002494 <HAL_RCC_ClockConfig+0x228>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d121      	bne.n	80023d6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e113      	b.n	80025be <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800239e:	4b3d      	ldr	r3, [pc, #244]	@ (8002494 <HAL_RCC_ClockConfig+0x228>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d115      	bne.n	80023d6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e107      	b.n	80025be <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80023b6:	4b37      	ldr	r3, [pc, #220]	@ (8002494 <HAL_RCC_ClockConfig+0x228>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e0fb      	b.n	80025be <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c6:	4b33      	ldr	r3, [pc, #204]	@ (8002494 <HAL_RCC_ClockConfig+0x228>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e0f3      	b.n	80025be <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80023d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002494 <HAL_RCC_ClockConfig+0x228>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f023 0203 	bic.w	r2, r3, #3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	492c      	ldr	r1, [pc, #176]	@ (8002494 <HAL_RCC_ClockConfig+0x228>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e8:	f7fe ff5e 	bl	80012a8 <HAL_GetTick>
 80023ec:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d112      	bne.n	800241c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f6:	e00a      	b.n	800240e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80023f8:	f7fe ff56 	bl	80012a8 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e0d7      	b.n	80025be <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800240e:	4b21      	ldr	r3, [pc, #132]	@ (8002494 <HAL_RCC_ClockConfig+0x228>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f003 0318 	and.w	r3, r3, #24
 8002416:	2b18      	cmp	r3, #24
 8002418:	d1ee      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x18c>
 800241a:	e043      	b.n	80024a4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d112      	bne.n	800244a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002424:	e00a      	b.n	800243c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002426:	f7fe ff3f 	bl	80012a8 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e0c0      	b.n	80025be <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800243c:	4b15      	ldr	r3, [pc, #84]	@ (8002494 <HAL_RCC_ClockConfig+0x228>)
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	f003 0318 	and.w	r3, r3, #24
 8002444:	2b10      	cmp	r3, #16
 8002446:	d1ee      	bne.n	8002426 <HAL_RCC_ClockConfig+0x1ba>
 8002448:	e02c      	b.n	80024a4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d122      	bne.n	8002498 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002452:	e00a      	b.n	800246a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002454:	f7fe ff28 	bl	80012a8 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e0a9      	b.n	80025be <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800246a:	4b0a      	ldr	r3, [pc, #40]	@ (8002494 <HAL_RCC_ClockConfig+0x228>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f003 0318 	and.w	r3, r3, #24
 8002472:	2b08      	cmp	r3, #8
 8002474:	d1ee      	bne.n	8002454 <HAL_RCC_ClockConfig+0x1e8>
 8002476:	e015      	b.n	80024a4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002478:	f7fe ff16 	bl	80012a8 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002486:	4293      	cmp	r3, r2
 8002488:	d906      	bls.n	8002498 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e097      	b.n	80025be <HAL_RCC_ClockConfig+0x352>
 800248e:	bf00      	nop
 8002490:	40022000 	.word	0x40022000
 8002494:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002498:	4b4b      	ldr	r3, [pc, #300]	@ (80025c8 <HAL_RCC_ClockConfig+0x35c>)
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	f003 0318 	and.w	r3, r3, #24
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1e9      	bne.n	8002478 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d010      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	4b44      	ldr	r3, [pc, #272]	@ (80025c8 <HAL_RCC_ClockConfig+0x35c>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	f003 030f 	and.w	r3, r3, #15
 80024bc:	429a      	cmp	r2, r3
 80024be:	d208      	bcs.n	80024d2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80024c0:	4b41      	ldr	r3, [pc, #260]	@ (80025c8 <HAL_RCC_ClockConfig+0x35c>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f023 020f 	bic.w	r2, r3, #15
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	493e      	ldr	r1, [pc, #248]	@ (80025c8 <HAL_RCC_ClockConfig+0x35c>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024d2:	4b3e      	ldr	r3, [pc, #248]	@ (80025cc <HAL_RCC_ClockConfig+0x360>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d210      	bcs.n	8002502 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e0:	4b3a      	ldr	r3, [pc, #232]	@ (80025cc <HAL_RCC_ClockConfig+0x360>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f023 020f 	bic.w	r2, r3, #15
 80024e8:	4938      	ldr	r1, [pc, #224]	@ (80025cc <HAL_RCC_ClockConfig+0x360>)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f0:	4b36      	ldr	r3, [pc, #216]	@ (80025cc <HAL_RCC_ClockConfig+0x360>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d001      	beq.n	8002502 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e05d      	b.n	80025be <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	d010      	beq.n	8002530 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	4b2d      	ldr	r3, [pc, #180]	@ (80025c8 <HAL_RCC_ClockConfig+0x35c>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800251a:	429a      	cmp	r2, r3
 800251c:	d208      	bcs.n	8002530 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800251e:	4b2a      	ldr	r3, [pc, #168]	@ (80025c8 <HAL_RCC_ClockConfig+0x35c>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	4927      	ldr	r1, [pc, #156]	@ (80025c8 <HAL_RCC_ClockConfig+0x35c>)
 800252c:	4313      	orrs	r3, r2
 800252e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d012      	beq.n	8002562 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	4b21      	ldr	r3, [pc, #132]	@ (80025c8 <HAL_RCC_ClockConfig+0x35c>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800254a:	429a      	cmp	r2, r3
 800254c:	d209      	bcs.n	8002562 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800254e:	4b1e      	ldr	r3, [pc, #120]	@ (80025c8 <HAL_RCC_ClockConfig+0x35c>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	491a      	ldr	r1, [pc, #104]	@ (80025c8 <HAL_RCC_ClockConfig+0x35c>)
 800255e:	4313      	orrs	r3, r2
 8002560:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0310 	and.w	r3, r3, #16
 800256a:	2b00      	cmp	r3, #0
 800256c:	d012      	beq.n	8002594 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695a      	ldr	r2, [r3, #20]
 8002572:	4b15      	ldr	r3, [pc, #84]	@ (80025c8 <HAL_RCC_ClockConfig+0x35c>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800257c:	429a      	cmp	r2, r3
 800257e:	d209      	bcs.n	8002594 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002580:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <HAL_RCC_ClockConfig+0x35c>)
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	021b      	lsls	r3, r3, #8
 800258e:	490e      	ldr	r1, [pc, #56]	@ (80025c8 <HAL_RCC_ClockConfig+0x35c>)
 8002590:	4313      	orrs	r3, r2
 8002592:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002594:	f000 f822 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	4b0b      	ldr	r3, [pc, #44]	@ (80025c8 <HAL_RCC_ClockConfig+0x35c>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	490b      	ldr	r1, [pc, #44]	@ (80025d0 <HAL_RCC_ClockConfig+0x364>)
 80025a4:	5ccb      	ldrb	r3, [r1, r3]
 80025a6:	fa22 f303 	lsr.w	r3, r2, r3
 80025aa:	4a0a      	ldr	r2, [pc, #40]	@ (80025d4 <HAL_RCC_ClockConfig+0x368>)
 80025ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80025ae:	4b0a      	ldr	r3, [pc, #40]	@ (80025d8 <HAL_RCC_ClockConfig+0x36c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fe fdee 	bl	8001194 <HAL_InitTick>
 80025b8:	4603      	mov	r3, r0
 80025ba:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80025bc:	7afb      	ldrb	r3, [r7, #11]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	44020c00 	.word	0x44020c00
 80025cc:	40022000 	.word	0x40022000
 80025d0:	08007858 	.word	0x08007858
 80025d4:	20000000 	.word	0x20000000
 80025d8:	20000020 	.word	0x20000020

080025dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	b089      	sub	sp, #36	@ 0x24
 80025e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80025e2:	4b8c      	ldr	r3, [pc, #560]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x238>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	f003 0318 	and.w	r3, r3, #24
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d102      	bne.n	80025f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80025ee:	4b8a      	ldr	r3, [pc, #552]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x23c>)
 80025f0:	61fb      	str	r3, [r7, #28]
 80025f2:	e107      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025f4:	4b87      	ldr	r3, [pc, #540]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x238>)
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	f003 0318 	and.w	r3, r3, #24
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d112      	bne.n	8002626 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002600:	4b84      	ldr	r3, [pc, #528]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x238>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d009      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800260c:	4b81      	ldr	r3, [pc, #516]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x238>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	08db      	lsrs	r3, r3, #3
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	4a81      	ldr	r2, [pc, #516]	@ (800281c <HAL_RCC_GetSysClockFreq+0x240>)
 8002618:	fa22 f303 	lsr.w	r3, r2, r3
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	e0f1      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002620:	4b7e      	ldr	r3, [pc, #504]	@ (800281c <HAL_RCC_GetSysClockFreq+0x240>)
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	e0ee      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002626:	4b7b      	ldr	r3, [pc, #492]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x238>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f003 0318 	and.w	r3, r3, #24
 800262e:	2b10      	cmp	r3, #16
 8002630:	d102      	bne.n	8002638 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002632:	4b7b      	ldr	r3, [pc, #492]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x244>)
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	e0e5      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002638:	4b76      	ldr	r3, [pc, #472]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x238>)
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	f003 0318 	and.w	r3, r3, #24
 8002640:	2b18      	cmp	r3, #24
 8002642:	f040 80dd 	bne.w	8002800 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002646:	4b73      	ldr	r3, [pc, #460]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x238>)
 8002648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002650:	4b70      	ldr	r3, [pc, #448]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x238>)
 8002652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002654:	0a1b      	lsrs	r3, r3, #8
 8002656:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800265a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800265c:	4b6d      	ldr	r3, [pc, #436]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x238>)
 800265e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002668:	4b6a      	ldr	r3, [pc, #424]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x238>)
 800266a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800266c:	08db      	lsrs	r3, r3, #3
 800266e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	fb02 f303 	mul.w	r3, r2, r3
 8002678:	ee07 3a90 	vmov	s15, r3
 800267c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002680:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 80b7 	beq.w	80027fa <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d003      	beq.n	800269a <HAL_RCC_GetSysClockFreq+0xbe>
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b03      	cmp	r3, #3
 8002696:	d056      	beq.n	8002746 <HAL_RCC_GetSysClockFreq+0x16a>
 8002698:	e077      	b.n	800278a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800269a:	4b5e      	ldr	r3, [pc, #376]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x238>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0320 	and.w	r3, r3, #32
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d02d      	beq.n	8002702 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80026a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x238>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	08db      	lsrs	r3, r3, #3
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	4a5a      	ldr	r2, [pc, #360]	@ (800281c <HAL_RCC_GetSysClockFreq+0x240>)
 80026b2:	fa22 f303 	lsr.w	r3, r2, r3
 80026b6:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	ee07 3a90 	vmov	s15, r3
 80026be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	ee07 3a90 	vmov	s15, r3
 80026c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026d0:	4b50      	ldr	r3, [pc, #320]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x238>)
 80026d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026d8:	ee07 3a90 	vmov	s15, r3
 80026dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80026e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80026e4:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002824 <HAL_RCC_GetSysClockFreq+0x248>
 80026e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80026f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026fc:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002700:	e065      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	ee07 3a90 	vmov	s15, r3
 8002708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800270c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002828 <HAL_RCC_GetSysClockFreq+0x24c>
 8002710:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002714:	4b3f      	ldr	r3, [pc, #252]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x238>)
 8002716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800271c:	ee07 3a90 	vmov	s15, r3
 8002720:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002724:	ed97 6a02 	vldr	s12, [r7, #8]
 8002728:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002824 <HAL_RCC_GetSysClockFreq+0x248>
 800272c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002730:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002734:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002738:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800273c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002740:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002744:	e043      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	ee07 3a90 	vmov	s15, r3
 800274c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002750:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800282c <HAL_RCC_GetSysClockFreq+0x250>
 8002754:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002758:	4b2e      	ldr	r3, [pc, #184]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x238>)
 800275a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800275c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002760:	ee07 3a90 	vmov	s15, r3
 8002764:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002768:	ed97 6a02 	vldr	s12, [r7, #8]
 800276c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002824 <HAL_RCC_GetSysClockFreq+0x248>
 8002770:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002774:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002778:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800277c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002784:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002788:	e021      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	ee07 3a90 	vmov	s15, r3
 8002790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002794:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002830 <HAL_RCC_GetSysClockFreq+0x254>
 8002798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800279c:	4b1d      	ldr	r3, [pc, #116]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x238>)
 800279e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a4:	ee07 3a90 	vmov	s15, r3
 80027a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80027ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80027b0:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002824 <HAL_RCC_GetSysClockFreq+0x248>
 80027b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80027bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80027cc:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80027ce:	4b11      	ldr	r3, [pc, #68]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x238>)
 80027d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d2:	0a5b      	lsrs	r3, r3, #9
 80027d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027d8:	3301      	adds	r3, #1
 80027da:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027e6:	edd7 6a06 	vldr	s13, [r7, #24]
 80027ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027f2:	ee17 3a90 	vmov	r3, s15
 80027f6:	61fb      	str	r3, [r7, #28]
 80027f8:	e004      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
 80027fe:	e001      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002800:	4b06      	ldr	r3, [pc, #24]	@ (800281c <HAL_RCC_GetSysClockFreq+0x240>)
 8002802:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002804:	69fb      	ldr	r3, [r7, #28]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3724      	adds	r7, #36	@ 0x24
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	44020c00 	.word	0x44020c00
 8002818:	003d0900 	.word	0x003d0900
 800281c:	03d09000 	.word	0x03d09000
 8002820:	007a1200 	.word	0x007a1200
 8002824:	46000000 	.word	0x46000000
 8002828:	4c742400 	.word	0x4c742400
 800282c:	4af42400 	.word	0x4af42400
 8002830:	4a742400 	.word	0x4a742400

08002834 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002838:	f7ff fed0 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b08      	ldr	r3, [pc, #32]	@ (8002860 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002840:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002842:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002846:	4907      	ldr	r1, [pc, #28]	@ (8002864 <HAL_RCC_GetHCLKFreq+0x30>)
 8002848:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800284a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800284e:	fa22 f303 	lsr.w	r3, r2, r3
 8002852:	4a05      	ldr	r2, [pc, #20]	@ (8002868 <HAL_RCC_GetHCLKFreq+0x34>)
 8002854:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002856:	4b04      	ldr	r3, [pc, #16]	@ (8002868 <HAL_RCC_GetHCLKFreq+0x34>)
 8002858:	681b      	ldr	r3, [r3, #0]
}
 800285a:	4618      	mov	r0, r3
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	44020c00 	.word	0x44020c00
 8002864:	08007858 	.word	0x08007858
 8002868:	20000000 	.word	0x20000000

0800286c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002870:	f7ff ffe0 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 8002874:	4602      	mov	r2, r0
 8002876:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	4904      	ldr	r1, [pc, #16]	@ (8002894 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002882:	5ccb      	ldrb	r3, [r1, r3]
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	bd80      	pop	{r7, pc}
 8002890:	44020c00 	.word	0x44020c00
 8002894:	08007868 	.word	0x08007868

08002898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800289c:	f7ff ffca 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b06      	ldr	r3, [pc, #24]	@ (80028bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	0a1b      	lsrs	r3, r3, #8
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	4904      	ldr	r1, [pc, #16]	@ (80028c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	44020c00 	.word	0x44020c00
 80028c0:	08007868 	.word	0x08007868

080028c4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80028c8:	f7ff ffb4 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <HAL_RCC_GetPCLK3Freq+0x24>)
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	0b1b      	lsrs	r3, r3, #12
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	4904      	ldr	r1, [pc, #16]	@ (80028ec <HAL_RCC_GetPCLK3Freq+0x28>)
 80028da:	5ccb      	ldrb	r3, [r1, r3]
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	44020c00 	.word	0x44020c00
 80028ec:	08007868 	.word	0x08007868

080028f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b08b      	sub	sp, #44	@ 0x2c
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80028f8:	4bae      	ldr	r3, [pc, #696]	@ (8002bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80028fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002900:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002902:	4bac      	ldr	r3, [pc, #688]	@ (8002bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800290c:	4ba9      	ldr	r3, [pc, #676]	@ (8002bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800290e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002910:	0a1b      	lsrs	r3, r3, #8
 8002912:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002916:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002918:	4ba6      	ldr	r3, [pc, #664]	@ (8002bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800291a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002924:	4ba3      	ldr	r3, [pc, #652]	@ (8002bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002928:	08db      	lsrs	r3, r3, #3
 800292a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	fb02 f303 	mul.w	r3, r2, r3
 8002934:	ee07 3a90 	vmov	s15, r3
 8002938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800293c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8126 	beq.w	8002b94 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	2b03      	cmp	r3, #3
 800294c:	d053      	beq.n	80029f6 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	2b03      	cmp	r3, #3
 8002952:	d86f      	bhi.n	8002a34 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d003      	beq.n	8002962 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	2b02      	cmp	r3, #2
 800295e:	d02b      	beq.n	80029b8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8002960:	e068      	b.n	8002a34 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002962:	4b94      	ldr	r3, [pc, #592]	@ (8002bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	08db      	lsrs	r3, r3, #3
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	4a92      	ldr	r2, [pc, #584]	@ (8002bb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800296e:	fa22 f303 	lsr.w	r3, r2, r3
 8002972:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	ee07 3a90 	vmov	s15, r3
 800297a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	ee07 3a90 	vmov	s15, r3
 8002984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002988:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002996:	ed97 6a04 	vldr	s12, [r7, #16]
 800299a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8002bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800299e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80029b6:	e068      	b.n	8002a8a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	ee07 3a90 	vmov	s15, r3
 80029be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029c2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8002bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80029c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	ee07 3a90 	vmov	s15, r3
 80029d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029d4:	ed97 6a04 	vldr	s12, [r7, #16]
 80029d8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80029dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80029f4:	e049      	b.n	8002a8a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	ee07 3a90 	vmov	s15, r3
 80029fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a00:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002bc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8002a04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	ee07 3a90 	vmov	s15, r3
 8002a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a12:	ed97 6a04 	vldr	s12, [r7, #16]
 8002a16:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8002bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8002a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a2e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002a32:	e02a      	b.n	8002a8a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002a34:	4b5f      	ldr	r3, [pc, #380]	@ (8002bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	08db      	lsrs	r3, r3, #3
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	4a5e      	ldr	r2, [pc, #376]	@ (8002bb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8002a40:	fa22 f303 	lsr.w	r3, r2, r3
 8002a44:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	ee07 3a90 	vmov	s15, r3
 8002a4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	ee07 3a90 	vmov	s15, r3
 8002a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	ee07 3a90 	vmov	s15, r3
 8002a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a68:	ed97 6a04 	vldr	s12, [r7, #16]
 8002a6c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8002bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8002a70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a84:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002a88:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a96:	d121      	bne.n	8002adc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8002a98:	4b46      	ldr	r3, [pc, #280]	@ (8002bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d017      	beq.n	8002ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8002aa4:	4b43      	ldr	r3, [pc, #268]	@ (8002bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa8:	0a5b      	lsrs	r3, r3, #9
 8002aaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002aae:	ee07 3a90 	vmov	s15, r3
 8002ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8002ab6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002aba:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8002abe:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aca:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	e006      	b.n	8002ae2 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	e002      	b.n	8002ae2 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002ae2:	4b34      	ldr	r3, [pc, #208]	@ (8002bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002aee:	d121      	bne.n	8002b34 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8002af0:	4b30      	ldr	r3, [pc, #192]	@ (8002bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d017      	beq.n	8002b2c <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8002afc:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b00:	0c1b      	lsrs	r3, r3, #16
 8002b02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b06:	ee07 3a90 	vmov	s15, r3
 8002b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8002b0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b12:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8002b16:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002b1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b22:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	e006      	b.n	8002b3a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	e002      	b.n	8002b3a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b46:	d121      	bne.n	8002b8c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8002b48:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d017      	beq.n	8002b84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8002b54:	4b17      	ldr	r3, [pc, #92]	@ (8002bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b58:	0e1b      	lsrs	r3, r3, #24
 8002b5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b5e:	ee07 3a90 	vmov	s15, r3
 8002b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8002b66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b6a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8002b6e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b7a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8002b82:	e010      	b.n	8002ba6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
}
 8002b8a:	e00c      	b.n	8002ba6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	609a      	str	r2, [r3, #8]
}
 8002b92:	e008      	b.n	8002ba6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
}
 8002ba6:	bf00      	nop
 8002ba8:	372c      	adds	r7, #44	@ 0x2c
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	44020c00 	.word	0x44020c00
 8002bb8:	03d09000 	.word	0x03d09000
 8002bbc:	46000000 	.word	0x46000000
 8002bc0:	4a742400 	.word	0x4a742400
 8002bc4:	4af42400 	.word	0x4af42400

08002bc8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b08b      	sub	sp, #44	@ 0x2c
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8002bd0:	4bae      	ldr	r3, [pc, #696]	@ (8002e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd8:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8002bda:	4bac      	ldr	r3, [pc, #688]	@ (8002e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8002be4:	4ba9      	ldr	r3, [pc, #676]	@ (8002e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be8:	0a1b      	lsrs	r3, r3, #8
 8002bea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bee:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8002bf0:	4ba6      	ldr	r3, [pc, #664]	@ (8002e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8002bfc:	4ba3      	ldr	r3, [pc, #652]	@ (8002e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c00:	08db      	lsrs	r3, r3, #3
 8002c02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	fb02 f303 	mul.w	r3, r2, r3
 8002c0c:	ee07 3a90 	vmov	s15, r3
 8002c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c14:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 8126 	beq.w	8002e6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d053      	beq.n	8002cce <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d86f      	bhi.n	8002d0c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d003      	beq.n	8002c3a <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d02b      	beq.n	8002c90 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8002c38:	e068      	b.n	8002d0c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002c3a:	4b94      	ldr	r3, [pc, #592]	@ (8002e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	08db      	lsrs	r3, r3, #3
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	4a92      	ldr	r2, [pc, #584]	@ (8002e90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8002c46:	fa22 f303 	lsr.w	r3, r2, r3
 8002c4a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	ee07 3a90 	vmov	s15, r3
 8002c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	ee07 3a90 	vmov	s15, r3
 8002c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	ee07 3a90 	vmov	s15, r3
 8002c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c6e:	ed97 6a04 	vldr	s12, [r7, #16]
 8002c72:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8002e94 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c8a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002c8e:	e068      	b.n	8002d62 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	ee07 3a90 	vmov	s15, r3
 8002c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c9a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8002e98 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8002c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	ee07 3a90 	vmov	s15, r3
 8002ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cac:	ed97 6a04 	vldr	s12, [r7, #16]
 8002cb0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002e94 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002cb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002ccc:	e049      	b.n	8002d62 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	ee07 3a90 	vmov	s15, r3
 8002cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cd8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002e9c <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8002cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	ee07 3a90 	vmov	s15, r3
 8002ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cea:	ed97 6a04 	vldr	s12, [r7, #16]
 8002cee:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8002e94 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d06:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002d0a:	e02a      	b.n	8002d62 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002d0c:	4b5f      	ldr	r3, [pc, #380]	@ (8002e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	08db      	lsrs	r3, r3, #3
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	4a5e      	ldr	r2, [pc, #376]	@ (8002e90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8002d18:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	ee07 3a90 	vmov	s15, r3
 8002d24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	ee07 3a90 	vmov	s15, r3
 8002d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	ee07 3a90 	vmov	s15, r3
 8002d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d40:	ed97 6a04 	vldr	s12, [r7, #16]
 8002d44:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8002e94 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002d48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002d60:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002d62:	4b4a      	ldr	r3, [pc, #296]	@ (8002e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d6e:	d121      	bne.n	8002db4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8002d70:	4b46      	ldr	r3, [pc, #280]	@ (8002e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d017      	beq.n	8002dac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8002d7c:	4b43      	ldr	r3, [pc, #268]	@ (8002e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d80:	0a5b      	lsrs	r3, r3, #9
 8002d82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d86:	ee07 3a90 	vmov	s15, r3
 8002d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8002d8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d92:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8002d96:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002d9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002da2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	e006      	b.n	8002dba <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	e002      	b.n	8002dba <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002dba:	4b34      	ldr	r3, [pc, #208]	@ (8002e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dc6:	d121      	bne.n	8002e0c <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8002dc8:	4b30      	ldr	r3, [pc, #192]	@ (8002e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d017      	beq.n	8002e04 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8002dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd8:	0c1b      	lsrs	r3, r3, #16
 8002dda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dde:	ee07 3a90 	vmov	s15, r3
 8002de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8002de6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002dea:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8002dee:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dfa:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	e006      	b.n	8002e12 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	e002      	b.n	8002e12 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002e12:	4b1e      	ldr	r3, [pc, #120]	@ (8002e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e1e:	d121      	bne.n	8002e64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8002e20:	4b1a      	ldr	r3, [pc, #104]	@ (8002e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d017      	beq.n	8002e5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8002e2c:	4b17      	ldr	r3, [pc, #92]	@ (8002e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e30:	0e1b      	lsrs	r3, r3, #24
 8002e32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e36:	ee07 3a90 	vmov	s15, r3
 8002e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8002e3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e42:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8002e46:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e52:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002e5a:	e010      	b.n	8002e7e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	609a      	str	r2, [r3, #8]
}
 8002e62:	e00c      	b.n	8002e7e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
}
 8002e6a:	e008      	b.n	8002e7e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	609a      	str	r2, [r3, #8]
}
 8002e7e:	bf00      	nop
 8002e80:	372c      	adds	r7, #44	@ 0x2c
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	44020c00 	.word	0x44020c00
 8002e90:	03d09000 	.word	0x03d09000
 8002e94:	46000000 	.word	0x46000000
 8002e98:	4a742400 	.word	0x4a742400
 8002e9c:	4af42400 	.word	0x4af42400

08002ea0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b08b      	sub	sp, #44	@ 0x2c
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8002ea8:	4bae      	ldr	r3, [pc, #696]	@ (8003164 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb0:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8002eb2:	4bac      	ldr	r3, [pc, #688]	@ (8003164 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8002ebc:	4ba9      	ldr	r3, [pc, #676]	@ (8003164 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec0:	0a1b      	lsrs	r3, r3, #8
 8002ec2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ec6:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8002ec8:	4ba6      	ldr	r3, [pc, #664]	@ (8003164 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8002ed4:	4ba3      	ldr	r3, [pc, #652]	@ (8003164 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002ed6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed8:	08db      	lsrs	r3, r3, #3
 8002eda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	fb02 f303 	mul.w	r3, r2, r3
 8002ee4:	ee07 3a90 	vmov	s15, r3
 8002ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eec:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 8126 	beq.w	8003144 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d053      	beq.n	8002fa6 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d86f      	bhi.n	8002fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d003      	beq.n	8002f12 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d02b      	beq.n	8002f68 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8002f10:	e068      	b.n	8002fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002f12:	4b94      	ldr	r3, [pc, #592]	@ (8003164 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	08db      	lsrs	r3, r3, #3
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	4a92      	ldr	r2, [pc, #584]	@ (8003168 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8002f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f22:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	ee07 3a90 	vmov	s15, r3
 8002f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	ee07 3a90 	vmov	s15, r3
 8002f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	ee07 3a90 	vmov	s15, r3
 8002f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f46:	ed97 6a04 	vldr	s12, [r7, #16]
 8002f4a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800316c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8002f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f62:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002f66:	e068      	b.n	800303a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	ee07 3a90 	vmov	s15, r3
 8002f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f72:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8003170 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8002f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	ee07 3a90 	vmov	s15, r3
 8002f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f84:	ed97 6a04 	vldr	s12, [r7, #16]
 8002f88:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800316c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8002f8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002fa4:	e049      	b.n	800303a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	ee07 3a90 	vmov	s15, r3
 8002fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fb0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003174 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8002fb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	ee07 3a90 	vmov	s15, r3
 8002fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fc2:	ed97 6a04 	vldr	s12, [r7, #16]
 8002fc6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800316c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8002fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fde:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002fe2:	e02a      	b.n	800303a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002fe4:	4b5f      	ldr	r3, [pc, #380]	@ (8003164 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	08db      	lsrs	r3, r3, #3
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	4a5e      	ldr	r2, [pc, #376]	@ (8003168 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8002ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff4:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	ee07 3a90 	vmov	s15, r3
 8002ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	ee07 3a90 	vmov	s15, r3
 8003006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800300a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	ee07 3a90 	vmov	s15, r3
 8003014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003018:	ed97 6a04 	vldr	s12, [r7, #16]
 800301c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800316c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8003020:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003024:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003028:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800302c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003034:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003038:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800303a:	4b4a      	ldr	r3, [pc, #296]	@ (8003164 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003042:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003046:	d121      	bne.n	800308c <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8003048:	4b46      	ldr	r3, [pc, #280]	@ (8003164 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d017      	beq.n	8003084 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003054:	4b43      	ldr	r3, [pc, #268]	@ (8003164 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003058:	0a5b      	lsrs	r3, r3, #9
 800305a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800305e:	ee07 3a90 	vmov	s15, r3
 8003062:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8003066:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800306a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800306e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800307a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	e006      	b.n	8003092 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	e002      	b.n	8003092 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003092:	4b34      	ldr	r3, [pc, #208]	@ (8003164 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800309a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800309e:	d121      	bne.n	80030e4 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80030a0:	4b30      	ldr	r3, [pc, #192]	@ (8003164 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80030a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d017      	beq.n	80030dc <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80030ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003164 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80030ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b0:	0c1b      	lsrs	r3, r3, #16
 80030b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030b6:	ee07 3a90 	vmov	s15, r3
 80030ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80030be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80030c2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80030c6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80030ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030d2:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	e006      	b.n	80030ea <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	e002      	b.n	80030ea <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80030ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003164 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030f6:	d121      	bne.n	800313c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80030f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003164 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80030fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d017      	beq.n	8003134 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003104:	4b17      	ldr	r3, [pc, #92]	@ (8003164 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003108:	0e1b      	lsrs	r3, r3, #24
 800310a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8003116:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800311a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800311e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800312a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8003132:	e010      	b.n	8003156 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	609a      	str	r2, [r3, #8]
}
 800313a:	e00c      	b.n	8003156 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	609a      	str	r2, [r3, #8]
}
 8003142:	e008      	b.n	8003156 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	609a      	str	r2, [r3, #8]
}
 8003156:	bf00      	nop
 8003158:	372c      	adds	r7, #44	@ 0x2c
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	44020c00 	.word	0x44020c00
 8003168:	03d09000 	.word	0x03d09000
 800316c:	46000000 	.word	0x46000000
 8003170:	4a742400 	.word	0x4a742400
 8003174:	4af42400 	.word	0x4af42400

08003178 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003178:	b590      	push	{r4, r7, lr}
 800317a:	b08f      	sub	sp, #60	@ 0x3c
 800317c:	af00      	add	r7, sp, #0
 800317e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003182:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003186:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800318a:	4321      	orrs	r1, r4
 800318c:	d150      	bne.n	8003230 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800318e:	4b26      	ldr	r3, [pc, #152]	@ (8003228 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003194:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003198:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800319a:	4b23      	ldr	r3, [pc, #140]	@ (8003228 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800319c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d108      	bne.n	80031ba <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80031a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031ae:	d104      	bne.n	80031ba <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80031b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80031b6:	f002 bb2a 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80031ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003228 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80031bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031c8:	d108      	bne.n	80031dc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80031ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031d0:	d104      	bne.n	80031dc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80031d2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80031d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80031d8:	f002 bb19 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80031dc:	4b12      	ldr	r3, [pc, #72]	@ (8003228 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031e8:	d119      	bne.n	800321e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80031ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031f0:	d115      	bne.n	800321e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80031f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003228 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80031fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031fe:	d30a      	bcc.n	8003216 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8003200:	4b09      	ldr	r3, [pc, #36]	@ (8003228 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	0a1b      	lsrs	r3, r3, #8
 8003206:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800320a:	4a08      	ldr	r2, [pc, #32]	@ (800322c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8003212:	f002 bafc 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800321a:	f002 baf8 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	637b      	str	r3, [r7, #52]	@ 0x34
 8003222:	f002 baf4 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003226:	bf00      	nop
 8003228:	44020c00 	.word	0x44020c00
 800322c:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8003230:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003234:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8003238:	ea50 0104 	orrs.w	r1, r0, r4
 800323c:	f001 8275 	beq.w	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8003240:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003244:	2801      	cmp	r0, #1
 8003246:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 800324a:	f082 82dd 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800324e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003252:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8003256:	ea50 0104 	orrs.w	r1, r0, r4
 800325a:	f001 816c 	beq.w	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800325e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003262:	2801      	cmp	r0, #1
 8003264:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8003268:	f082 82ce 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800326c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003270:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8003274:	ea50 0104 	orrs.w	r1, r0, r4
 8003278:	f001 8602 	beq.w	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800327c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003280:	2801      	cmp	r0, #1
 8003282:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8003286:	f082 82bf 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800328a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800328e:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8003292:	ea50 0104 	orrs.w	r1, r0, r4
 8003296:	f001 854c 	beq.w	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800329a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800329e:	2801      	cmp	r0, #1
 80032a0:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 80032a4:	f082 82b0 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80032a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032ac:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 80032b0:	ea50 0104 	orrs.w	r1, r0, r4
 80032b4:	f001 849e 	beq.w	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80032b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032bc:	2801      	cmp	r0, #1
 80032be:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 80032c2:	f082 82a1 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80032c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032ca:	f1a1 0420 	sub.w	r4, r1, #32
 80032ce:	ea50 0104 	orrs.w	r1, r0, r4
 80032d2:	f001 83e8 	beq.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80032d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032da:	2801      	cmp	r0, #1
 80032dc:	f171 0120 	sbcs.w	r1, r1, #32
 80032e0:	f082 8292 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80032e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032e8:	f1a1 0410 	sub.w	r4, r1, #16
 80032ec:	ea50 0104 	orrs.w	r1, r0, r4
 80032f0:	f002 8256 	beq.w	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80032f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032f8:	2801      	cmp	r0, #1
 80032fa:	f171 0110 	sbcs.w	r1, r1, #16
 80032fe:	f082 8283 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003302:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003306:	f1a1 0408 	sub.w	r4, r1, #8
 800330a:	ea50 0104 	orrs.w	r1, r0, r4
 800330e:	f002 81cc 	beq.w	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8003312:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003316:	2801      	cmp	r0, #1
 8003318:	f171 0108 	sbcs.w	r1, r1, #8
 800331c:	f082 8274 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003320:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003324:	1f0c      	subs	r4, r1, #4
 8003326:	ea50 0104 	orrs.w	r1, r0, r4
 800332a:	f001 8648 	beq.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800332e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003332:	2801      	cmp	r0, #1
 8003334:	f171 0104 	sbcs.w	r1, r1, #4
 8003338:	f082 8266 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800333c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003340:	1e8c      	subs	r4, r1, #2
 8003342:	ea50 0104 	orrs.w	r1, r0, r4
 8003346:	f002 8143 	beq.w	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800334a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800334e:	2801      	cmp	r0, #1
 8003350:	f171 0102 	sbcs.w	r1, r1, #2
 8003354:	f082 8258 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003358:	e9d7 0100 	ldrd	r0, r1, [r7]
 800335c:	1e4c      	subs	r4, r1, #1
 800335e:	ea50 0104 	orrs.w	r1, r0, r4
 8003362:	f002 80ce 	beq.w	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8003366:	e9d7 0100 	ldrd	r0, r1, [r7]
 800336a:	2801      	cmp	r0, #1
 800336c:	f171 0101 	sbcs.w	r1, r1, #1
 8003370:	f082 824a 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003374:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003378:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800337c:	4321      	orrs	r1, r4
 800337e:	f002 8059 	beq.w	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8003382:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003386:	4cd9      	ldr	r4, [pc, #868]	@ (80036ec <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8003388:	42a0      	cmp	r0, r4
 800338a:	f171 0100 	sbcs.w	r1, r1, #0
 800338e:	f082 823b 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003392:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003396:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 800339a:	4321      	orrs	r1, r4
 800339c:	f001 87d9 	beq.w	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 80033a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033a4:	4cd2      	ldr	r4, [pc, #840]	@ (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80033a6:	42a0      	cmp	r0, r4
 80033a8:	f171 0100 	sbcs.w	r1, r1, #0
 80033ac:	f082 822c 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80033b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033b4:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80033b8:	4321      	orrs	r1, r4
 80033ba:	f001 8751 	beq.w	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80033be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033c2:	4ccc      	ldr	r4, [pc, #816]	@ (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80033c4:	42a0      	cmp	r0, r4
 80033c6:	f171 0100 	sbcs.w	r1, r1, #0
 80033ca:	f082 821d 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80033ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033d2:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80033d6:	4321      	orrs	r1, r4
 80033d8:	f001 869a 	beq.w	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 80033dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033e0:	4cc5      	ldr	r4, [pc, #788]	@ (80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80033e2:	42a0      	cmp	r0, r4
 80033e4:	f171 0100 	sbcs.w	r1, r1, #0
 80033e8:	f082 820e 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80033ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033f0:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 80033f4:	4321      	orrs	r1, r4
 80033f6:	f001 8612 	beq.w	800501e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 80033fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033fe:	4cbf      	ldr	r4, [pc, #764]	@ (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8003400:	42a0      	cmp	r0, r4
 8003402:	f171 0100 	sbcs.w	r1, r1, #0
 8003406:	f082 81ff 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800340a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800340e:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8003412:	4321      	orrs	r1, r4
 8003414:	f002 817e 	beq.w	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8003418:	e9d7 0100 	ldrd	r0, r1, [r7]
 800341c:	4cb8      	ldr	r4, [pc, #736]	@ (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800341e:	42a0      	cmp	r0, r4
 8003420:	f171 0100 	sbcs.w	r1, r1, #0
 8003424:	f082 81f0 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003428:	e9d7 0100 	ldrd	r0, r1, [r7]
 800342c:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8003430:	4321      	orrs	r1, r4
 8003432:	f000 829e 	beq.w	8003972 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8003436:	e9d7 0100 	ldrd	r0, r1, [r7]
 800343a:	4cb2      	ldr	r4, [pc, #712]	@ (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800343c:	42a0      	cmp	r0, r4
 800343e:	f171 0100 	sbcs.w	r1, r1, #0
 8003442:	f082 81e1 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003446:	e9d7 0100 	ldrd	r0, r1, [r7]
 800344a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800344e:	4321      	orrs	r1, r4
 8003450:	f000 826d 	beq.w	800392e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8003454:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003458:	4cab      	ldr	r4, [pc, #684]	@ (8003708 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800345a:	42a0      	cmp	r0, r4
 800345c:	f171 0100 	sbcs.w	r1, r1, #0
 8003460:	f082 81d2 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003464:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003468:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 800346c:	4321      	orrs	r1, r4
 800346e:	f001 800d 	beq.w	800448c <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8003472:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003476:	4ca5      	ldr	r4, [pc, #660]	@ (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8003478:	42a0      	cmp	r0, r4
 800347a:	f171 0100 	sbcs.w	r1, r1, #0
 800347e:	f082 81c3 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003482:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003486:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 800348a:	4321      	orrs	r1, r4
 800348c:	f000 81d0 	beq.w	8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8003490:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003494:	4c9e      	ldr	r4, [pc, #632]	@ (8003710 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8003496:	42a0      	cmp	r0, r4
 8003498:	f171 0100 	sbcs.w	r1, r1, #0
 800349c:	f082 81b4 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80034a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034a4:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 80034a8:	4321      	orrs	r1, r4
 80034aa:	f000 8142 	beq.w	8003732 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 80034ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034b2:	4c98      	ldr	r4, [pc, #608]	@ (8003714 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80034b4:	42a0      	cmp	r0, r4
 80034b6:	f171 0100 	sbcs.w	r1, r1, #0
 80034ba:	f082 81a5 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80034be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034c2:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80034c6:	4321      	orrs	r1, r4
 80034c8:	f001 824e 	beq.w	8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 80034cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034d0:	4c91      	ldr	r4, [pc, #580]	@ (8003718 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80034d2:	42a0      	cmp	r0, r4
 80034d4:	f171 0100 	sbcs.w	r1, r1, #0
 80034d8:	f082 8196 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80034dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034e0:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80034e4:	4321      	orrs	r1, r4
 80034e6:	f001 8197 	beq.w	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 80034ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034ee:	4c8b      	ldr	r4, [pc, #556]	@ (800371c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80034f0:	42a0      	cmp	r0, r4
 80034f2:	f171 0100 	sbcs.w	r1, r1, #0
 80034f6:	f082 8187 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80034fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034fe:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8003502:	4321      	orrs	r1, r4
 8003504:	f001 8154 	beq.w	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8003508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800350c:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8003510:	f171 0100 	sbcs.w	r1, r1, #0
 8003514:	f082 8178 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003518:	e9d7 0100 	ldrd	r0, r1, [r7]
 800351c:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8003520:	4321      	orrs	r1, r4
 8003522:	f001 80b7 	beq.w	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8003526:	e9d7 0100 	ldrd	r0, r1, [r7]
 800352a:	f248 0401 	movw	r4, #32769	@ 0x8001
 800352e:	42a0      	cmp	r0, r4
 8003530:	f171 0100 	sbcs.w	r1, r1, #0
 8003534:	f082 8168 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003538:	e9d7 0100 	ldrd	r0, r1, [r7]
 800353c:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8003540:	4321      	orrs	r1, r4
 8003542:	f001 8064 	beq.w	800460e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8003546:	e9d7 0100 	ldrd	r0, r1, [r7]
 800354a:	f244 0401 	movw	r4, #16385	@ 0x4001
 800354e:	42a0      	cmp	r0, r4
 8003550:	f171 0100 	sbcs.w	r1, r1, #0
 8003554:	f082 8158 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003558:	e9d7 0100 	ldrd	r0, r1, [r7]
 800355c:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8003560:	4321      	orrs	r1, r4
 8003562:	f001 8011 	beq.w	8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8003566:	e9d7 0100 	ldrd	r0, r1, [r7]
 800356a:	f242 0401 	movw	r4, #8193	@ 0x2001
 800356e:	42a0      	cmp	r0, r4
 8003570:	f171 0100 	sbcs.w	r1, r1, #0
 8003574:	f082 8148 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003578:	e9d7 0100 	ldrd	r0, r1, [r7]
 800357c:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8003580:	4321      	orrs	r1, r4
 8003582:	f000 871e 	beq.w	80043c2 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8003586:	e9d7 0100 	ldrd	r0, r1, [r7]
 800358a:	f241 0401 	movw	r4, #4097	@ 0x1001
 800358e:	42a0      	cmp	r0, r4
 8003590:	f171 0100 	sbcs.w	r1, r1, #0
 8003594:	f082 8138 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003598:	e9d7 0100 	ldrd	r0, r1, [r7]
 800359c:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 80035a0:	4321      	orrs	r1, r4
 80035a2:	f000 86a8 	beq.w	80042f6 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 80035a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035aa:	f640 0401 	movw	r4, #2049	@ 0x801
 80035ae:	42a0      	cmp	r0, r4
 80035b0:	f171 0100 	sbcs.w	r1, r1, #0
 80035b4:	f082 8128 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80035b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035bc:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 80035c0:	4321      	orrs	r1, r4
 80035c2:	f000 8632 	beq.w	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 80035c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035ca:	f240 4401 	movw	r4, #1025	@ 0x401
 80035ce:	42a0      	cmp	r0, r4
 80035d0:	f171 0100 	sbcs.w	r1, r1, #0
 80035d4:	f082 8118 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80035d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035dc:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 80035e0:	4321      	orrs	r1, r4
 80035e2:	f000 85b0 	beq.w	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 80035e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035ea:	f240 2401 	movw	r4, #513	@ 0x201
 80035ee:	42a0      	cmp	r0, r4
 80035f0:	f171 0100 	sbcs.w	r1, r1, #0
 80035f4:	f082 8108 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80035f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035fc:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8003600:	4321      	orrs	r1, r4
 8003602:	f000 8535 	beq.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8003606:	e9d7 0100 	ldrd	r0, r1, [r7]
 800360a:	f240 1401 	movw	r4, #257	@ 0x101
 800360e:	42a0      	cmp	r0, r4
 8003610:	f171 0100 	sbcs.w	r1, r1, #0
 8003614:	f082 80f8 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003618:	e9d7 0100 	ldrd	r0, r1, [r7]
 800361c:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8003620:	4321      	orrs	r1, r4
 8003622:	f000 84ba 	beq.w	8003f9a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8003626:	e9d7 0100 	ldrd	r0, r1, [r7]
 800362a:	2881      	cmp	r0, #129	@ 0x81
 800362c:	f171 0100 	sbcs.w	r1, r1, #0
 8003630:	f082 80ea 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003634:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003638:	2821      	cmp	r0, #33	@ 0x21
 800363a:	f171 0100 	sbcs.w	r1, r1, #0
 800363e:	d26f      	bcs.n	8003720 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8003640:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003644:	4301      	orrs	r1, r0
 8003646:	f002 80df 	beq.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800364a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800364e:	1e42      	subs	r2, r0, #1
 8003650:	f141 33ff 	adc.w	r3, r1, #4294967295
 8003654:	2a20      	cmp	r2, #32
 8003656:	f173 0100 	sbcs.w	r1, r3, #0
 800365a:	f082 80d5 	bcs.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800365e:	2a1f      	cmp	r2, #31
 8003660:	f202 80d2 	bhi.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003664:	a101      	add	r1, pc, #4	@ (adr r1, 800366c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8003666:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800366a:	bf00      	nop
 800366c:	080039cd 	.word	0x080039cd
 8003670:	08003a99 	.word	0x08003a99
 8003674:	08005809 	.word	0x08005809
 8003678:	08003b59 	.word	0x08003b59
 800367c:	08005809 	.word	0x08005809
 8003680:	08005809 	.word	0x08005809
 8003684:	08005809 	.word	0x08005809
 8003688:	08003c29 	.word	0x08003c29
 800368c:	08005809 	.word	0x08005809
 8003690:	08005809 	.word	0x08005809
 8003694:	08005809 	.word	0x08005809
 8003698:	08005809 	.word	0x08005809
 800369c:	08005809 	.word	0x08005809
 80036a0:	08005809 	.word	0x08005809
 80036a4:	08005809 	.word	0x08005809
 80036a8:	08003d0b 	.word	0x08003d0b
 80036ac:	08005809 	.word	0x08005809
 80036b0:	08005809 	.word	0x08005809
 80036b4:	08005809 	.word	0x08005809
 80036b8:	08005809 	.word	0x08005809
 80036bc:	08005809 	.word	0x08005809
 80036c0:	08005809 	.word	0x08005809
 80036c4:	08005809 	.word	0x08005809
 80036c8:	08005809 	.word	0x08005809
 80036cc:	08005809 	.word	0x08005809
 80036d0:	08005809 	.word	0x08005809
 80036d4:	08005809 	.word	0x08005809
 80036d8:	08005809 	.word	0x08005809
 80036dc:	08005809 	.word	0x08005809
 80036e0:	08005809 	.word	0x08005809
 80036e4:	08005809 	.word	0x08005809
 80036e8:	08003de1 	.word	0x08003de1
 80036ec:	80000001 	.word	0x80000001
 80036f0:	40000001 	.word	0x40000001
 80036f4:	20000001 	.word	0x20000001
 80036f8:	10000001 	.word	0x10000001
 80036fc:	08000001 	.word	0x08000001
 8003700:	04000001 	.word	0x04000001
 8003704:	00800001 	.word	0x00800001
 8003708:	00400001 	.word	0x00400001
 800370c:	00200001 	.word	0x00200001
 8003710:	00100001 	.word	0x00100001
 8003714:	00080001 	.word	0x00080001
 8003718:	00040001 	.word	0x00040001
 800371c:	00020001 	.word	0x00020001
 8003720:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003724:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8003728:	430b      	orrs	r3, r1
 800372a:	f000 83c4 	beq.w	8003eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800372e:	f002 b86b 	b.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003732:	4ba1      	ldr	r3, [pc, #644]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003738:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800373c:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800373e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003740:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003744:	d036      	beq.n	80037b4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8003746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003748:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800374c:	d86b      	bhi.n	8003826 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800374e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003750:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003754:	d02b      	beq.n	80037ae <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8003756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003758:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800375c:	d863      	bhi.n	8003826 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800375e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003760:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003764:	d01b      	beq.n	800379e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8003766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003768:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800376c:	d85b      	bhi.n	8003826 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800376e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003770:	2b00      	cmp	r3, #0
 8003772:	d004      	beq.n	800377e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8003774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003776:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800377a:	d008      	beq.n	800378e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800377c:	e053      	b.n	8003826 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800377e:	f107 0320 	add.w	r3, r7, #32
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff f8b4 	bl	80028f0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8003788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800378c:	e04e      	b.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800378e:	f107 0314 	add.w	r3, r7, #20
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff fa18 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800379c:	e046      	b.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800379e:	f107 0308 	add.w	r3, r7, #8
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff fb7c 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80037ac:	e03e      	b.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80037ae:	4b83      	ldr	r3, [pc, #524]	@ (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80037b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80037b2:	e03b      	b.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80037b4:	4b80      	ldr	r3, [pc, #512]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80037b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037ba:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80037be:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80037c0:	4b7d      	ldr	r3, [pc, #500]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d10c      	bne.n	80037e6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80037cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80037d2:	4b79      	ldr	r3, [pc, #484]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	08db      	lsrs	r3, r3, #3
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	4a78      	ldr	r2, [pc, #480]	@ (80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80037de:	fa22 f303 	lsr.w	r3, r2, r3
 80037e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80037e4:	e01e      	b.n	8003824 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80037e6:	4b74      	ldr	r3, [pc, #464]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037f2:	d106      	bne.n	8003802 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80037f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037fa:	d102      	bne.n	8003802 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80037fc:	4b71      	ldr	r3, [pc, #452]	@ (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80037fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003800:	e010      	b.n	8003824 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003802:	4b6d      	ldr	r3, [pc, #436]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800380a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800380e:	d106      	bne.n	800381e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8003810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003812:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003816:	d102      	bne.n	800381e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8003818:	4b6b      	ldr	r3, [pc, #428]	@ (80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800381a:	637b      	str	r3, [r7, #52]	@ 0x34
 800381c:	e002      	b.n	8003824 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8003822:	e003      	b.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8003824:	e002      	b.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8003826:	2300      	movs	r3, #0
 8003828:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800382a:	bf00      	nop
          }
        }
        break;
 800382c:	f001 bfef 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003830:	4b61      	ldr	r3, [pc, #388]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003832:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003836:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 800383a:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800383c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003842:	d036      	beq.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8003844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003846:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800384a:	d86b      	bhi.n	8003924 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800384c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003852:	d02b      	beq.n	80038ac <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8003854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003856:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800385a:	d863      	bhi.n	8003924 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800385c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003862:	d01b      	beq.n	800389c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8003864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003866:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800386a:	d85b      	bhi.n	8003924 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800386c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386e:	2b00      	cmp	r3, #0
 8003870:	d004      	beq.n	800387c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8003872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003874:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003878:	d008      	beq.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800387a:	e053      	b.n	8003924 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800387c:	f107 0320 	add.w	r3, r7, #32
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff f835 	bl	80028f0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8003886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003888:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800388a:	e04e      	b.n	800392a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800388c:	f107 0314 	add.w	r3, r7, #20
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff f999 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800389a:	e046      	b.n	800392a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800389c:	f107 0308 	add.w	r3, r7, #8
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff fafd 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80038aa:	e03e      	b.n	800392a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80038ac:	4b43      	ldr	r3, [pc, #268]	@ (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80038ae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80038b0:	e03b      	b.n	800392a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80038b2:	4b41      	ldr	r3, [pc, #260]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80038b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80038b8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80038bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80038be:	4b3e      	ldr	r3, [pc, #248]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d10c      	bne.n	80038e4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80038ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d109      	bne.n	80038e4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80038d0:	4b39      	ldr	r3, [pc, #228]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	08db      	lsrs	r3, r3, #3
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	4a39      	ldr	r2, [pc, #228]	@ (80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80038dc:	fa22 f303 	lsr.w	r3, r2, r3
 80038e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80038e2:	e01e      	b.n	8003922 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80038e4:	4b34      	ldr	r3, [pc, #208]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038f0:	d106      	bne.n	8003900 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80038f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f8:	d102      	bne.n	8003900 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80038fa:	4b32      	ldr	r3, [pc, #200]	@ (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80038fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80038fe:	e010      	b.n	8003922 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003900:	4b2d      	ldr	r3, [pc, #180]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003908:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800390c:	d106      	bne.n	800391c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800390e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003910:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003914:	d102      	bne.n	800391c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8003916:	4b2c      	ldr	r3, [pc, #176]	@ (80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8003918:	637b      	str	r3, [r7, #52]	@ 0x34
 800391a:	e002      	b.n	8003922 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8003920:	e003      	b.n	800392a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8003922:	e002      	b.n	800392a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003928:	bf00      	nop
          }
        }
        break;
 800392a:	f001 bf70 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800392e:	4b22      	ldr	r3, [pc, #136]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003930:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003938:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800393a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393c:	2b00      	cmp	r3, #0
 800393e:	d108      	bne.n	8003952 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003940:	f107 0320 	add.w	r3, r7, #32
 8003944:	4618      	mov	r0, r3
 8003946:	f7fe ffd3 	bl	80028f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800394e:	f001 bf5e 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8003952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003954:	2b40      	cmp	r3, #64	@ 0x40
 8003956:	d108      	bne.n	800396a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003958:	f107 0314 	add.w	r3, r7, #20
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff f933 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003966:	f001 bf52 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800396e:	f001 bf4e 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8003972:	4b11      	ldr	r3, [pc, #68]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003974:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800397c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800397e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003980:	2b00      	cmp	r3, #0
 8003982:	d108      	bne.n	8003996 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003984:	f107 0320 	add.w	r3, r7, #32
 8003988:	4618      	mov	r0, r3
 800398a:	f7fe ffb1 	bl	80028f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800398e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003990:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8003992:	f001 bf3c 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8003996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003998:	2b80      	cmp	r3, #128	@ 0x80
 800399a:	d108      	bne.n	80039ae <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800399c:	f107 0314 	add.w	r3, r7, #20
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff f911 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80039aa:	f001 bf30 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80039b2:	f001 bf2c 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80039b6:	bf00      	nop
 80039b8:	44020c00 	.word	0x44020c00
 80039bc:	00bb8000 	.word	0x00bb8000
 80039c0:	03d09000 	.word	0x03d09000
 80039c4:	003d0900 	.word	0x003d0900
 80039c8:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80039cc:	4b9d      	ldr	r3, [pc, #628]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80039ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80039d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d104      	bne.n	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80039de:	f7fe ff5b 	bl	8002898 <HAL_RCC_GetPCLK2Freq>
 80039e2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80039e4:	f001 bf13 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80039e8:	4b96      	ldr	r3, [pc, #600]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039f4:	d10a      	bne.n	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80039f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d107      	bne.n	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80039fc:	f107 0314 	add.w	r3, r7, #20
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff f8e1 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a0a:	e043      	b.n	8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8003a0c:	4b8d      	ldr	r3, [pc, #564]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a18:	d10a      	bne.n	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d107      	bne.n	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003a20:	f107 0308 	add.w	r3, r7, #8
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff fa3b 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a2e:	e031      	b.n	8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8003a30:	4b84      	ldr	r3, [pc, #528]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d10c      	bne.n	8003a56 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d109      	bne.n	8003a56 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003a42:	4b80      	ldr	r3, [pc, #512]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	08db      	lsrs	r3, r3, #3
 8003a48:	f003 0303 	and.w	r3, r3, #3
 8003a4c:	4a7e      	ldr	r2, [pc, #504]	@ (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8003a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a54:	e01e      	b.n	8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8003a56:	4b7b      	ldr	r3, [pc, #492]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a62:	d105      	bne.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8003a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d102      	bne.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8003a6a:	4b78      	ldr	r3, [pc, #480]	@ (8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003a6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a6e:	e011      	b.n	8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003a70:	4b74      	ldr	r3, [pc, #464]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003a72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d106      	bne.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a80:	2b05      	cmp	r3, #5
 8003a82:	d103      	bne.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8003a84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a8a:	e003      	b.n	8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003a90:	f001 bebd 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003a94:	f001 bebb 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003a98:	4b6a      	ldr	r3, [pc, #424]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003a9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003a9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003aa2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d104      	bne.n	8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003aaa:	f7fe fedf 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 8003aae:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8003ab0:	f001 bead 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8003ab4:	4b63      	ldr	r3, [pc, #396]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003abc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ac0:	d10a      	bne.n	8003ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d107      	bne.n	8003ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ac8:	f107 0314 	add.w	r3, r7, #20
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff f87b 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ad6:	e03d      	b.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ada:	2b10      	cmp	r3, #16
 8003adc:	d108      	bne.n	8003af0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003ade:	f107 0308 	add.w	r3, r7, #8
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff f9dc 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003aec:	f001 be8f 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8003af0:	4b54      	ldr	r3, [pc, #336]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d10c      	bne.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8003afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afe:	2b18      	cmp	r3, #24
 8003b00:	d109      	bne.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003b02:	4b50      	ldr	r3, [pc, #320]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	08db      	lsrs	r3, r3, #3
 8003b08:	f003 0303 	and.w	r3, r3, #3
 8003b0c:	4a4e      	ldr	r2, [pc, #312]	@ (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8003b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b12:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b14:	e01e      	b.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8003b16:	4b4b      	ldr	r3, [pc, #300]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b22:	d105      	bne.n	8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8003b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b26:	2b20      	cmp	r3, #32
 8003b28:	d102      	bne.n	8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8003b2a:	4b48      	ldr	r3, [pc, #288]	@ (8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003b2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b2e:	e011      	b.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8003b30:	4b44      	ldr	r3, [pc, #272]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003b32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d106      	bne.n	8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b40:	2b28      	cmp	r3, #40	@ 0x28
 8003b42:	d103      	bne.n	8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8003b44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b4a:	e003      	b.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003b50:	f001 be5d 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003b54:	f001 be5b 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003b58:	4b3a      	ldr	r3, [pc, #232]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003b5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003b5e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8003b62:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d104      	bne.n	8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003b6a:	f7fe fe7f 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 8003b6e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8003b70:	f001 be4d 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8003b74:	4b33      	ldr	r3, [pc, #204]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b80:	d10a      	bne.n	8003b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8003b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b84:	2b40      	cmp	r3, #64	@ 0x40
 8003b86:	d107      	bne.n	8003b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b88:	f107 0314 	add.w	r3, r7, #20
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff f81b 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b96:	e045      	b.n	8003c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8003b98:	4b2a      	ldr	r3, [pc, #168]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ba0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ba4:	d10a      	bne.n	8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba8:	2b80      	cmp	r3, #128	@ 0x80
 8003baa:	d107      	bne.n	8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003bac:	f107 0308 	add.w	r3, r7, #8
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff f975 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bba:	e033      	b.n	8003c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003bbc:	4b21      	ldr	r3, [pc, #132]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d10c      	bne.n	8003be2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bca:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bcc:	d109      	bne.n	8003be2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003bce:	4b1d      	ldr	r3, [pc, #116]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	08db      	lsrs	r3, r3, #3
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8003bda:	fa22 f303 	lsr.w	r3, r2, r3
 8003bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8003be0:	e020      	b.n	8003c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8003be2:	4b18      	ldr	r3, [pc, #96]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bee:	d106      	bne.n	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bf6:	d102      	bne.n	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8003bf8:	4b14      	ldr	r3, [pc, #80]	@ (8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bfc:	e012      	b.n	8003c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003bfe:	4b11      	ldr	r3, [pc, #68]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003c00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d107      	bne.n	8003c1c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c0e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003c12:	d103      	bne.n	8003c1c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8003c14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c18:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c1a:	e003      	b.n	8003c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c20:	f001 bdf5 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003c24:	f001 bdf3 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003c28:	4b06      	ldr	r3, [pc, #24]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003c2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003c2e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8003c32:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8003c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003c3a:	f7fe fe17 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 8003c3e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8003c40:	f001 bde5 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003c44:	44020c00 	.word	0x44020c00
 8003c48:	03d09000 	.word	0x03d09000
 8003c4c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8003c50:	4ba0      	ldr	r3, [pc, #640]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c5c:	d10b      	bne.n	8003c76 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c64:	d107      	bne.n	8003c76 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c66:	f107 0314 	add.w	r3, r7, #20
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fe ffac 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c74:	e047      	b.n	8003d06 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8003c76:	4b97      	ldr	r3, [pc, #604]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c82:	d10b      	bne.n	8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8003c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c8a:	d107      	bne.n	8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003c8c:	f107 0308 	add.w	r3, r7, #8
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff f905 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c9a:	e034      	b.n	8003d06 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8003c9c:	4b8d      	ldr	r3, [pc, #564]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d10d      	bne.n	8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8003ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003caa:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003cae:	d109      	bne.n	8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003cb0:	4b88      	ldr	r3, [pc, #544]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	08db      	lsrs	r3, r3, #3
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	4a87      	ldr	r2, [pc, #540]	@ (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8003cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cc2:	e020      	b.n	8003d06 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8003cc4:	4b83      	ldr	r3, [pc, #524]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cd0:	d106      	bne.n	8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cd8:	d102      	bne.n	8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8003cda:	4b80      	ldr	r3, [pc, #512]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8003cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cde:	e012      	b.n	8003d06 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8003ce0:	4b7c      	ldr	r3, [pc, #496]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003ce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d107      	bne.n	8003cfe <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8003cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003cf4:	d103      	bne.n	8003cfe <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8003cf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cfc:	e003      	b.n	8003d06 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003d02:	f001 bd84 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003d06:	f001 bd82 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003d0a:	4b72      	ldr	r3, [pc, #456]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003d0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003d10:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8003d14:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8003d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d104      	bne.n	8003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003d1c:	f7fe fda6 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 8003d20:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8003d22:	f001 bd74 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8003d26:	4b6b      	ldr	r3, [pc, #428]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d32:	d10b      	bne.n	8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8003d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d3a:	d107      	bne.n	8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d3c:	f107 0314 	add.w	r3, r7, #20
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fe ff41 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d4a:	e047      	b.n	8003ddc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8003d4c:	4b61      	ldr	r3, [pc, #388]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d58:	d10b      	bne.n	8003d72 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d60:	d107      	bne.n	8003d72 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003d62:	f107 0308 	add.w	r3, r7, #8
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff f89a 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d70:	e034      	b.n	8003ddc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8003d72:	4b58      	ldr	r3, [pc, #352]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d10d      	bne.n	8003d9a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d84:	d109      	bne.n	8003d9a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d86:	4b53      	ldr	r3, [pc, #332]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	08db      	lsrs	r3, r3, #3
 8003d8c:	f003 0303 	and.w	r3, r3, #3
 8003d90:	4a51      	ldr	r2, [pc, #324]	@ (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8003d92:	fa22 f303 	lsr.w	r3, r2, r3
 8003d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d98:	e020      	b.n	8003ddc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8003d9a:	4b4e      	ldr	r3, [pc, #312]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003da2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003da6:	d106      	bne.n	8003db6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8003da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003daa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dae:	d102      	bne.n	8003db6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8003db0:	4b4a      	ldr	r3, [pc, #296]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8003db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003db4:	e012      	b.n	8003ddc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8003db6:	4b47      	ldr	r3, [pc, #284]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d107      	bne.n	8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003dca:	d103      	bne.n	8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8003dcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dd2:	e003      	b.n	8003ddc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003dd8:	f001 bd19 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003ddc:	f001 bd17 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8003de0:	4b3c      	ldr	r3, [pc, #240]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003de2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003de6:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8003dea:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8003dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d104      	bne.n	8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003df2:	f7fe fd3b 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 8003df6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8003df8:	f001 bd09 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8003dfc:	4b35      	ldr	r3, [pc, #212]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e08:	d10b      	bne.n	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e10:	d107      	bne.n	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003e12:	f107 0314 	add.w	r3, r7, #20
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fe fed6 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e20:	e047      	b.n	8003eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8003e22:	4b2c      	ldr	r3, [pc, #176]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e2e:	d10b      	bne.n	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8003e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e36:	d107      	bne.n	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003e38:	f107 0308 	add.w	r3, r7, #8
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff f82f 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e46:	e034      	b.n	8003eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8003e48:	4b22      	ldr	r3, [pc, #136]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d10d      	bne.n	8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8003e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e56:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003e5a:	d109      	bne.n	8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	08db      	lsrs	r3, r3, #3
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8003e68:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e6e:	e020      	b.n	8003eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8003e70:	4b18      	ldr	r3, [pc, #96]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e7c:	d106      	bne.n	8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8003e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e84:	d102      	bne.n	8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8003e86:	4b15      	ldr	r3, [pc, #84]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8003e88:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e8a:	e012      	b.n	8003eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8003e8c:	4b11      	ldr	r3, [pc, #68]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003e8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d107      	bne.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8003e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003ea0:	d103      	bne.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8003ea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ea6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ea8:	e003      	b.n	8003eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003eae:	f001 bcae 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003eb2:	f001 bcac 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8003eb6:	4b07      	ldr	r3, [pc, #28]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003eb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003ebc:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8003ec0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10b      	bne.n	8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003ec8:	f7fe fcd0 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 8003ecc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8003ece:	f001 bc9e 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003ed2:	bf00      	nop
 8003ed4:	44020c00 	.word	0x44020c00
 8003ed8:	03d09000 	.word	0x03d09000
 8003edc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8003ee0:	4ba0      	ldr	r3, [pc, #640]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ee8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eec:	d10b      	bne.n	8003f06 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8003eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ef4:	d107      	bne.n	8003f06 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ef6:	f107 0314 	add.w	r3, r7, #20
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fe fe64 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f04:	e047      	b.n	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8003f06:	4b97      	ldr	r3, [pc, #604]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f12:	d10b      	bne.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8003f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f16:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f1a:	d107      	bne.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003f1c:	f107 0308 	add.w	r3, r7, #8
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fe ffbd 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f2a:	e034      	b.n	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8003f2c:	4b8d      	ldr	r3, [pc, #564]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d10d      	bne.n	8003f54 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8003f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003f3e:	d109      	bne.n	8003f54 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f40:	4b88      	ldr	r3, [pc, #544]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	08db      	lsrs	r3, r3, #3
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	4a87      	ldr	r2, [pc, #540]	@ (8004168 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8003f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f52:	e020      	b.n	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8003f54:	4b83      	ldr	r3, [pc, #524]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f60:	d106      	bne.n	8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8003f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f68:	d102      	bne.n	8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8003f6a:	4b80      	ldr	r3, [pc, #512]	@ (800416c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8003f6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f6e:	e012      	b.n	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8003f70:	4b7c      	ldr	r3, [pc, #496]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003f72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d107      	bne.n	8003f8e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8003f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f80:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003f84:	d103      	bne.n	8003f8e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8003f86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f8c:	e003      	b.n	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f92:	f001 bc3c 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003f96:	f001 bc3a 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8003f9a:	4b72      	ldr	r3, [pc, #456]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003f9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003fa0:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8003fa4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d104      	bne.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003fac:	f7fe fc5e 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 8003fb0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8003fb2:	f001 bc2c 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8003fb6:	4b6b      	ldr	r3, [pc, #428]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fc2:	d10b      	bne.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fca:	d107      	bne.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003fcc:	f107 0314 	add.w	r3, r7, #20
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fe fdf9 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fda:	e047      	b.n	800406c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8003fdc:	4b61      	ldr	r3, [pc, #388]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fe8:	d10b      	bne.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8003fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ff0:	d107      	bne.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003ff2:	f107 0308 	add.w	r3, r7, #8
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fe ff52 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004000:	e034      	b.n	800406c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8004002:	4b58      	ldr	r3, [pc, #352]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b02      	cmp	r3, #2
 800400c:	d10d      	bne.n	800402a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800400e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004010:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004014:	d109      	bne.n	800402a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004016:	4b53      	ldr	r3, [pc, #332]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	08db      	lsrs	r3, r3, #3
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	4a51      	ldr	r2, [pc, #324]	@ (8004168 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8004022:	fa22 f303 	lsr.w	r3, r2, r3
 8004026:	637b      	str	r3, [r7, #52]	@ 0x34
 8004028:	e020      	b.n	800406c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800402a:	4b4e      	ldr	r3, [pc, #312]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004032:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004036:	d106      	bne.n	8004046 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8004038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800403e:	d102      	bne.n	8004046 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8004040:	4b4a      	ldr	r3, [pc, #296]	@ (800416c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8004042:	637b      	str	r3, [r7, #52]	@ 0x34
 8004044:	e012      	b.n	800406c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8004046:	4b47      	ldr	r3, [pc, #284]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004048:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b02      	cmp	r3, #2
 8004052:	d107      	bne.n	8004064 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8004054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004056:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800405a:	d103      	bne.n	8004064 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800405c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004060:	637b      	str	r3, [r7, #52]	@ 0x34
 8004062:	e003      	b.n	800406c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004068:	f001 bbd1 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800406c:	f001 bbcf 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8004070:	4b3c      	ldr	r3, [pc, #240]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004072:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004076:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800407a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800407c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407e:	2b00      	cmp	r3, #0
 8004080:	d104      	bne.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004082:	f7fe fbf3 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 8004086:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8004088:	f001 bbc1 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800408c:	4b35      	ldr	r3, [pc, #212]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004094:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004098:	d10b      	bne.n	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800409a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040a0:	d107      	bne.n	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80040a2:	f107 0314 	add.w	r3, r7, #20
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fe fd8e 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80040b0:	e047      	b.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80040b2:	4b2c      	ldr	r3, [pc, #176]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040be:	d10b      	bne.n	80040d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80040c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040c6:	d107      	bne.n	80040d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80040c8:	f107 0308 	add.w	r3, r7, #8
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fe fee7 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80040d6:	e034      	b.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 80040d8:	4b22      	ldr	r3, [pc, #136]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d10d      	bne.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 80040e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80040ea:	d109      	bne.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80040ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	08db      	lsrs	r3, r3, #3
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004168 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
 80040fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80040fe:	e020      	b.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8004100:	4b18      	ldr	r3, [pc, #96]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004108:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800410c:	d106      	bne.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800410e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004110:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004114:	d102      	bne.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8004116:	4b15      	ldr	r3, [pc, #84]	@ (800416c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8004118:	637b      	str	r3, [r7, #52]	@ 0x34
 800411a:	e012      	b.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800411c:	4b11      	ldr	r3, [pc, #68]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800411e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b02      	cmp	r3, #2
 8004128:	d107      	bne.n	800413a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800412a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800412c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004130:	d103      	bne.n	800413a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8004132:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004136:	637b      	str	r3, [r7, #52]	@ 0x34
 8004138:	e003      	b.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800413e:	f001 bb66 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004142:	f001 bb64 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8004146:	4b07      	ldr	r3, [pc, #28]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004148:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800414c:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8004150:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8004152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10b      	bne.n	8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004158:	f7fe fb88 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 800415c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800415e:	f001 bb56 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004162:	bf00      	nop
 8004164:	44020c00 	.word	0x44020c00
 8004168:	03d09000 	.word	0x03d09000
 800416c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8004170:	4ba1      	ldr	r3, [pc, #644]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004178:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800417c:	d10b      	bne.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800417e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004180:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004184:	d107      	bne.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004186:	f107 0314 	add.w	r3, r7, #20
 800418a:	4618      	mov	r0, r3
 800418c:	f7fe fd1c 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	637b      	str	r3, [r7, #52]	@ 0x34
 8004194:	e047      	b.n	8004226 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8004196:	4b98      	ldr	r3, [pc, #608]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800419e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041a2:	d10b      	bne.n	80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 80041a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041aa:	d107      	bne.n	80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80041ac:	f107 0308 	add.w	r3, r7, #8
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fe fe75 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80041ba:	e034      	b.n	8004226 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80041bc:	4b8e      	ldr	r3, [pc, #568]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d10d      	bne.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 80041c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ca:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80041ce:	d109      	bne.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80041d0:	4b89      	ldr	r3, [pc, #548]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	08db      	lsrs	r3, r3, #3
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	4a88      	ldr	r2, [pc, #544]	@ (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80041dc:	fa22 f303 	lsr.w	r3, r2, r3
 80041e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80041e2:	e020      	b.n	8004226 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80041e4:	4b84      	ldr	r3, [pc, #528]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041f0:	d106      	bne.n	8004200 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 80041f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041f8:	d102      	bne.n	8004200 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 80041fa:	4b81      	ldr	r3, [pc, #516]	@ (8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80041fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80041fe:	e012      	b.n	8004226 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8004200:	4b7d      	ldr	r3, [pc, #500]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004202:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b02      	cmp	r3, #2
 800420c:	d107      	bne.n	800421e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800420e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004210:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8004214:	d103      	bne.n	800421e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8004216:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800421a:	637b      	str	r3, [r7, #52]	@ 0x34
 800421c:	e003      	b.n	8004226 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004222:	f001 baf4 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004226:	f001 baf2 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800422a:	4b73      	ldr	r3, [pc, #460]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800422c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8004236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004238:	2b00      	cmp	r3, #0
 800423a:	d104      	bne.n	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800423c:	f7fe fb16 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 8004240:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8004242:	f001 bae4 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8004246:	4b6c      	ldr	r3, [pc, #432]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800424e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004252:	d10a      	bne.n	800426a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8004254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004256:	2b01      	cmp	r3, #1
 8004258:	d107      	bne.n	800426a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800425a:	f107 0314 	add.w	r3, r7, #20
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe fcb2 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	637b      	str	r3, [r7, #52]	@ 0x34
 8004268:	e043      	b.n	80042f2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800426a:	4b63      	ldr	r3, [pc, #396]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004272:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004276:	d10a      	bne.n	800428e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8004278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427a:	2b02      	cmp	r3, #2
 800427c:	d107      	bne.n	800428e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800427e:	f107 0308 	add.w	r3, r7, #8
 8004282:	4618      	mov	r0, r3
 8004284:	f7fe fe0c 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	637b      	str	r3, [r7, #52]	@ 0x34
 800428c:	e031      	b.n	80042f2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800428e:	4b5a      	ldr	r3, [pc, #360]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b02      	cmp	r3, #2
 8004298:	d10c      	bne.n	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800429a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429c:	2b03      	cmp	r3, #3
 800429e:	d109      	bne.n	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80042a0:	4b55      	ldr	r3, [pc, #340]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	08db      	lsrs	r3, r3, #3
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	4a54      	ldr	r2, [pc, #336]	@ (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
 80042b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80042b2:	e01e      	b.n	80042f2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80042b4:	4b50      	ldr	r3, [pc, #320]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042c0:	d105      	bne.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80042c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d102      	bne.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 80042c8:	4b4d      	ldr	r3, [pc, #308]	@ (8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80042ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80042cc:	e011      	b.n	80042f2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 80042ce:	4b4a      	ldr	r3, [pc, #296]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80042d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d106      	bne.n	80042ea <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 80042dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042de:	2b05      	cmp	r3, #5
 80042e0:	d103      	bne.n	80042ea <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 80042e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80042e8:	e003      	b.n	80042f2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042ee:	f001 ba8e 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80042f2:	f001 ba8c 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 80042f6:	4b40      	ldr	r3, [pc, #256]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80042f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80042fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004300:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8004302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004304:	2b00      	cmp	r3, #0
 8004306:	d104      	bne.n	8004312 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004308:	f7fe fab0 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 800430c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800430e:	f001 ba7e 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8004312:	4b39      	ldr	r3, [pc, #228]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800431a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800431e:	d10a      	bne.n	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8004320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004322:	2b10      	cmp	r3, #16
 8004324:	d107      	bne.n	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004326:	f107 0314 	add.w	r3, r7, #20
 800432a:	4618      	mov	r0, r3
 800432c:	f7fe fc4c 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	637b      	str	r3, [r7, #52]	@ 0x34
 8004334:	e043      	b.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8004336:	4b30      	ldr	r3, [pc, #192]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800433e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004342:	d10a      	bne.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8004344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004346:	2b20      	cmp	r3, #32
 8004348:	d107      	bne.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800434a:	f107 0308 	add.w	r3, r7, #8
 800434e:	4618      	mov	r0, r3
 8004350:	f7fe fda6 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	637b      	str	r3, [r7, #52]	@ 0x34
 8004358:	e031      	b.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800435a:	4b27      	ldr	r3, [pc, #156]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b02      	cmp	r3, #2
 8004364:	d10c      	bne.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8004366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004368:	2b30      	cmp	r3, #48	@ 0x30
 800436a:	d109      	bne.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800436c:	4b22      	ldr	r3, [pc, #136]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	08db      	lsrs	r3, r3, #3
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	4a21      	ldr	r2, [pc, #132]	@ (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8004378:	fa22 f303 	lsr.w	r3, r2, r3
 800437c:	637b      	str	r3, [r7, #52]	@ 0x34
 800437e:	e01e      	b.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8004380:	4b1d      	ldr	r3, [pc, #116]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800438c:	d105      	bne.n	800439a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800438e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004390:	2b40      	cmp	r3, #64	@ 0x40
 8004392:	d102      	bne.n	800439a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8004394:	4b1a      	ldr	r3, [pc, #104]	@ (8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8004396:	637b      	str	r3, [r7, #52]	@ 0x34
 8004398:	e011      	b.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800439a:	4b17      	ldr	r3, [pc, #92]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800439c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d106      	bne.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 80043a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043aa:	2b50      	cmp	r3, #80	@ 0x50
 80043ac:	d103      	bne.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 80043ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80043b4:	e003      	b.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043ba:	f001 ba28 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80043be:	f001 ba26 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80043c2:	4b0d      	ldr	r3, [pc, #52]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80043c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043c8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80043cc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80043ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d104      	bne.n	80043de <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80043d4:	f7fe fa76 	bl	80028c4 <HAL_RCC_GetPCLK3Freq>
 80043d8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80043da:	f001 ba18 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80043de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043e4:	d10e      	bne.n	8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043e6:	f107 0314 	add.w	r3, r7, #20
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fe fbec 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043f4:	f001 ba0b 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80043f8:	44020c00 	.word	0x44020c00
 80043fc:	03d09000 	.word	0x03d09000
 8004400:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8004404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004406:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800440a:	d108      	bne.n	800441e <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800440c:	f107 0308 	add.w	r3, r7, #8
 8004410:	4618      	mov	r0, r3
 8004412:	f7fe fd45 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800441a:	f001 b9f8 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800441e:	4ba4      	ldr	r3, [pc, #656]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b02      	cmp	r3, #2
 8004428:	d10d      	bne.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800442a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004430:	d109      	bne.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004432:	4b9f      	ldr	r3, [pc, #636]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	08db      	lsrs	r3, r3, #3
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	4a9d      	ldr	r2, [pc, #628]	@ (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800443e:	fa22 f303 	lsr.w	r3, r2, r3
 8004442:	637b      	str	r3, [r7, #52]	@ 0x34
 8004444:	e020      	b.n	8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8004446:	4b9a      	ldr	r3, [pc, #616]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800444e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004452:	d106      	bne.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8004454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004456:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800445a:	d102      	bne.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800445c:	4b96      	ldr	r3, [pc, #600]	@ (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800445e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004460:	e012      	b.n	8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004462:	4b93      	ldr	r3, [pc, #588]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b02      	cmp	r3, #2
 800446e:	d107      	bne.n	8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8004470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004472:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004476:	d103      	bne.n	8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8004478:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800447c:	637b      	str	r3, [r7, #52]	@ 0x34
 800447e:	e003      	b.n	8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004484:	f001 b9c3 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004488:	f001 b9c1 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800448c:	4b88      	ldr	r3, [pc, #544]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800448e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449a:	2b00      	cmp	r3, #0
 800449c:	d104      	bne.n	80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800449e:	f7fe f9c9 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 80044a2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80044a4:	f001 b9b3 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80044a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d104      	bne.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 80044ae:	f7fe f895 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 80044b2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80044b4:	f001 b9ab 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80044b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d108      	bne.n	80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044be:	f107 0314 	add.w	r3, r7, #20
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fe fb80 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044cc:	f001 b99f 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80044d0:	4b77      	ldr	r3, [pc, #476]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044dc:	d105      	bne.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80044de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d102      	bne.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 80044e4:	4b75      	ldr	r3, [pc, #468]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 80044e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80044e8:	e023      	b.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80044ea:	4b71      	ldr	r3, [pc, #452]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d10c      	bne.n	8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 80044f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d109      	bne.n	8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80044fc:	4b6c      	ldr	r3, [pc, #432]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	08db      	lsrs	r3, r3, #3
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	4a6b      	ldr	r2, [pc, #428]	@ (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8004508:	fa22 f303 	lsr.w	r3, r2, r3
 800450c:	637b      	str	r3, [r7, #52]	@ 0x34
 800450e:	e010      	b.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8004510:	4b67      	ldr	r3, [pc, #412]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800451c:	d105      	bne.n	800452a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800451e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004520:	2b05      	cmp	r3, #5
 8004522:	d102      	bne.n	800452a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8004524:	4b64      	ldr	r3, [pc, #400]	@ (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8004526:	637b      	str	r3, [r7, #52]	@ 0x34
 8004528:	e003      	b.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800452e:	f001 b96e 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004532:	f001 b96c 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8004536:	4b5e      	ldr	r3, [pc, #376]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004538:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800453c:	f003 0308 	and.w	r3, r3, #8
 8004540:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8004542:	4b5b      	ldr	r3, [pc, #364]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004544:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b02      	cmp	r3, #2
 800454e:	d106      	bne.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8004550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004552:	2b00      	cmp	r3, #0
 8004554:	d103      	bne.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8004556:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800455a:	637b      	str	r3, [r7, #52]	@ 0x34
 800455c:	e012      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800455e:	4b54      	ldr	r3, [pc, #336]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004560:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004564:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004568:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800456c:	d106      	bne.n	800457c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800456e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004570:	2b08      	cmp	r3, #8
 8004572:	d103      	bne.n	800457c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8004574:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004578:	637b      	str	r3, [r7, #52]	@ 0x34
 800457a:	e003      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8004580:	f001 b945 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004584:	f001 b943 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004588:	4b49      	ldr	r3, [pc, #292]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800458a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800458e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004592:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004596:	2b00      	cmp	r3, #0
 8004598:	d104      	bne.n	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800459a:	f7fe f967 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 800459e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80045a0:	f001 b935 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80045a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045aa:	d108      	bne.n	80045be <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045ac:	f107 0308 	add.w	r3, r7, #8
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fe fc75 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045ba:	f001 b928 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80045be:	4b3c      	ldr	r3, [pc, #240]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d10d      	bne.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 80045ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045d0:	d109      	bne.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80045d2:	4b37      	ldr	r3, [pc, #220]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	08db      	lsrs	r3, r3, #3
 80045d8:	f003 0303 	and.w	r3, r3, #3
 80045dc:	4a35      	ldr	r2, [pc, #212]	@ (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80045de:	fa22 f303 	lsr.w	r3, r2, r3
 80045e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80045e4:	e011      	b.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80045e6:	4b32      	ldr	r3, [pc, #200]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045f2:	d106      	bne.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 80045f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045fa:	d102      	bne.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 80045fc:	4b2e      	ldr	r3, [pc, #184]	@ (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80045fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004600:	e003      	b.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004606:	f001 b902 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800460a:	f001 b900 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800460e:	4b28      	ldr	r3, [pc, #160]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004610:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004614:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004618:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800461a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800461c:	2b00      	cmp	r3, #0
 800461e:	d104      	bne.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004620:	f7fe f924 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 8004624:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004626:	f001 b8f2 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800462a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004630:	d108      	bne.n	8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004632:	f107 0308 	add.w	r3, r7, #8
 8004636:	4618      	mov	r0, r3
 8004638:	f7fe fc32 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004640:	f001 b8e5 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004644:	4b1a      	ldr	r3, [pc, #104]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b02      	cmp	r3, #2
 800464e:	d10d      	bne.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8004650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004652:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004656:	d109      	bne.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004658:	4b15      	ldr	r3, [pc, #84]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	08db      	lsrs	r3, r3, #3
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	4a14      	ldr	r2, [pc, #80]	@ (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8004664:	fa22 f303 	lsr.w	r3, r2, r3
 8004668:	637b      	str	r3, [r7, #52]	@ 0x34
 800466a:	e011      	b.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800466c:	4b10      	ldr	r3, [pc, #64]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004674:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004678:	d106      	bne.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800467a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004680:	d102      	bne.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8004682:	4b0d      	ldr	r3, [pc, #52]	@ (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8004684:	637b      	str	r3, [r7, #52]	@ 0x34
 8004686:	e003      	b.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800468c:	f001 b8bf 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004690:	f001 b8bd 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004694:	4b06      	ldr	r3, [pc, #24]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004696:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800469a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800469e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80046a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10c      	bne.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80046a6:	f7fe f90d 	bl	80028c4 <HAL_RCC_GetPCLK3Freq>
 80046aa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 80046ac:	f001 b8af 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80046b0:	44020c00 	.word	0x44020c00
 80046b4:	03d09000 	.word	0x03d09000
 80046b8:	003d0900 	.word	0x003d0900
 80046bc:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80046c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046c6:	d108      	bne.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046c8:	f107 0308 	add.w	r3, r7, #8
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fe fbe7 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80046d6:	f001 b89a 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80046da:	4b9f      	ldr	r3, [pc, #636]	@ (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d10d      	bne.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 80046e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046ec:	d109      	bne.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80046ee:	4b9a      	ldr	r3, [pc, #616]	@ (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	08db      	lsrs	r3, r3, #3
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	4a98      	ldr	r2, [pc, #608]	@ (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80046fa:	fa22 f303 	lsr.w	r3, r2, r3
 80046fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004700:	e011      	b.n	8004726 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8004702:	4b95      	ldr	r3, [pc, #596]	@ (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800470a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800470e:	d106      	bne.n	800471e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8004710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004712:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004716:	d102      	bne.n	800471e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8004718:	4b91      	ldr	r3, [pc, #580]	@ (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800471a:	637b      	str	r3, [r7, #52]	@ 0x34
 800471c:	e003      	b.n	8004726 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004722:	f001 b874 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004726:	f001 b872 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800472a:	4b8b      	ldr	r3, [pc, #556]	@ (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800472c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004730:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004734:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8004736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004738:	2b00      	cmp	r3, #0
 800473a:	d104      	bne.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800473c:	f7fe f8c2 	bl	80028c4 <HAL_RCC_GetPCLK3Freq>
 8004740:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8004742:	f001 b864 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8004746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004748:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800474c:	d108      	bne.n	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800474e:	f107 0308 	add.w	r3, r7, #8
 8004752:	4618      	mov	r0, r3
 8004754:	f7fe fba4 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800475c:	f001 b857 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004760:	4b7d      	ldr	r3, [pc, #500]	@ (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b02      	cmp	r3, #2
 800476a:	d10d      	bne.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800476c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004772:	d109      	bne.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004774:	4b78      	ldr	r3, [pc, #480]	@ (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	08db      	lsrs	r3, r3, #3
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	4a77      	ldr	r2, [pc, #476]	@ (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8004780:	fa22 f303 	lsr.w	r3, r2, r3
 8004784:	637b      	str	r3, [r7, #52]	@ 0x34
 8004786:	e011      	b.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8004788:	4b73      	ldr	r3, [pc, #460]	@ (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004794:	d106      	bne.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8004796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004798:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800479c:	d102      	bne.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800479e:	4b70      	ldr	r3, [pc, #448]	@ (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80047a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80047a2:	e003      	b.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047a8:	f001 b831 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80047ac:	f001 b82f 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80047b0:	4b69      	ldr	r3, [pc, #420]	@ (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80047b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80047b6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80047ba:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80047bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d104      	bne.n	80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80047c2:	f7fe f853 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 80047c6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80047c8:	f001 b821 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 80047cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047d2:	d108      	bne.n	80047e6 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047d4:	f107 0308 	add.w	r3, r7, #8
 80047d8:	4618      	mov	r0, r3
 80047da:	f7fe fb61 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047e2:	f001 b814 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80047e6:	4b5c      	ldr	r3, [pc, #368]	@ (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d10e      	bne.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 80047f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047f8:	d10a      	bne.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80047fa:	4b57      	ldr	r3, [pc, #348]	@ (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	08db      	lsrs	r3, r3, #3
 8004800:	f003 0303 	and.w	r3, r3, #3
 8004804:	4a55      	ldr	r2, [pc, #340]	@ (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8004806:	fa22 f303 	lsr.w	r3, r2, r3
 800480a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800480c:	f000 bfff 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004814:	f000 bffb 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004818:	4b4f      	ldr	r3, [pc, #316]	@ (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800481a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800481e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004822:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004826:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800482a:	d056      	beq.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800482c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004832:	f200 808b 	bhi.w	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8004836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800483c:	d03e      	beq.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800483e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004840:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004844:	f200 8082 	bhi.w	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8004848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800484e:	d027      	beq.n	80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8004850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004852:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004856:	d879      	bhi.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8004858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800485e:	d017      	beq.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8004860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004862:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004866:	d871      	bhi.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8004868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486a:	2b00      	cmp	r3, #0
 800486c:	d004      	beq.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800486e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004870:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004874:	d004      	beq.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8004876:	e069      	b.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004878:	f7fe f824 	bl	80028c4 <HAL_RCC_GetPCLK3Freq>
 800487c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800487e:	e068      	b.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004880:	f107 0314 	add.w	r3, r7, #20
 8004884:	4618      	mov	r0, r3
 8004886:	f7fe f99f 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800488e:	e060      	b.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004890:	f107 0308 	add.w	r3, r7, #8
 8004894:	4618      	mov	r0, r3
 8004896:	f7fe fb03 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800489e:	e058      	b.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80048a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80048a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d103      	bne.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 80048ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048b2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80048b4:	e04d      	b.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80048b6:	2300      	movs	r3, #0
 80048b8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80048ba:	e04a      	b.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80048bc:	4b26      	ldr	r3, [pc, #152]	@ (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80048be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048ca:	d103      	bne.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 80048cc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80048d0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80048d2:	e03e      	b.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80048d4:	2300      	movs	r3, #0
 80048d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80048d8:	e03b      	b.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80048da:	4b1f      	ldr	r3, [pc, #124]	@ (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80048dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80048e0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80048e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80048e6:	4b1c      	ldr	r3, [pc, #112]	@ (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d10c      	bne.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 80048f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d109      	bne.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80048f8:	4b17      	ldr	r3, [pc, #92]	@ (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	08db      	lsrs	r3, r3, #3
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	4a16      	ldr	r2, [pc, #88]	@ (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8004904:	fa22 f303 	lsr.w	r3, r2, r3
 8004908:	637b      	str	r3, [r7, #52]	@ 0x34
 800490a:	e01e      	b.n	800494a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800490c:	4b12      	ldr	r3, [pc, #72]	@ (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004914:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004918:	d106      	bne.n	8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800491a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800491c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004920:	d102      	bne.n	8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004922:	4b0f      	ldr	r3, [pc, #60]	@ (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8004924:	637b      	str	r3, [r7, #52]	@ 0x34
 8004926:	e010      	b.n	800494a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004928:	4b0b      	ldr	r3, [pc, #44]	@ (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004930:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004934:	d106      	bne.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8004936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004938:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800493c:	d102      	bne.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800493e:	4b09      	ldr	r3, [pc, #36]	@ (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8004940:	637b      	str	r3, [r7, #52]	@ 0x34
 8004942:	e002      	b.n	800494a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004948:	e003      	b.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800494a:	e002      	b.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004950:	bf00      	nop
          }
        }
        break;
 8004952:	f000 bf5c 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004956:	bf00      	nop
 8004958:	44020c00 	.word	0x44020c00
 800495c:	03d09000 	.word	0x03d09000
 8004960:	003d0900 	.word	0x003d0900
 8004964:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004968:	4b9e      	ldr	r3, [pc, #632]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800496a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800496e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004972:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004976:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800497a:	d056      	beq.n	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800497c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004982:	f200 808b 	bhi.w	8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8004986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004988:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800498c:	d03e      	beq.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800498e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004990:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004994:	f200 8082 	bhi.w	8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8004998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800499e:	d027      	beq.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 80049a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049a6:	d879      	bhi.n	8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80049a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049ae:	d017      	beq.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 80049b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049b6:	d871      	bhi.n	8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80049b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d004      	beq.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 80049be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049c4:	d004      	beq.n	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 80049c6:	e069      	b.n	8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80049c8:	f7fd ff50 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 80049cc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80049ce:	e068      	b.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049d0:	f107 0314 	add.w	r3, r7, #20
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fe f8f7 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80049de:	e060      	b.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049e0:	f107 0308 	add.w	r3, r7, #8
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fe fa5b 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80049ee:	e058      	b.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80049f0:	4b7c      	ldr	r3, [pc, #496]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80049f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d103      	bne.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 80049fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a02:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004a04:	e04d      	b.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8004a06:	2300      	movs	r3, #0
 8004a08:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004a0a:	e04a      	b.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004a0c:	4b75      	ldr	r3, [pc, #468]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004a0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a1a:	d103      	bne.n	8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8004a1c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004a20:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004a22:	e03e      	b.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004a28:	e03b      	b.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004a2a:	4b6e      	ldr	r3, [pc, #440]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a30:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004a34:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a36:	4b6b      	ldr	r3, [pc, #428]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d10c      	bne.n	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8004a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d109      	bne.n	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a48:	4b66      	ldr	r3, [pc, #408]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	08db      	lsrs	r3, r3, #3
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	4a65      	ldr	r2, [pc, #404]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8004a54:	fa22 f303 	lsr.w	r3, r2, r3
 8004a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a5a:	e01e      	b.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a5c:	4b61      	ldr	r3, [pc, #388]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a68:	d106      	bne.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8004a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a70:	d102      	bne.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004a72:	4b5e      	ldr	r3, [pc, #376]	@ (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8004a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a76:	e010      	b.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a78:	4b5a      	ldr	r3, [pc, #360]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a84:	d106      	bne.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8004a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a8c:	d102      	bne.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004a8e:	4b58      	ldr	r3, [pc, #352]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8004a90:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a92:	e002      	b.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004a94:	2300      	movs	r3, #0
 8004a96:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004a98:	e003      	b.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8004a9a:	e002      	b.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004aa0:	bf00      	nop
          }
        }
        break;
 8004aa2:	f000 beb4 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8004aa6:	4b4f      	ldr	r3, [pc, #316]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004aa8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004aac:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004ab0:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ab8:	d056      	beq.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8004aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ac0:	f200 808b 	bhi.w	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004aca:	d03e      	beq.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8004acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ace:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ad2:	f200 8082 	bhi.w	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004adc:	d027      	beq.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8004ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ae4:	d879      	bhi.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004aec:	d017      	beq.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8004aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004af4:	d871      	bhi.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8004af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d004      	beq.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8004afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b02:	d004      	beq.n	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8004b04:	e069      	b.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004b06:	f7fd fedd 	bl	80028c4 <HAL_RCC_GetPCLK3Freq>
 8004b0a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8004b0c:	e068      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b0e:	f107 0314 	add.w	r3, r7, #20
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fe f858 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004b1c:	e060      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b1e:	f107 0308 	add.w	r3, r7, #8
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fe f9bc 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004b2c:	e058      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004b30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d103      	bne.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8004b3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b40:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004b42:	e04d      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8004b44:	2300      	movs	r3, #0
 8004b46:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004b48:	e04a      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004b4a:	4b26      	ldr	r3, [pc, #152]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b58:	d103      	bne.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8004b5a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004b5e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004b60:	e03e      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004b66:	e03b      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004b68:	4b1e      	ldr	r3, [pc, #120]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004b6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b6e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004b72:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b74:	4b1b      	ldr	r3, [pc, #108]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d10c      	bne.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8004b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d109      	bne.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b86:	4b17      	ldr	r3, [pc, #92]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	08db      	lsrs	r3, r3, #3
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	4a15      	ldr	r2, [pc, #84]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8004b92:	fa22 f303 	lsr.w	r3, r2, r3
 8004b96:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b98:	e01e      	b.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b9a:	4b12      	ldr	r3, [pc, #72]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ba2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ba6:	d106      	bne.n	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8004ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bae:	d102      	bne.n	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8004bb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bb4:	e010      	b.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bc2:	d106      	bne.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8004bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bca:	d102      	bne.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004bcc:	4b08      	ldr	r3, [pc, #32]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8004bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bd0:	e002      	b.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004bd6:	e003      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8004bd8:	e002      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004bde:	bf00      	nop
          }
        }
        break;
 8004be0:	f000 be15 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004be4:	44020c00 	.word	0x44020c00
 8004be8:	03d09000 	.word	0x03d09000
 8004bec:	003d0900 	.word	0x003d0900
 8004bf0:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8004bf4:	4b9e      	ldr	r3, [pc, #632]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004bf6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004bfa:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8004bfe:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c02:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004c06:	d056      	beq.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8004c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004c0e:	f200 808b 	bhi.w	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8004c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c18:	d03e      	beq.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c20:	f200 8082 	bhi.w	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8004c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c26:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c2a:	d027      	beq.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c32:	d879      	bhi.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8004c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c3a:	d017      	beq.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c42:	d871      	bhi.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8004c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d004      	beq.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c50:	d004      	beq.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8004c52:	e069      	b.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004c54:	f7fd fe36 	bl	80028c4 <HAL_RCC_GetPCLK3Freq>
 8004c58:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8004c5a:	e068      	b.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c5c:	f107 0314 	add.w	r3, r7, #20
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fd ffb1 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004c6a:	e060      	b.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c6c:	f107 0308 	add.w	r3, r7, #8
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fe f915 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004c7a:	e058      	b.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c7c:	4b7c      	ldr	r3, [pc, #496]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004c7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d103      	bne.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8004c8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c8e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004c90:	e04d      	b.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8004c92:	2300      	movs	r3, #0
 8004c94:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004c96:	e04a      	b.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004c98:	4b75      	ldr	r3, [pc, #468]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004c9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ca2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ca6:	d103      	bne.n	8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8004ca8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004cac:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004cae:	e03e      	b.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004cb4:	e03b      	b.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004cb6:	4b6e      	ldr	r3, [pc, #440]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004cb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cbc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004cc2:	4b6b      	ldr	r3, [pc, #428]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d10c      	bne.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8004cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d109      	bne.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004cd4:	4b66      	ldr	r3, [pc, #408]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	08db      	lsrs	r3, r3, #3
 8004cda:	f003 0303 	and.w	r3, r3, #3
 8004cde:	4a65      	ldr	r2, [pc, #404]	@ (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8004ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ce6:	e01e      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ce8:	4b61      	ldr	r3, [pc, #388]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cf4:	d106      	bne.n	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8004cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cfc:	d102      	bne.n	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004cfe:	4b5e      	ldr	r3, [pc, #376]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8004d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d02:	e010      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d04:	4b5a      	ldr	r3, [pc, #360]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d10:	d106      	bne.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8004d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d18:	d102      	bne.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004d1a:	4b58      	ldr	r3, [pc, #352]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8004d1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d1e:	e002      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004d20:	2300      	movs	r3, #0
 8004d22:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004d24:	e003      	b.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8004d26:	e002      	b.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004d2c:	bf00      	nop
          }
        }
        break;
 8004d2e:	f000 bd6e 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8004d32:	4b4f      	ldr	r3, [pc, #316]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004d34:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004d38:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004d3c:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d40:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004d44:	d056      	beq.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8004d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d48:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004d4c:	f200 808b 	bhi.w	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8004d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d56:	d03e      	beq.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8004d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d5e:	f200 8082 	bhi.w	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8004d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d64:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d68:	d027      	beq.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d70:	d879      	bhi.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8004d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d78:	d017      	beq.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d80:	d871      	bhi.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8004d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d004      	beq.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8004d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d8e:	d004      	beq.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8004d90:	e069      	b.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004d92:	f7fd fd97 	bl	80028c4 <HAL_RCC_GetPCLK3Freq>
 8004d96:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8004d98:	e068      	b.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d9a:	f107 0314 	add.w	r3, r7, #20
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fd ff12 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004da8:	e060      	b.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004daa:	f107 0308 	add.w	r3, r7, #8
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fe f876 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004db8:	e058      	b.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004dba:	4b2d      	ldr	r3, [pc, #180]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d103      	bne.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8004dc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dcc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004dce:	e04d      	b.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004dd4:	e04a      	b.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004dd6:	4b26      	ldr	r3, [pc, #152]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004dd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ddc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004de0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004de4:	d103      	bne.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8004de6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004dea:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004dec:	e03e      	b.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8004dee:	2300      	movs	r3, #0
 8004df0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004df2:	e03b      	b.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004df4:	4b1e      	ldr	r3, [pc, #120]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004df6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004dfa:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e00:	4b1b      	ldr	r3, [pc, #108]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d10c      	bne.n	8004e26 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8004e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d109      	bne.n	8004e26 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e12:	4b17      	ldr	r3, [pc, #92]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	08db      	lsrs	r3, r3, #3
 8004e18:	f003 0303 	and.w	r3, r3, #3
 8004e1c:	4a15      	ldr	r2, [pc, #84]	@ (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8004e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e22:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e24:	e01e      	b.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e26:	4b12      	ldr	r3, [pc, #72]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e32:	d106      	bne.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8004e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e3a:	d102      	bne.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8004e3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e40:	e010      	b.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e42:	4b0b      	ldr	r3, [pc, #44]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e4e:	d106      	bne.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8004e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e56:	d102      	bne.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004e58:	4b08      	ldr	r3, [pc, #32]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8004e5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e5c:	e002      	b.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004e62:	e003      	b.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8004e64:	e002      	b.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004e6a:	bf00      	nop
          }
        }
        break;
 8004e6c:	f000 bccf 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004e70:	44020c00 	.word	0x44020c00
 8004e74:	03d09000 	.word	0x03d09000
 8004e78:	003d0900 	.word	0x003d0900
 8004e7c:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8004e80:	4b9e      	ldr	r3, [pc, #632]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004e82:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004e86:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8004e8a:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e92:	d056      	beq.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8004e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e9a:	f200 808b 	bhi.w	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea4:	d03e      	beq.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eac:	f200 8082 	bhi.w	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004eb6:	d027      	beq.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004ebe:	d879      	bhi.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ec6:	d017      	beq.n	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ece:	d871      	bhi.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d004      	beq.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004edc:	d004      	beq.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8004ede:	e069      	b.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004ee0:	f7fd fcf0 	bl	80028c4 <HAL_RCC_GetPCLK3Freq>
 8004ee4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8004ee6:	e068      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ee8:	f107 0314 	add.w	r3, r7, #20
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fd fe6b 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004ef6:	e060      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ef8:	f107 0308 	add.w	r3, r7, #8
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7fd ffcf 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004f06:	e058      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f08:	4b7c      	ldr	r3, [pc, #496]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004f0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d103      	bne.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8004f16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f1a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004f1c:	e04d      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004f22:	e04a      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004f24:	4b75      	ldr	r3, [pc, #468]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004f26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f32:	d103      	bne.n	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8004f34:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004f38:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004f3a:	e03e      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004f40:	e03b      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004f42:	4b6e      	ldr	r3, [pc, #440]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004f44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f48:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f4e:	4b6b      	ldr	r3, [pc, #428]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d10c      	bne.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8004f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d109      	bne.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f60:	4b66      	ldr	r3, [pc, #408]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	08db      	lsrs	r3, r3, #3
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	4a65      	ldr	r2, [pc, #404]	@ (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8004f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f72:	e01e      	b.n	8004fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f74:	4b61      	ldr	r3, [pc, #388]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f80:	d106      	bne.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8004f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f88:	d102      	bne.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004f8a:	4b5e      	ldr	r3, [pc, #376]	@ (8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8004f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f8e:	e010      	b.n	8004fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f90:	4b5a      	ldr	r3, [pc, #360]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f9c:	d106      	bne.n	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8004f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fa4:	d102      	bne.n	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004fa6:	4b58      	ldr	r3, [pc, #352]	@ (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8004fa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004faa:	e002      	b.n	8004fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004fac:	2300      	movs	r3, #0
 8004fae:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004fb0:	e003      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8004fb2:	e002      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004fb8:	bf00      	nop
          }
        }
        break;
 8004fba:	f000 bc28 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004fbe:	4b4f      	ldr	r3, [pc, #316]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fc8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8004fca:	4b4c      	ldr	r3, [pc, #304]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fd6:	d106      	bne.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d103      	bne.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8004fde:	4b4a      	ldr	r3, [pc, #296]	@ (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8004fe0:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8004fe2:	f000 bc14 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fec:	d108      	bne.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fee:	f107 0320 	add.w	r3, r7, #32
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fd fc7c 	bl	80028f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ffc:	f000 bc07 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8005000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005002:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005006:	d107      	bne.n	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005008:	f107 0314 	add.w	r3, r7, #20
 800500c:	4618      	mov	r0, r3
 800500e:	f7fd fddb 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005016:	e3fa      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800501c:	e3f7      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800501e:	4b37      	ldr	r3, [pc, #220]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8005020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 800502a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502c:	2b04      	cmp	r3, #4
 800502e:	d861      	bhi.n	80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8005030:	a201      	add	r2, pc, #4	@ (adr r2, 8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8005032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005036:	bf00      	nop
 8005038:	0800504d 	.word	0x0800504d
 800503c:	0800505d 	.word	0x0800505d
 8005040:	0800506d 	.word	0x0800506d
 8005044:	0800507d 	.word	0x0800507d
 8005048:	08005083 	.word	0x08005083
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800504c:	f107 0320 	add.w	r3, r7, #32
 8005050:	4618      	mov	r0, r3
 8005052:	f7fd fc4d 	bl	80028f0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005058:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800505a:	e04e      	b.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800505c:	f107 0314 	add.w	r3, r7, #20
 8005060:	4618      	mov	r0, r3
 8005062:	f7fd fdb1 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800506a:	e046      	b.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800506c:	f107 0308 	add.w	r3, r7, #8
 8005070:	4618      	mov	r0, r3
 8005072:	f7fd ff15 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800507a:	e03e      	b.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800507c:	4b23      	ldr	r3, [pc, #140]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800507e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005080:	e03b      	b.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005082:	4b1e      	ldr	r3, [pc, #120]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8005084:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005088:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800508c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800508e:	4b1b      	ldr	r3, [pc, #108]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b02      	cmp	r3, #2
 8005098:	d10c      	bne.n	80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800509a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509c:	2b00      	cmp	r3, #0
 800509e:	d109      	bne.n	80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050a0:	4b16      	ldr	r3, [pc, #88]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	08db      	lsrs	r3, r3, #3
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	4a15      	ldr	r2, [pc, #84]	@ (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80050ac:	fa22 f303 	lsr.w	r3, r2, r3
 80050b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80050b2:	e01e      	b.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050b4:	4b11      	ldr	r3, [pc, #68]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050c0:	d106      	bne.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 80050c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050c8:	d102      	bne.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80050ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80050cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80050ce:	e010      	b.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050d0:	4b0a      	ldr	r3, [pc, #40]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050dc:	d106      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 80050de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050e4:	d102      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80050e6:	4b08      	ldr	r3, [pc, #32]	@ (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80050e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80050ea:	e002      	b.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80050ec:	2300      	movs	r3, #0
 80050ee:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80050f0:	e003      	b.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 80050f2:	e002      	b.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 80050f4:	2300      	movs	r3, #0
 80050f6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80050f8:	bf00      	nop
          }
        }
        break;
 80050fa:	e388      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80050fc:	44020c00 	.word	0x44020c00
 8005100:	03d09000 	.word	0x03d09000
 8005104:	003d0900 	.word	0x003d0900
 8005108:	007a1200 	.word	0x007a1200
 800510c:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005110:	4ba9      	ldr	r3, [pc, #676]	@ (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005116:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800511a:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 800511c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511e:	2b20      	cmp	r3, #32
 8005120:	f200 809a 	bhi.w	8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8005124:	a201      	add	r2, pc, #4	@ (adr r2, 800512c <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8005126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512a:	bf00      	nop
 800512c:	080051b1 	.word	0x080051b1
 8005130:	08005259 	.word	0x08005259
 8005134:	08005259 	.word	0x08005259
 8005138:	08005259 	.word	0x08005259
 800513c:	08005259 	.word	0x08005259
 8005140:	08005259 	.word	0x08005259
 8005144:	08005259 	.word	0x08005259
 8005148:	08005259 	.word	0x08005259
 800514c:	080051c1 	.word	0x080051c1
 8005150:	08005259 	.word	0x08005259
 8005154:	08005259 	.word	0x08005259
 8005158:	08005259 	.word	0x08005259
 800515c:	08005259 	.word	0x08005259
 8005160:	08005259 	.word	0x08005259
 8005164:	08005259 	.word	0x08005259
 8005168:	08005259 	.word	0x08005259
 800516c:	080051d1 	.word	0x080051d1
 8005170:	08005259 	.word	0x08005259
 8005174:	08005259 	.word	0x08005259
 8005178:	08005259 	.word	0x08005259
 800517c:	08005259 	.word	0x08005259
 8005180:	08005259 	.word	0x08005259
 8005184:	08005259 	.word	0x08005259
 8005188:	08005259 	.word	0x08005259
 800518c:	080051e1 	.word	0x080051e1
 8005190:	08005259 	.word	0x08005259
 8005194:	08005259 	.word	0x08005259
 8005198:	08005259 	.word	0x08005259
 800519c:	08005259 	.word	0x08005259
 80051a0:	08005259 	.word	0x08005259
 80051a4:	08005259 	.word	0x08005259
 80051a8:	08005259 	.word	0x08005259
 80051ac:	080051e7 	.word	0x080051e7
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051b0:	f107 0320 	add.w	r3, r7, #32
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fd fb9b 	bl	80028f0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80051be:	e04e      	b.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051c0:	f107 0314 	add.w	r3, r7, #20
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7fd fcff 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80051ce:	e046      	b.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051d0:	f107 0308 	add.w	r3, r7, #8
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7fd fe63 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80051de:	e03e      	b.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80051e0:	4b76      	ldr	r3, [pc, #472]	@ (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80051e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80051e4:	e03b      	b.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80051e6:	4b74      	ldr	r3, [pc, #464]	@ (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80051e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051ec:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80051f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051f2:	4b71      	ldr	r3, [pc, #452]	@ (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d10c      	bne.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 80051fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005200:	2b00      	cmp	r3, #0
 8005202:	d109      	bne.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005204:	4b6c      	ldr	r3, [pc, #432]	@ (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	08db      	lsrs	r3, r3, #3
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	4a6c      	ldr	r2, [pc, #432]	@ (80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8005210:	fa22 f303 	lsr.w	r3, r2, r3
 8005214:	637b      	str	r3, [r7, #52]	@ 0x34
 8005216:	e01e      	b.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005218:	4b67      	ldr	r3, [pc, #412]	@ (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005224:	d106      	bne.n	8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8005226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800522c:	d102      	bne.n	8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800522e:	4b65      	ldr	r3, [pc, #404]	@ (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8005230:	637b      	str	r3, [r7, #52]	@ 0x34
 8005232:	e010      	b.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005234:	4b60      	ldr	r3, [pc, #384]	@ (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800523c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005240:	d106      	bne.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8005242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005244:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005248:	d102      	bne.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800524a:	4b5f      	ldr	r3, [pc, #380]	@ (80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800524c:	637b      	str	r3, [r7, #52]	@ 0x34
 800524e:	e002      	b.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005250:	2300      	movs	r3, #0
 8005252:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005254:	e003      	b.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8005256:	e002      	b.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8005258:	2300      	movs	r3, #0
 800525a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800525c:	bf00      	nop
          }
        }
        break;
 800525e:	e2d6      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005260:	4b55      	ldr	r3, [pc, #340]	@ (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005266:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800526a:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 800526c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005272:	d031      	beq.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8005274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005276:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800527a:	d866      	bhi.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800527c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005280:	d027      	beq.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8005282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005284:	2bc0      	cmp	r3, #192	@ 0xc0
 8005286:	d860      	bhi.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8005288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528a:	2b80      	cmp	r3, #128	@ 0x80
 800528c:	d019      	beq.n	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800528e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005290:	2b80      	cmp	r3, #128	@ 0x80
 8005292:	d85a      	bhi.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8005294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800529a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529c:	2b40      	cmp	r3, #64	@ 0x40
 800529e:	d008      	beq.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 80052a0:	e053      	b.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052a2:	f107 0320 	add.w	r3, r7, #32
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fd fb22 	bl	80028f0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80052ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80052b0:	e04e      	b.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052b2:	f107 0314 	add.w	r3, r7, #20
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7fd fc86 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80052c0:	e046      	b.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052c2:	f107 0308 	add.w	r3, r7, #8
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fd fdea 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80052d0:	e03e      	b.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80052d2:	4b3a      	ldr	r3, [pc, #232]	@ (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80052d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80052d6:	e03b      	b.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80052d8:	4b37      	ldr	r3, [pc, #220]	@ (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80052da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052de:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80052e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052e4:	4b34      	ldr	r3, [pc, #208]	@ (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d10c      	bne.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 80052f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d109      	bne.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80052f6:	4b30      	ldr	r3, [pc, #192]	@ (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	08db      	lsrs	r3, r3, #3
 80052fc:	f003 0303 	and.w	r3, r3, #3
 8005300:	4a2f      	ldr	r2, [pc, #188]	@ (80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8005302:	fa22 f303 	lsr.w	r3, r2, r3
 8005306:	637b      	str	r3, [r7, #52]	@ 0x34
 8005308:	e01e      	b.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800530a:	4b2b      	ldr	r3, [pc, #172]	@ (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005312:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005316:	d106      	bne.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8005318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800531e:	d102      	bne.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005320:	4b28      	ldr	r3, [pc, #160]	@ (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8005322:	637b      	str	r3, [r7, #52]	@ 0x34
 8005324:	e010      	b.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005326:	4b24      	ldr	r3, [pc, #144]	@ (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800532e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005332:	d106      	bne.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8005334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005336:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800533a:	d102      	bne.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800533c:	4b22      	ldr	r3, [pc, #136]	@ (80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800533e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005340:	e002      	b.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005342:	2300      	movs	r3, #0
 8005344:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005346:	e003      	b.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8005348:	e002      	b.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800534a:	2300      	movs	r3, #0
 800534c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800534e:	bf00      	nop
          }
        }
        break;
 8005350:	e25d      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8005352:	4b19      	ldr	r3, [pc, #100]	@ (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005358:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800535c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800535e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005360:	2b00      	cmp	r3, #0
 8005362:	d103      	bne.n	800536c <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005364:	f7fd fa98 	bl	8002898 <HAL_RCC_GetPCLK2Freq>
 8005368:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800536a:	e250      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800536c:	4b12      	ldr	r3, [pc, #72]	@ (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005374:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005378:	d10b      	bne.n	8005392 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800537a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005380:	d107      	bne.n	8005392 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005382:	f107 0314 	add.w	r3, r7, #20
 8005386:	4618      	mov	r0, r3
 8005388:	f7fd fc1e 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005390:	e04f      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8005392:	4b09      	ldr	r3, [pc, #36]	@ (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800539a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800539e:	d115      	bne.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 80053a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053a6:	d111      	bne.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053a8:	f107 0308 	add.w	r3, r7, #8
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fd fd77 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80053b6:	e03c      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 80053b8:	44020c00 	.word	0x44020c00
 80053bc:	00bb8000 	.word	0x00bb8000
 80053c0:	03d09000 	.word	0x03d09000
 80053c4:	003d0900 	.word	0x003d0900
 80053c8:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80053cc:	4b94      	ldr	r3, [pc, #592]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d10d      	bne.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 80053d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053da:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80053de:	d109      	bne.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80053e0:	4b8f      	ldr	r3, [pc, #572]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	08db      	lsrs	r3, r3, #3
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	4a8e      	ldr	r2, [pc, #568]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80053ec:	fa22 f303 	lsr.w	r3, r2, r3
 80053f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80053f2:	e01e      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80053f4:	4b8a      	ldr	r3, [pc, #552]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005400:	d106      	bne.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8005402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005404:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005408:	d102      	bne.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800540a:	4b87      	ldr	r3, [pc, #540]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800540c:	637b      	str	r3, [r7, #52]	@ 0x34
 800540e:	e010      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8005410:	4b83      	ldr	r3, [pc, #524]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005418:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800541c:	d106      	bne.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800541e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005420:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005424:	d102      	bne.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8005426:	4b81      	ldr	r3, [pc, #516]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8005428:	637b      	str	r3, [r7, #52]	@ 0x34
 800542a:	e002      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005430:	e1ed      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005432:	e1ec      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8005434:	4b7a      	ldr	r3, [pc, #488]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800543a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800543e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8005440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005442:	2b00      	cmp	r3, #0
 8005444:	d103      	bne.n	800544e <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005446:	f7fd fa3d 	bl	80028c4 <HAL_RCC_GetPCLK3Freq>
 800544a:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800544c:	e1df      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800544e:	4b74      	ldr	r3, [pc, #464]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005456:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800545a:	d10b      	bne.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800545c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005462:	d107      	bne.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005464:	f107 0314 	add.w	r3, r7, #20
 8005468:	4618      	mov	r0, r3
 800546a:	f7fd fbad 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	637b      	str	r3, [r7, #52]	@ 0x34
 8005472:	e045      	b.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8005474:	4b6a      	ldr	r3, [pc, #424]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800547c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005480:	d10b      	bne.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8005482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005484:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005488:	d107      	bne.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800548a:	f107 0308 	add.w	r3, r7, #8
 800548e:	4618      	mov	r0, r3
 8005490:	f7fd fd06 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	637b      	str	r3, [r7, #52]	@ 0x34
 8005498:	e032      	b.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800549a:	4b61      	ldr	r3, [pc, #388]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d10d      	bne.n	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 80054a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80054ac:	d109      	bne.n	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80054ae:	4b5c      	ldr	r3, [pc, #368]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	08db      	lsrs	r3, r3, #3
 80054b4:	f003 0303 	and.w	r3, r3, #3
 80054b8:	4a5a      	ldr	r2, [pc, #360]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80054ba:	fa22 f303 	lsr.w	r3, r2, r3
 80054be:	637b      	str	r3, [r7, #52]	@ 0x34
 80054c0:	e01e      	b.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 80054c2:	4b57      	ldr	r3, [pc, #348]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054ce:	d106      	bne.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 80054d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054d6:	d102      	bne.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 80054d8:	4b53      	ldr	r3, [pc, #332]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80054da:	637b      	str	r3, [r7, #52]	@ 0x34
 80054dc:	e010      	b.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 80054de:	4b50      	ldr	r3, [pc, #320]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054ea:	d106      	bne.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 80054ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ee:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80054f2:	d102      	bne.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 80054f4:	4b4d      	ldr	r3, [pc, #308]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80054f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80054f8:	e002      	b.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80054fe:	e186      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005500:	e185      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005502:	4b47      	ldr	r3, [pc, #284]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005508:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800550c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800550e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005510:	2b00      	cmp	r3, #0
 8005512:	d103      	bne.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005514:	f7fd f9c0 	bl	8002898 <HAL_RCC_GetPCLK2Freq>
 8005518:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800551a:	e178      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800551c:	4b40      	ldr	r3, [pc, #256]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005524:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005528:	d10b      	bne.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800552a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005530:	d107      	bne.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005532:	f107 0314 	add.w	r3, r7, #20
 8005536:	4618      	mov	r0, r3
 8005538:	f7fd fb46 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005540:	e045      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8005542:	4b37      	ldr	r3, [pc, #220]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800554a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800554e:	d10b      	bne.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8005550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005552:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005556:	d107      	bne.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005558:	f107 0308 	add.w	r3, r7, #8
 800555c:	4618      	mov	r0, r3
 800555e:	f7fd fc9f 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	637b      	str	r3, [r7, #52]	@ 0x34
 8005566:	e032      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8005568:	4b2d      	ldr	r3, [pc, #180]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b02      	cmp	r3, #2
 8005572:	d10d      	bne.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8005574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005576:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800557a:	d109      	bne.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800557c:	4b28      	ldr	r3, [pc, #160]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	08db      	lsrs	r3, r3, #3
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	4a27      	ldr	r2, [pc, #156]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8005588:	fa22 f303 	lsr.w	r3, r2, r3
 800558c:	637b      	str	r3, [r7, #52]	@ 0x34
 800558e:	e01e      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8005590:	4b23      	ldr	r3, [pc, #140]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800559c:	d106      	bne.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800559e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055a4:	d102      	bne.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 80055a6:	4b20      	ldr	r3, [pc, #128]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80055a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80055aa:	e010      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 80055ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055b8:	d106      	bne.n	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 80055ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055bc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80055c0:	d102      	bne.n	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 80055c2:	4b1a      	ldr	r3, [pc, #104]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80055c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80055c6:	e002      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80055cc:	e11f      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80055ce:	e11e      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80055d0:	4b13      	ldr	r3, [pc, #76]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80055d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80055dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d85f      	bhi.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 80055e2:	a201      	add	r2, pc, #4	@ (adr r2, 80055e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 80055e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e8:	080055f9 	.word	0x080055f9
 80055ec:	08005601 	.word	0x08005601
 80055f0:	08005611 	.word	0x08005611
 80055f4:	08005631 	.word	0x08005631
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 80055f8:	f7fd f91c 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 80055fc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80055fe:	e053      	b.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005600:	f107 0320 	add.w	r3, r7, #32
 8005604:	4618      	mov	r0, r3
 8005606:	f7fd f973 	bl	80028f0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800560e:	e04b      	b.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005610:	f107 0314 	add.w	r3, r7, #20
 8005614:	4618      	mov	r0, r3
 8005616:	f7fd fad7 	bl	8002bc8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800561e:	e043      	b.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8005620:	44020c00 	.word	0x44020c00
 8005624:	03d09000 	.word	0x03d09000
 8005628:	003d0900 	.word	0x003d0900
 800562c:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005630:	4b79      	ldr	r3, [pc, #484]	@ (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005632:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005636:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800563a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800563c:	4b76      	ldr	r3, [pc, #472]	@ (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b02      	cmp	r3, #2
 8005646:	d10c      	bne.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8005648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800564e:	4b72      	ldr	r3, [pc, #456]	@ (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	08db      	lsrs	r3, r3, #3
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	4a70      	ldr	r2, [pc, #448]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800565a:	fa22 f303 	lsr.w	r3, r2, r3
 800565e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005660:	e01e      	b.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005662:	4b6d      	ldr	r3, [pc, #436]	@ (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800566a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800566e:	d106      	bne.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8005670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005676:	d102      	bne.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005678:	4b69      	ldr	r3, [pc, #420]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800567a:	637b      	str	r3, [r7, #52]	@ 0x34
 800567c:	e010      	b.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800567e:	4b66      	ldr	r3, [pc, #408]	@ (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005686:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800568a:	d106      	bne.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800568c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800568e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005692:	d102      	bne.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005694:	4b63      	ldr	r3, [pc, #396]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8005696:	637b      	str	r3, [r7, #52]	@ 0x34
 8005698:	e002      	b.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800569e:	e003      	b.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 80056a0:	e002      	b.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80056a6:	bf00      	nop
          }
        }
        break;
 80056a8:	e0b1      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80056aa:	4b5b      	ldr	r3, [pc, #364]	@ (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80056ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80056b0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80056b4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80056b6:	4b58      	ldr	r3, [pc, #352]	@ (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80056b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d106      	bne.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 80056c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d103      	bne.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 80056ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80056d0:	e01f      	b.n	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80056d2:	4b51      	ldr	r3, [pc, #324]	@ (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80056d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056e0:	d106      	bne.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 80056e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e4:	2b40      	cmp	r3, #64	@ 0x40
 80056e6:	d103      	bne.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 80056e8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80056ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80056ee:	e010      	b.n	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80056f0:	4b49      	ldr	r3, [pc, #292]	@ (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056fc:	d106      	bne.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 80056fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005700:	2b80      	cmp	r3, #128	@ 0x80
 8005702:	d103      	bne.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8005704:	f248 0312 	movw	r3, #32786	@ 0x8012
 8005708:	637b      	str	r3, [r7, #52]	@ 0x34
 800570a:	e002      	b.n	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8005710:	e07d      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005712:	e07c      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005714:	4b40      	ldr	r3, [pc, #256]	@ (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005716:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800571a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800571e:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005720:	4b3d      	ldr	r3, [pc, #244]	@ (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005728:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800572c:	d105      	bne.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800572e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005730:	2b00      	cmp	r3, #0
 8005732:	d102      	bne.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8005734:	4b3c      	ldr	r3, [pc, #240]	@ (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8005736:	637b      	str	r3, [r7, #52]	@ 0x34
 8005738:	e031      	b.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800573a:	4b37      	ldr	r3, [pc, #220]	@ (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005742:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005746:	d10a      	bne.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8005748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574a:	2b10      	cmp	r3, #16
 800574c:	d107      	bne.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800574e:	f107 0320 	add.w	r3, r7, #32
 8005752:	4618      	mov	r0, r3
 8005754:	f7fd f8cc 	bl	80028f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575a:	637b      	str	r3, [r7, #52]	@ 0x34
 800575c:	e01f      	b.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800575e:	4b2e      	ldr	r3, [pc, #184]	@ (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005760:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b02      	cmp	r3, #2
 800576a:	d106      	bne.n	800577a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800576c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576e:	2b20      	cmp	r3, #32
 8005770:	d103      	bne.n	800577a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8005772:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005776:	637b      	str	r3, [r7, #52]	@ 0x34
 8005778:	e011      	b.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800577a:	4b27      	ldr	r3, [pc, #156]	@ (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800577c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005780:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005784:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005788:	d106      	bne.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800578a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578c:	2b30      	cmp	r3, #48	@ 0x30
 800578e:	d103      	bne.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8005790:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005794:	637b      	str	r3, [r7, #52]	@ 0x34
 8005796:	e002      	b.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800579c:	e037      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800579e:	e036      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80057a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80057a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057a6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80057aa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80057ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ae:	2b10      	cmp	r3, #16
 80057b0:	d107      	bne.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057b2:	f107 0320 	add.w	r3, r7, #32
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fd f89a 	bl	80028f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057be:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80057c0:	e025      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80057c2:	4b15      	ldr	r3, [pc, #84]	@ (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057ce:	d10a      	bne.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 80057d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d2:	2b20      	cmp	r3, #32
 80057d4:	d107      	bne.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057d6:	f107 0308 	add.w	r3, r7, #8
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fd fb60 	bl	8002ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80057e4:	e00f      	b.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80057e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057f2:	d105      	bne.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 80057f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f6:	2b30      	cmp	r3, #48	@ 0x30
 80057f8:	d102      	bne.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 80057fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80057fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80057fe:	e002      	b.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8005804:	e003      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005806:	e002      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8005808:	2300      	movs	r3, #0
 800580a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800580c:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800580e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005810:	4618      	mov	r0, r3
 8005812:	373c      	adds	r7, #60	@ 0x3c
 8005814:	46bd      	mov	sp, r7
 8005816:	bd90      	pop	{r4, r7, pc}
 8005818:	44020c00 	.word	0x44020c00
 800581c:	03d09000 	.word	0x03d09000
 8005820:	003d0900 	.word	0x003d0900
 8005824:	007a1200 	.word	0x007a1200
 8005828:	02dc6c00 	.word	0x02dc6c00

0800582c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e049      	b.n	80058d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d106      	bne.n	8005858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7fb f968 	bl	8000b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3304      	adds	r3, #4
 8005868:	4619      	mov	r1, r3
 800586a:	4610      	mov	r0, r2
 800586c:	f000 fc28 	bl	80060c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b082      	sub	sp, #8
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e049      	b.n	8005980 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d106      	bne.n	8005906 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f841 	bl	8005988 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2202      	movs	r2, #2
 800590a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3304      	adds	r3, #4
 8005916:	4619      	mov	r1, r3
 8005918:	4610      	mov	r0, r2
 800591a:	f000 fbd1 	bl	80060c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d109      	bne.n	80059c0 <HAL_TIM_PWM_Start+0x24>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	bf14      	ite	ne
 80059b8:	2301      	movne	r3, #1
 80059ba:	2300      	moveq	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	e03c      	b.n	8005a3a <HAL_TIM_PWM_Start+0x9e>
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d109      	bne.n	80059da <HAL_TIM_PWM_Start+0x3e>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	bf14      	ite	ne
 80059d2:	2301      	movne	r3, #1
 80059d4:	2300      	moveq	r3, #0
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	e02f      	b.n	8005a3a <HAL_TIM_PWM_Start+0x9e>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d109      	bne.n	80059f4 <HAL_TIM_PWM_Start+0x58>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	bf14      	ite	ne
 80059ec:	2301      	movne	r3, #1
 80059ee:	2300      	moveq	r3, #0
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	e022      	b.n	8005a3a <HAL_TIM_PWM_Start+0x9e>
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b0c      	cmp	r3, #12
 80059f8:	d109      	bne.n	8005a0e <HAL_TIM_PWM_Start+0x72>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	bf14      	ite	ne
 8005a06:	2301      	movne	r3, #1
 8005a08:	2300      	moveq	r3, #0
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	e015      	b.n	8005a3a <HAL_TIM_PWM_Start+0x9e>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b10      	cmp	r3, #16
 8005a12:	d109      	bne.n	8005a28 <HAL_TIM_PWM_Start+0x8c>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	bf14      	ite	ne
 8005a20:	2301      	movne	r3, #1
 8005a22:	2300      	moveq	r3, #0
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	e008      	b.n	8005a3a <HAL_TIM_PWM_Start+0x9e>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	bf14      	ite	ne
 8005a34:	2301      	movne	r3, #1
 8005a36:	2300      	moveq	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e0e2      	b.n	8005c08 <HAL_TIM_PWM_Start+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d104      	bne.n	8005a52 <HAL_TIM_PWM_Start+0xb6>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a50:	e023      	b.n	8005a9a <HAL_TIM_PWM_Start+0xfe>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d104      	bne.n	8005a62 <HAL_TIM_PWM_Start+0xc6>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a60:	e01b      	b.n	8005a9a <HAL_TIM_PWM_Start+0xfe>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d104      	bne.n	8005a72 <HAL_TIM_PWM_Start+0xd6>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a70:	e013      	b.n	8005a9a <HAL_TIM_PWM_Start+0xfe>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b0c      	cmp	r3, #12
 8005a76:	d104      	bne.n	8005a82 <HAL_TIM_PWM_Start+0xe6>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a80:	e00b      	b.n	8005a9a <HAL_TIM_PWM_Start+0xfe>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b10      	cmp	r3, #16
 8005a86:	d104      	bne.n	8005a92 <HAL_TIM_PWM_Start+0xf6>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a90:	e003      	b.n	8005a9a <HAL_TIM_PWM_Start+0xfe>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2202      	movs	r2, #2
 8005a96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	6839      	ldr	r1, [r7, #0]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f001 f8a8 	bl	8006bf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a58      	ldr	r2, [pc, #352]	@ (8005c10 <HAL_TIM_PWM_Start+0x274>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d02c      	beq.n	8005b0c <HAL_TIM_PWM_Start+0x170>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a57      	ldr	r2, [pc, #348]	@ (8005c14 <HAL_TIM_PWM_Start+0x278>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d027      	beq.n	8005b0c <HAL_TIM_PWM_Start+0x170>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a55      	ldr	r2, [pc, #340]	@ (8005c18 <HAL_TIM_PWM_Start+0x27c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d022      	beq.n	8005b0c <HAL_TIM_PWM_Start+0x170>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a54      	ldr	r2, [pc, #336]	@ (8005c1c <HAL_TIM_PWM_Start+0x280>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d01d      	beq.n	8005b0c <HAL_TIM_PWM_Start+0x170>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a52      	ldr	r2, [pc, #328]	@ (8005c20 <HAL_TIM_PWM_Start+0x284>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d018      	beq.n	8005b0c <HAL_TIM_PWM_Start+0x170>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a51      	ldr	r2, [pc, #324]	@ (8005c24 <HAL_TIM_PWM_Start+0x288>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d013      	beq.n	8005b0c <HAL_TIM_PWM_Start+0x170>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a4f      	ldr	r2, [pc, #316]	@ (8005c28 <HAL_TIM_PWM_Start+0x28c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d00e      	beq.n	8005b0c <HAL_TIM_PWM_Start+0x170>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a4e      	ldr	r2, [pc, #312]	@ (8005c2c <HAL_TIM_PWM_Start+0x290>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d009      	beq.n	8005b0c <HAL_TIM_PWM_Start+0x170>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a4c      	ldr	r2, [pc, #304]	@ (8005c30 <HAL_TIM_PWM_Start+0x294>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d004      	beq.n	8005b0c <HAL_TIM_PWM_Start+0x170>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a4b      	ldr	r2, [pc, #300]	@ (8005c34 <HAL_TIM_PWM_Start+0x298>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d101      	bne.n	8005b10 <HAL_TIM_PWM_Start+0x174>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e000      	b.n	8005b12 <HAL_TIM_PWM_Start+0x176>
 8005b10:	2300      	movs	r3, #0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d007      	beq.n	8005b26 <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a39      	ldr	r2, [pc, #228]	@ (8005c10 <HAL_TIM_PWM_Start+0x274>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d04a      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x22a>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a37      	ldr	r2, [pc, #220]	@ (8005c14 <HAL_TIM_PWM_Start+0x278>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d045      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x22a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b42:	d040      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x22a>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b4c:	d03b      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x22a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a39      	ldr	r2, [pc, #228]	@ (8005c38 <HAL_TIM_PWM_Start+0x29c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d036      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x22a>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a37      	ldr	r2, [pc, #220]	@ (8005c3c <HAL_TIM_PWM_Start+0x2a0>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d031      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x22a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a36      	ldr	r2, [pc, #216]	@ (8005c40 <HAL_TIM_PWM_Start+0x2a4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d02c      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x22a>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a34      	ldr	r2, [pc, #208]	@ (8005c44 <HAL_TIM_PWM_Start+0x2a8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d027      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x22a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a33      	ldr	r2, [pc, #204]	@ (8005c48 <HAL_TIM_PWM_Start+0x2ac>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d022      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x22a>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a31      	ldr	r2, [pc, #196]	@ (8005c4c <HAL_TIM_PWM_Start+0x2b0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d01d      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x22a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a22      	ldr	r2, [pc, #136]	@ (8005c18 <HAL_TIM_PWM_Start+0x27c>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d018      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x22a>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a20      	ldr	r2, [pc, #128]	@ (8005c1c <HAL_TIM_PWM_Start+0x280>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d013      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x22a>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a2b      	ldr	r2, [pc, #172]	@ (8005c50 <HAL_TIM_PWM_Start+0x2b4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d00e      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x22a>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a29      	ldr	r2, [pc, #164]	@ (8005c54 <HAL_TIM_PWM_Start+0x2b8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d009      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x22a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a1a      	ldr	r2, [pc, #104]	@ (8005c20 <HAL_TIM_PWM_Start+0x284>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d004      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x22a>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a18      	ldr	r2, [pc, #96]	@ (8005c24 <HAL_TIM_PWM_Start+0x288>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d115      	bne.n	8005bf2 <HAL_TIM_PWM_Start+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	4b22      	ldr	r3, [pc, #136]	@ (8005c58 <HAL_TIM_PWM_Start+0x2bc>)
 8005bce:	4013      	ands	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b06      	cmp	r3, #6
 8005bd6:	d015      	beq.n	8005c04 <HAL_TIM_PWM_Start+0x268>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bde:	d011      	beq.n	8005c04 <HAL_TIM_PWM_Start+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0201 	orr.w	r2, r2, #1
 8005bee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf0:	e008      	b.n	8005c04 <HAL_TIM_PWM_Start+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f042 0201 	orr.w	r2, r2, #1
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	e000      	b.n	8005c06 <HAL_TIM_PWM_Start+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c04:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	40012c00 	.word	0x40012c00
 8005c14:	50012c00 	.word	0x50012c00
 8005c18:	40013400 	.word	0x40013400
 8005c1c:	50013400 	.word	0x50013400
 8005c20:	40014000 	.word	0x40014000
 8005c24:	50014000 	.word	0x50014000
 8005c28:	40014400 	.word	0x40014400
 8005c2c:	50014400 	.word	0x50014400
 8005c30:	40014800 	.word	0x40014800
 8005c34:	50014800 	.word	0x50014800
 8005c38:	40000400 	.word	0x40000400
 8005c3c:	50000400 	.word	0x50000400
 8005c40:	40000800 	.word	0x40000800
 8005c44:	50000800 	.word	0x50000800
 8005c48:	40000c00 	.word	0x40000c00
 8005c4c:	50000c00 	.word	0x50000c00
 8005c50:	40001800 	.word	0x40001800
 8005c54:	50001800 	.word	0x50001800
 8005c58:	00010007 	.word	0x00010007

08005c5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d101      	bne.n	8005c7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c76:	2302      	movs	r3, #2
 8005c78:	e0ff      	b.n	8005e7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b14      	cmp	r3, #20
 8005c86:	f200 80f0 	bhi.w	8005e6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c90:	08005ce5 	.word	0x08005ce5
 8005c94:	08005e6b 	.word	0x08005e6b
 8005c98:	08005e6b 	.word	0x08005e6b
 8005c9c:	08005e6b 	.word	0x08005e6b
 8005ca0:	08005d25 	.word	0x08005d25
 8005ca4:	08005e6b 	.word	0x08005e6b
 8005ca8:	08005e6b 	.word	0x08005e6b
 8005cac:	08005e6b 	.word	0x08005e6b
 8005cb0:	08005d67 	.word	0x08005d67
 8005cb4:	08005e6b 	.word	0x08005e6b
 8005cb8:	08005e6b 	.word	0x08005e6b
 8005cbc:	08005e6b 	.word	0x08005e6b
 8005cc0:	08005da7 	.word	0x08005da7
 8005cc4:	08005e6b 	.word	0x08005e6b
 8005cc8:	08005e6b 	.word	0x08005e6b
 8005ccc:	08005e6b 	.word	0x08005e6b
 8005cd0:	08005de9 	.word	0x08005de9
 8005cd4:	08005e6b 	.word	0x08005e6b
 8005cd8:	08005e6b 	.word	0x08005e6b
 8005cdc:	08005e6b 	.word	0x08005e6b
 8005ce0:	08005e29 	.word	0x08005e29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68b9      	ldr	r1, [r7, #8]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fb12 	bl	8006314 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699a      	ldr	r2, [r3, #24]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0208 	orr.w	r2, r2, #8
 8005cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699a      	ldr	r2, [r3, #24]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0204 	bic.w	r2, r2, #4
 8005d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6999      	ldr	r1, [r3, #24]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	619a      	str	r2, [r3, #24]
      break;
 8005d22:	e0a5      	b.n	8005e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68b9      	ldr	r1, [r7, #8]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 fbb4 	bl	8006498 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	699a      	ldr	r2, [r3, #24]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	699a      	ldr	r2, [r3, #24]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6999      	ldr	r1, [r3, #24]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	021a      	lsls	r2, r3, #8
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	619a      	str	r2, [r3, #24]
      break;
 8005d64:	e084      	b.n	8005e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68b9      	ldr	r1, [r7, #8]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 fc43 	bl	80065f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	69da      	ldr	r2, [r3, #28]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f042 0208 	orr.w	r2, r2, #8
 8005d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69da      	ldr	r2, [r3, #28]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0204 	bic.w	r2, r2, #4
 8005d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	69d9      	ldr	r1, [r3, #28]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	691a      	ldr	r2, [r3, #16]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	61da      	str	r2, [r3, #28]
      break;
 8005da4:	e064      	b.n	8005e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68b9      	ldr	r1, [r7, #8]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 fcd1 	bl	8006754 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	69da      	ldr	r2, [r3, #28]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	69da      	ldr	r2, [r3, #28]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69d9      	ldr	r1, [r3, #28]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	021a      	lsls	r2, r3, #8
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	61da      	str	r2, [r3, #28]
      break;
 8005de6:	e043      	b.n	8005e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68b9      	ldr	r1, [r7, #8]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 fd60 	bl	80068b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f042 0208 	orr.w	r2, r2, #8
 8005e02:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0204 	bic.w	r2, r2, #4
 8005e12:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	691a      	ldr	r2, [r3, #16]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005e26:	e023      	b.n	8005e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68b9      	ldr	r1, [r7, #8]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 fdc2 	bl	80069b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e42:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e52:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	021a      	lsls	r2, r3, #8
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005e68:	e002      	b.n	8005e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop

08005e84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <HAL_TIM_ConfigClockSource+0x1c>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e0fe      	b.n	800609e <HAL_TIM_ConfigClockSource+0x21a>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005ebe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005eca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005edc:	f000 80c9 	beq.w	8006072 <HAL_TIM_ConfigClockSource+0x1ee>
 8005ee0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ee4:	f200 80ce 	bhi.w	8006084 <HAL_TIM_ConfigClockSource+0x200>
 8005ee8:	4a6f      	ldr	r2, [pc, #444]	@ (80060a8 <HAL_TIM_ConfigClockSource+0x224>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	f000 80c1 	beq.w	8006072 <HAL_TIM_ConfigClockSource+0x1ee>
 8005ef0:	4a6d      	ldr	r2, [pc, #436]	@ (80060a8 <HAL_TIM_ConfigClockSource+0x224>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	f200 80c6 	bhi.w	8006084 <HAL_TIM_ConfigClockSource+0x200>
 8005ef8:	4a6c      	ldr	r2, [pc, #432]	@ (80060ac <HAL_TIM_ConfigClockSource+0x228>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	f000 80b9 	beq.w	8006072 <HAL_TIM_ConfigClockSource+0x1ee>
 8005f00:	4a6a      	ldr	r2, [pc, #424]	@ (80060ac <HAL_TIM_ConfigClockSource+0x228>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	f200 80be 	bhi.w	8006084 <HAL_TIM_ConfigClockSource+0x200>
 8005f08:	4a69      	ldr	r2, [pc, #420]	@ (80060b0 <HAL_TIM_ConfigClockSource+0x22c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	f000 80b1 	beq.w	8006072 <HAL_TIM_ConfigClockSource+0x1ee>
 8005f10:	4a67      	ldr	r2, [pc, #412]	@ (80060b0 <HAL_TIM_ConfigClockSource+0x22c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	f200 80b6 	bhi.w	8006084 <HAL_TIM_ConfigClockSource+0x200>
 8005f18:	4a66      	ldr	r2, [pc, #408]	@ (80060b4 <HAL_TIM_ConfigClockSource+0x230>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	f000 80a9 	beq.w	8006072 <HAL_TIM_ConfigClockSource+0x1ee>
 8005f20:	4a64      	ldr	r2, [pc, #400]	@ (80060b4 <HAL_TIM_ConfigClockSource+0x230>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	f200 80ae 	bhi.w	8006084 <HAL_TIM_ConfigClockSource+0x200>
 8005f28:	4a63      	ldr	r2, [pc, #396]	@ (80060b8 <HAL_TIM_ConfigClockSource+0x234>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	f000 80a1 	beq.w	8006072 <HAL_TIM_ConfigClockSource+0x1ee>
 8005f30:	4a61      	ldr	r2, [pc, #388]	@ (80060b8 <HAL_TIM_ConfigClockSource+0x234>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	f200 80a6 	bhi.w	8006084 <HAL_TIM_ConfigClockSource+0x200>
 8005f38:	4a60      	ldr	r2, [pc, #384]	@ (80060bc <HAL_TIM_ConfigClockSource+0x238>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	f000 8099 	beq.w	8006072 <HAL_TIM_ConfigClockSource+0x1ee>
 8005f40:	4a5e      	ldr	r2, [pc, #376]	@ (80060bc <HAL_TIM_ConfigClockSource+0x238>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	f200 809e 	bhi.w	8006084 <HAL_TIM_ConfigClockSource+0x200>
 8005f48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f4c:	f000 8091 	beq.w	8006072 <HAL_TIM_ConfigClockSource+0x1ee>
 8005f50:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f54:	f200 8096 	bhi.w	8006084 <HAL_TIM_ConfigClockSource+0x200>
 8005f58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f5c:	f000 8089 	beq.w	8006072 <HAL_TIM_ConfigClockSource+0x1ee>
 8005f60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f64:	f200 808e 	bhi.w	8006084 <HAL_TIM_ConfigClockSource+0x200>
 8005f68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f6c:	d03e      	beq.n	8005fec <HAL_TIM_ConfigClockSource+0x168>
 8005f6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f72:	f200 8087 	bhi.w	8006084 <HAL_TIM_ConfigClockSource+0x200>
 8005f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f7a:	f000 8086 	beq.w	800608a <HAL_TIM_ConfigClockSource+0x206>
 8005f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f82:	d87f      	bhi.n	8006084 <HAL_TIM_ConfigClockSource+0x200>
 8005f84:	2b70      	cmp	r3, #112	@ 0x70
 8005f86:	d01a      	beq.n	8005fbe <HAL_TIM_ConfigClockSource+0x13a>
 8005f88:	2b70      	cmp	r3, #112	@ 0x70
 8005f8a:	d87b      	bhi.n	8006084 <HAL_TIM_ConfigClockSource+0x200>
 8005f8c:	2b60      	cmp	r3, #96	@ 0x60
 8005f8e:	d050      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f90:	2b60      	cmp	r3, #96	@ 0x60
 8005f92:	d877      	bhi.n	8006084 <HAL_TIM_ConfigClockSource+0x200>
 8005f94:	2b50      	cmp	r3, #80	@ 0x50
 8005f96:	d03c      	beq.n	8006012 <HAL_TIM_ConfigClockSource+0x18e>
 8005f98:	2b50      	cmp	r3, #80	@ 0x50
 8005f9a:	d873      	bhi.n	8006084 <HAL_TIM_ConfigClockSource+0x200>
 8005f9c:	2b40      	cmp	r3, #64	@ 0x40
 8005f9e:	d058      	beq.n	8006052 <HAL_TIM_ConfigClockSource+0x1ce>
 8005fa0:	2b40      	cmp	r3, #64	@ 0x40
 8005fa2:	d86f      	bhi.n	8006084 <HAL_TIM_ConfigClockSource+0x200>
 8005fa4:	2b30      	cmp	r3, #48	@ 0x30
 8005fa6:	d064      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x1ee>
 8005fa8:	2b30      	cmp	r3, #48	@ 0x30
 8005faa:	d86b      	bhi.n	8006084 <HAL_TIM_ConfigClockSource+0x200>
 8005fac:	2b20      	cmp	r3, #32
 8005fae:	d060      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x1ee>
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	d867      	bhi.n	8006084 <HAL_TIM_ConfigClockSource+0x200>
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d05c      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x1ee>
 8005fb8:	2b10      	cmp	r3, #16
 8005fba:	d05a      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x1ee>
 8005fbc:	e062      	b.n	8006084 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fce:	f000 fdf3 	bl	8006bb8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fe0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	609a      	str	r2, [r3, #8]
      break;
 8005fea:	e04f      	b.n	800608c <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ffc:	f000 fddc 	bl	8006bb8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689a      	ldr	r2, [r3, #8]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800600e:	609a      	str	r2, [r3, #8]
      break;
 8006010:	e03c      	b.n	800608c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800601e:	461a      	mov	r2, r3
 8006020:	f000 fd4e 	bl	8006ac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2150      	movs	r1, #80	@ 0x50
 800602a:	4618      	mov	r0, r3
 800602c:	f000 fda7 	bl	8006b7e <TIM_ITRx_SetConfig>
      break;
 8006030:	e02c      	b.n	800608c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800603e:	461a      	mov	r2, r3
 8006040:	f000 fd6d 	bl	8006b1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2160      	movs	r1, #96	@ 0x60
 800604a:	4618      	mov	r0, r3
 800604c:	f000 fd97 	bl	8006b7e <TIM_ITRx_SetConfig>
      break;
 8006050:	e01c      	b.n	800608c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800605e:	461a      	mov	r2, r3
 8006060:	f000 fd2e 	bl	8006ac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2140      	movs	r1, #64	@ 0x40
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fd87 	bl	8006b7e <TIM_ITRx_SetConfig>
      break;
 8006070:	e00c      	b.n	800608c <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4619      	mov	r1, r3
 800607c:	4610      	mov	r0, r2
 800607e:	f000 fd7e 	bl	8006b7e <TIM_ITRx_SetConfig>
      break;
 8006082:	e003      	b.n	800608c <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	73fb      	strb	r3, [r7, #15]
      break;
 8006088:	e000      	b.n	800608c <HAL_TIM_ConfigClockSource+0x208>
      break;
 800608a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800609c:	7bfb      	ldrb	r3, [r7, #15]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	00100070 	.word	0x00100070
 80060ac:	00100060 	.word	0x00100060
 80060b0:	00100050 	.word	0x00100050
 80060b4:	00100040 	.word	0x00100040
 80060b8:	00100030 	.word	0x00100030
 80060bc:	00100020 	.word	0x00100020

080060c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a7a      	ldr	r2, [pc, #488]	@ (80062bc <TIM_Base_SetConfig+0x1fc>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d02b      	beq.n	8006130 <TIM_Base_SetConfig+0x70>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a79      	ldr	r2, [pc, #484]	@ (80062c0 <TIM_Base_SetConfig+0x200>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d027      	beq.n	8006130 <TIM_Base_SetConfig+0x70>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060e6:	d023      	beq.n	8006130 <TIM_Base_SetConfig+0x70>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060ee:	d01f      	beq.n	8006130 <TIM_Base_SetConfig+0x70>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a74      	ldr	r2, [pc, #464]	@ (80062c4 <TIM_Base_SetConfig+0x204>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d01b      	beq.n	8006130 <TIM_Base_SetConfig+0x70>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a73      	ldr	r2, [pc, #460]	@ (80062c8 <TIM_Base_SetConfig+0x208>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d017      	beq.n	8006130 <TIM_Base_SetConfig+0x70>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a72      	ldr	r2, [pc, #456]	@ (80062cc <TIM_Base_SetConfig+0x20c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d013      	beq.n	8006130 <TIM_Base_SetConfig+0x70>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a71      	ldr	r2, [pc, #452]	@ (80062d0 <TIM_Base_SetConfig+0x210>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d00f      	beq.n	8006130 <TIM_Base_SetConfig+0x70>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a70      	ldr	r2, [pc, #448]	@ (80062d4 <TIM_Base_SetConfig+0x214>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d00b      	beq.n	8006130 <TIM_Base_SetConfig+0x70>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a6f      	ldr	r2, [pc, #444]	@ (80062d8 <TIM_Base_SetConfig+0x218>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d007      	beq.n	8006130 <TIM_Base_SetConfig+0x70>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a6e      	ldr	r2, [pc, #440]	@ (80062dc <TIM_Base_SetConfig+0x21c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d003      	beq.n	8006130 <TIM_Base_SetConfig+0x70>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a6d      	ldr	r2, [pc, #436]	@ (80062e0 <TIM_Base_SetConfig+0x220>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d108      	bne.n	8006142 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	4313      	orrs	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a5d      	ldr	r2, [pc, #372]	@ (80062bc <TIM_Base_SetConfig+0x1fc>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d05b      	beq.n	8006202 <TIM_Base_SetConfig+0x142>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a5c      	ldr	r2, [pc, #368]	@ (80062c0 <TIM_Base_SetConfig+0x200>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d057      	beq.n	8006202 <TIM_Base_SetConfig+0x142>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006158:	d053      	beq.n	8006202 <TIM_Base_SetConfig+0x142>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006160:	d04f      	beq.n	8006202 <TIM_Base_SetConfig+0x142>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a57      	ldr	r2, [pc, #348]	@ (80062c4 <TIM_Base_SetConfig+0x204>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d04b      	beq.n	8006202 <TIM_Base_SetConfig+0x142>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a56      	ldr	r2, [pc, #344]	@ (80062c8 <TIM_Base_SetConfig+0x208>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d047      	beq.n	8006202 <TIM_Base_SetConfig+0x142>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a55      	ldr	r2, [pc, #340]	@ (80062cc <TIM_Base_SetConfig+0x20c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d043      	beq.n	8006202 <TIM_Base_SetConfig+0x142>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a54      	ldr	r2, [pc, #336]	@ (80062d0 <TIM_Base_SetConfig+0x210>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d03f      	beq.n	8006202 <TIM_Base_SetConfig+0x142>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a53      	ldr	r2, [pc, #332]	@ (80062d4 <TIM_Base_SetConfig+0x214>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d03b      	beq.n	8006202 <TIM_Base_SetConfig+0x142>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a52      	ldr	r2, [pc, #328]	@ (80062d8 <TIM_Base_SetConfig+0x218>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d037      	beq.n	8006202 <TIM_Base_SetConfig+0x142>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a51      	ldr	r2, [pc, #324]	@ (80062dc <TIM_Base_SetConfig+0x21c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d033      	beq.n	8006202 <TIM_Base_SetConfig+0x142>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a50      	ldr	r2, [pc, #320]	@ (80062e0 <TIM_Base_SetConfig+0x220>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d02f      	beq.n	8006202 <TIM_Base_SetConfig+0x142>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a4f      	ldr	r2, [pc, #316]	@ (80062e4 <TIM_Base_SetConfig+0x224>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d02b      	beq.n	8006202 <TIM_Base_SetConfig+0x142>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a4e      	ldr	r2, [pc, #312]	@ (80062e8 <TIM_Base_SetConfig+0x228>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d027      	beq.n	8006202 <TIM_Base_SetConfig+0x142>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a4d      	ldr	r2, [pc, #308]	@ (80062ec <TIM_Base_SetConfig+0x22c>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d023      	beq.n	8006202 <TIM_Base_SetConfig+0x142>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a4c      	ldr	r2, [pc, #304]	@ (80062f0 <TIM_Base_SetConfig+0x230>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d01f      	beq.n	8006202 <TIM_Base_SetConfig+0x142>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a4b      	ldr	r2, [pc, #300]	@ (80062f4 <TIM_Base_SetConfig+0x234>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d01b      	beq.n	8006202 <TIM_Base_SetConfig+0x142>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a4a      	ldr	r2, [pc, #296]	@ (80062f8 <TIM_Base_SetConfig+0x238>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d017      	beq.n	8006202 <TIM_Base_SetConfig+0x142>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a49      	ldr	r2, [pc, #292]	@ (80062fc <TIM_Base_SetConfig+0x23c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d013      	beq.n	8006202 <TIM_Base_SetConfig+0x142>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a48      	ldr	r2, [pc, #288]	@ (8006300 <TIM_Base_SetConfig+0x240>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00f      	beq.n	8006202 <TIM_Base_SetConfig+0x142>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a47      	ldr	r2, [pc, #284]	@ (8006304 <TIM_Base_SetConfig+0x244>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00b      	beq.n	8006202 <TIM_Base_SetConfig+0x142>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a46      	ldr	r2, [pc, #280]	@ (8006308 <TIM_Base_SetConfig+0x248>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d007      	beq.n	8006202 <TIM_Base_SetConfig+0x142>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a45      	ldr	r2, [pc, #276]	@ (800630c <TIM_Base_SetConfig+0x24c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d003      	beq.n	8006202 <TIM_Base_SetConfig+0x142>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a44      	ldr	r2, [pc, #272]	@ (8006310 <TIM_Base_SetConfig+0x250>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d108      	bne.n	8006214 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4313      	orrs	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a20      	ldr	r2, [pc, #128]	@ (80062bc <TIM_Base_SetConfig+0x1fc>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d023      	beq.n	8006288 <TIM_Base_SetConfig+0x1c8>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a1f      	ldr	r2, [pc, #124]	@ (80062c0 <TIM_Base_SetConfig+0x200>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d01f      	beq.n	8006288 <TIM_Base_SetConfig+0x1c8>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a24      	ldr	r2, [pc, #144]	@ (80062dc <TIM_Base_SetConfig+0x21c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d01b      	beq.n	8006288 <TIM_Base_SetConfig+0x1c8>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a23      	ldr	r2, [pc, #140]	@ (80062e0 <TIM_Base_SetConfig+0x220>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d017      	beq.n	8006288 <TIM_Base_SetConfig+0x1c8>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a28      	ldr	r2, [pc, #160]	@ (80062fc <TIM_Base_SetConfig+0x23c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d013      	beq.n	8006288 <TIM_Base_SetConfig+0x1c8>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a27      	ldr	r2, [pc, #156]	@ (8006300 <TIM_Base_SetConfig+0x240>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d00f      	beq.n	8006288 <TIM_Base_SetConfig+0x1c8>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a26      	ldr	r2, [pc, #152]	@ (8006304 <TIM_Base_SetConfig+0x244>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d00b      	beq.n	8006288 <TIM_Base_SetConfig+0x1c8>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a25      	ldr	r2, [pc, #148]	@ (8006308 <TIM_Base_SetConfig+0x248>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d007      	beq.n	8006288 <TIM_Base_SetConfig+0x1c8>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a24      	ldr	r2, [pc, #144]	@ (800630c <TIM_Base_SetConfig+0x24c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d003      	beq.n	8006288 <TIM_Base_SetConfig+0x1c8>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a23      	ldr	r2, [pc, #140]	@ (8006310 <TIM_Base_SetConfig+0x250>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d103      	bne.n	8006290 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	691a      	ldr	r2, [r3, #16]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d105      	bne.n	80062ae <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	f023 0201 	bic.w	r2, r3, #1
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	611a      	str	r2, [r3, #16]
  }
}
 80062ae:	bf00      	nop
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	40012c00 	.word	0x40012c00
 80062c0:	50012c00 	.word	0x50012c00
 80062c4:	40000400 	.word	0x40000400
 80062c8:	50000400 	.word	0x50000400
 80062cc:	40000800 	.word	0x40000800
 80062d0:	50000800 	.word	0x50000800
 80062d4:	40000c00 	.word	0x40000c00
 80062d8:	50000c00 	.word	0x50000c00
 80062dc:	40013400 	.word	0x40013400
 80062e0:	50013400 	.word	0x50013400
 80062e4:	40001800 	.word	0x40001800
 80062e8:	50001800 	.word	0x50001800
 80062ec:	40001c00 	.word	0x40001c00
 80062f0:	50001c00 	.word	0x50001c00
 80062f4:	40002000 	.word	0x40002000
 80062f8:	50002000 	.word	0x50002000
 80062fc:	40014000 	.word	0x40014000
 8006300:	50014000 	.word	0x50014000
 8006304:	40014400 	.word	0x40014400
 8006308:	50014400 	.word	0x50014400
 800630c:	40014800 	.word	0x40014800
 8006310:	50014800 	.word	0x50014800

08006314 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006314:	b480      	push	{r7}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	f023 0201 	bic.w	r2, r3, #1
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0303 	bic.w	r3, r3, #3
 800634e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	4313      	orrs	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f023 0302 	bic.w	r3, r3, #2
 8006360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	4313      	orrs	r3, r2
 800636a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a40      	ldr	r2, [pc, #256]	@ (8006470 <TIM_OC1_SetConfig+0x15c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d023      	beq.n	80063bc <TIM_OC1_SetConfig+0xa8>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a3f      	ldr	r2, [pc, #252]	@ (8006474 <TIM_OC1_SetConfig+0x160>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d01f      	beq.n	80063bc <TIM_OC1_SetConfig+0xa8>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a3e      	ldr	r2, [pc, #248]	@ (8006478 <TIM_OC1_SetConfig+0x164>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d01b      	beq.n	80063bc <TIM_OC1_SetConfig+0xa8>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a3d      	ldr	r2, [pc, #244]	@ (800647c <TIM_OC1_SetConfig+0x168>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d017      	beq.n	80063bc <TIM_OC1_SetConfig+0xa8>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a3c      	ldr	r2, [pc, #240]	@ (8006480 <TIM_OC1_SetConfig+0x16c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d013      	beq.n	80063bc <TIM_OC1_SetConfig+0xa8>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a3b      	ldr	r2, [pc, #236]	@ (8006484 <TIM_OC1_SetConfig+0x170>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d00f      	beq.n	80063bc <TIM_OC1_SetConfig+0xa8>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a3a      	ldr	r2, [pc, #232]	@ (8006488 <TIM_OC1_SetConfig+0x174>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d00b      	beq.n	80063bc <TIM_OC1_SetConfig+0xa8>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a39      	ldr	r2, [pc, #228]	@ (800648c <TIM_OC1_SetConfig+0x178>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d007      	beq.n	80063bc <TIM_OC1_SetConfig+0xa8>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a38      	ldr	r2, [pc, #224]	@ (8006490 <TIM_OC1_SetConfig+0x17c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d003      	beq.n	80063bc <TIM_OC1_SetConfig+0xa8>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a37      	ldr	r2, [pc, #220]	@ (8006494 <TIM_OC1_SetConfig+0x180>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d10c      	bne.n	80063d6 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f023 0308 	bic.w	r3, r3, #8
 80063c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f023 0304 	bic.w	r3, r3, #4
 80063d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a25      	ldr	r2, [pc, #148]	@ (8006470 <TIM_OC1_SetConfig+0x15c>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d023      	beq.n	8006426 <TIM_OC1_SetConfig+0x112>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a24      	ldr	r2, [pc, #144]	@ (8006474 <TIM_OC1_SetConfig+0x160>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d01f      	beq.n	8006426 <TIM_OC1_SetConfig+0x112>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a23      	ldr	r2, [pc, #140]	@ (8006478 <TIM_OC1_SetConfig+0x164>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d01b      	beq.n	8006426 <TIM_OC1_SetConfig+0x112>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a22      	ldr	r2, [pc, #136]	@ (800647c <TIM_OC1_SetConfig+0x168>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d017      	beq.n	8006426 <TIM_OC1_SetConfig+0x112>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a21      	ldr	r2, [pc, #132]	@ (8006480 <TIM_OC1_SetConfig+0x16c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d013      	beq.n	8006426 <TIM_OC1_SetConfig+0x112>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a20      	ldr	r2, [pc, #128]	@ (8006484 <TIM_OC1_SetConfig+0x170>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00f      	beq.n	8006426 <TIM_OC1_SetConfig+0x112>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a1f      	ldr	r2, [pc, #124]	@ (8006488 <TIM_OC1_SetConfig+0x174>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00b      	beq.n	8006426 <TIM_OC1_SetConfig+0x112>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a1e      	ldr	r2, [pc, #120]	@ (800648c <TIM_OC1_SetConfig+0x178>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d007      	beq.n	8006426 <TIM_OC1_SetConfig+0x112>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a1d      	ldr	r2, [pc, #116]	@ (8006490 <TIM_OC1_SetConfig+0x17c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d003      	beq.n	8006426 <TIM_OC1_SetConfig+0x112>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a1c      	ldr	r2, [pc, #112]	@ (8006494 <TIM_OC1_SetConfig+0x180>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d111      	bne.n	800644a <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800642c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	4313      	orrs	r3, r2
 800643e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	4313      	orrs	r3, r2
 8006448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	621a      	str	r2, [r3, #32]
}
 8006464:	bf00      	nop
 8006466:	371c      	adds	r7, #28
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	40012c00 	.word	0x40012c00
 8006474:	50012c00 	.word	0x50012c00
 8006478:	40013400 	.word	0x40013400
 800647c:	50013400 	.word	0x50013400
 8006480:	40014000 	.word	0x40014000
 8006484:	50014000 	.word	0x50014000
 8006488:	40014400 	.word	0x40014400
 800648c:	50014400 	.word	0x50014400
 8006490:	40014800 	.word	0x40014800
 8006494:	50014800 	.word	0x50014800

08006498 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006498:	b480      	push	{r7}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	f023 0210 	bic.w	r2, r3, #16
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	021b      	lsls	r3, r3, #8
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f023 0320 	bic.w	r3, r3, #32
 80064e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	011b      	lsls	r3, r3, #4
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a36      	ldr	r2, [pc, #216]	@ (80065d0 <TIM_OC2_SetConfig+0x138>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d00b      	beq.n	8006514 <TIM_OC2_SetConfig+0x7c>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a35      	ldr	r2, [pc, #212]	@ (80065d4 <TIM_OC2_SetConfig+0x13c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d007      	beq.n	8006514 <TIM_OC2_SetConfig+0x7c>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a34      	ldr	r2, [pc, #208]	@ (80065d8 <TIM_OC2_SetConfig+0x140>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d003      	beq.n	8006514 <TIM_OC2_SetConfig+0x7c>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a33      	ldr	r2, [pc, #204]	@ (80065dc <TIM_OC2_SetConfig+0x144>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d10d      	bne.n	8006530 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800651a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	4313      	orrs	r3, r2
 8006526:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800652e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a27      	ldr	r2, [pc, #156]	@ (80065d0 <TIM_OC2_SetConfig+0x138>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d023      	beq.n	8006580 <TIM_OC2_SetConfig+0xe8>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a26      	ldr	r2, [pc, #152]	@ (80065d4 <TIM_OC2_SetConfig+0x13c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d01f      	beq.n	8006580 <TIM_OC2_SetConfig+0xe8>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a25      	ldr	r2, [pc, #148]	@ (80065d8 <TIM_OC2_SetConfig+0x140>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d01b      	beq.n	8006580 <TIM_OC2_SetConfig+0xe8>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a24      	ldr	r2, [pc, #144]	@ (80065dc <TIM_OC2_SetConfig+0x144>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d017      	beq.n	8006580 <TIM_OC2_SetConfig+0xe8>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a23      	ldr	r2, [pc, #140]	@ (80065e0 <TIM_OC2_SetConfig+0x148>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d013      	beq.n	8006580 <TIM_OC2_SetConfig+0xe8>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a22      	ldr	r2, [pc, #136]	@ (80065e4 <TIM_OC2_SetConfig+0x14c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d00f      	beq.n	8006580 <TIM_OC2_SetConfig+0xe8>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a21      	ldr	r2, [pc, #132]	@ (80065e8 <TIM_OC2_SetConfig+0x150>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d00b      	beq.n	8006580 <TIM_OC2_SetConfig+0xe8>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a20      	ldr	r2, [pc, #128]	@ (80065ec <TIM_OC2_SetConfig+0x154>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d007      	beq.n	8006580 <TIM_OC2_SetConfig+0xe8>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a1f      	ldr	r2, [pc, #124]	@ (80065f0 <TIM_OC2_SetConfig+0x158>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d003      	beq.n	8006580 <TIM_OC2_SetConfig+0xe8>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a1e      	ldr	r2, [pc, #120]	@ (80065f4 <TIM_OC2_SetConfig+0x15c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d113      	bne.n	80065a8 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006586:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800658e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	4313      	orrs	r3, r2
 800659a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	621a      	str	r2, [r3, #32]
}
 80065c2:	bf00      	nop
 80065c4:	371c      	adds	r7, #28
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	40012c00 	.word	0x40012c00
 80065d4:	50012c00 	.word	0x50012c00
 80065d8:	40013400 	.word	0x40013400
 80065dc:	50013400 	.word	0x50013400
 80065e0:	40014000 	.word	0x40014000
 80065e4:	50014000 	.word	0x50014000
 80065e8:	40014400 	.word	0x40014400
 80065ec:	50014400 	.word	0x50014400
 80065f0:	40014800 	.word	0x40014800
 80065f4:	50014800 	.word	0x50014800

080065f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800662a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f023 0303 	bic.w	r3, r3, #3
 8006632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	021b      	lsls	r3, r3, #8
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	4313      	orrs	r3, r2
 8006650:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a35      	ldr	r2, [pc, #212]	@ (800672c <TIM_OC3_SetConfig+0x134>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d00b      	beq.n	8006672 <TIM_OC3_SetConfig+0x7a>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a34      	ldr	r2, [pc, #208]	@ (8006730 <TIM_OC3_SetConfig+0x138>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d007      	beq.n	8006672 <TIM_OC3_SetConfig+0x7a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a33      	ldr	r2, [pc, #204]	@ (8006734 <TIM_OC3_SetConfig+0x13c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d003      	beq.n	8006672 <TIM_OC3_SetConfig+0x7a>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a32      	ldr	r2, [pc, #200]	@ (8006738 <TIM_OC3_SetConfig+0x140>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d10d      	bne.n	800668e <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006678:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	021b      	lsls	r3, r3, #8
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	4313      	orrs	r3, r2
 8006684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800668c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a26      	ldr	r2, [pc, #152]	@ (800672c <TIM_OC3_SetConfig+0x134>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d023      	beq.n	80066de <TIM_OC3_SetConfig+0xe6>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a25      	ldr	r2, [pc, #148]	@ (8006730 <TIM_OC3_SetConfig+0x138>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d01f      	beq.n	80066de <TIM_OC3_SetConfig+0xe6>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a24      	ldr	r2, [pc, #144]	@ (8006734 <TIM_OC3_SetConfig+0x13c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d01b      	beq.n	80066de <TIM_OC3_SetConfig+0xe6>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a23      	ldr	r2, [pc, #140]	@ (8006738 <TIM_OC3_SetConfig+0x140>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d017      	beq.n	80066de <TIM_OC3_SetConfig+0xe6>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a22      	ldr	r2, [pc, #136]	@ (800673c <TIM_OC3_SetConfig+0x144>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d013      	beq.n	80066de <TIM_OC3_SetConfig+0xe6>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a21      	ldr	r2, [pc, #132]	@ (8006740 <TIM_OC3_SetConfig+0x148>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d00f      	beq.n	80066de <TIM_OC3_SetConfig+0xe6>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a20      	ldr	r2, [pc, #128]	@ (8006744 <TIM_OC3_SetConfig+0x14c>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d00b      	beq.n	80066de <TIM_OC3_SetConfig+0xe6>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a1f      	ldr	r2, [pc, #124]	@ (8006748 <TIM_OC3_SetConfig+0x150>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d007      	beq.n	80066de <TIM_OC3_SetConfig+0xe6>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a1e      	ldr	r2, [pc, #120]	@ (800674c <TIM_OC3_SetConfig+0x154>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d003      	beq.n	80066de <TIM_OC3_SetConfig+0xe6>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006750 <TIM_OC3_SetConfig+0x158>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d113      	bne.n	8006706 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	011b      	lsls	r3, r3, #4
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	4313      	orrs	r3, r2
 8006704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	621a      	str	r2, [r3, #32]
}
 8006720:	bf00      	nop
 8006722:	371c      	adds	r7, #28
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	40012c00 	.word	0x40012c00
 8006730:	50012c00 	.word	0x50012c00
 8006734:	40013400 	.word	0x40013400
 8006738:	50013400 	.word	0x50013400
 800673c:	40014000 	.word	0x40014000
 8006740:	50014000 	.word	0x50014000
 8006744:	40014400 	.word	0x40014400
 8006748:	50014400 	.word	0x50014400
 800674c:	40014800 	.word	0x40014800
 8006750:	50014800 	.word	0x50014800

08006754 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006782:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800678e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	021b      	lsls	r3, r3, #8
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	4313      	orrs	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	031b      	lsls	r3, r3, #12
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a36      	ldr	r2, [pc, #216]	@ (800688c <TIM_OC4_SetConfig+0x138>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d00b      	beq.n	80067d0 <TIM_OC4_SetConfig+0x7c>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a35      	ldr	r2, [pc, #212]	@ (8006890 <TIM_OC4_SetConfig+0x13c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d007      	beq.n	80067d0 <TIM_OC4_SetConfig+0x7c>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a34      	ldr	r2, [pc, #208]	@ (8006894 <TIM_OC4_SetConfig+0x140>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d003      	beq.n	80067d0 <TIM_OC4_SetConfig+0x7c>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a33      	ldr	r2, [pc, #204]	@ (8006898 <TIM_OC4_SetConfig+0x144>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d10d      	bne.n	80067ec <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80067d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	031b      	lsls	r3, r3, #12
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a27      	ldr	r2, [pc, #156]	@ (800688c <TIM_OC4_SetConfig+0x138>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d023      	beq.n	800683c <TIM_OC4_SetConfig+0xe8>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a26      	ldr	r2, [pc, #152]	@ (8006890 <TIM_OC4_SetConfig+0x13c>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d01f      	beq.n	800683c <TIM_OC4_SetConfig+0xe8>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a25      	ldr	r2, [pc, #148]	@ (8006894 <TIM_OC4_SetConfig+0x140>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d01b      	beq.n	800683c <TIM_OC4_SetConfig+0xe8>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a24      	ldr	r2, [pc, #144]	@ (8006898 <TIM_OC4_SetConfig+0x144>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d017      	beq.n	800683c <TIM_OC4_SetConfig+0xe8>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a23      	ldr	r2, [pc, #140]	@ (800689c <TIM_OC4_SetConfig+0x148>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d013      	beq.n	800683c <TIM_OC4_SetConfig+0xe8>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a22      	ldr	r2, [pc, #136]	@ (80068a0 <TIM_OC4_SetConfig+0x14c>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d00f      	beq.n	800683c <TIM_OC4_SetConfig+0xe8>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a21      	ldr	r2, [pc, #132]	@ (80068a4 <TIM_OC4_SetConfig+0x150>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d00b      	beq.n	800683c <TIM_OC4_SetConfig+0xe8>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a20      	ldr	r2, [pc, #128]	@ (80068a8 <TIM_OC4_SetConfig+0x154>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d007      	beq.n	800683c <TIM_OC4_SetConfig+0xe8>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a1f      	ldr	r2, [pc, #124]	@ (80068ac <TIM_OC4_SetConfig+0x158>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d003      	beq.n	800683c <TIM_OC4_SetConfig+0xe8>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a1e      	ldr	r2, [pc, #120]	@ (80068b0 <TIM_OC4_SetConfig+0x15c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d113      	bne.n	8006864 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006842:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800684a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	019b      	lsls	r3, r3, #6
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	019b      	lsls	r3, r3, #6
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	4313      	orrs	r3, r2
 8006862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	621a      	str	r2, [r3, #32]
}
 800687e:	bf00      	nop
 8006880:	371c      	adds	r7, #28
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	40012c00 	.word	0x40012c00
 8006890:	50012c00 	.word	0x50012c00
 8006894:	40013400 	.word	0x40013400
 8006898:	50013400 	.word	0x50013400
 800689c:	40014000 	.word	0x40014000
 80068a0:	50014000 	.word	0x50014000
 80068a4:	40014400 	.word	0x40014400
 80068a8:	50014400 	.word	0x50014400
 80068ac:	40014800 	.word	0x40014800
 80068b0:	50014800 	.word	0x50014800

080068b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a1b      	ldr	r3, [r3, #32]
 80068c8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80068f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	041b      	lsls	r3, r3, #16
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	4313      	orrs	r3, r2
 8006904:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a21      	ldr	r2, [pc, #132]	@ (8006990 <TIM_OC5_SetConfig+0xdc>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d023      	beq.n	8006956 <TIM_OC5_SetConfig+0xa2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a20      	ldr	r2, [pc, #128]	@ (8006994 <TIM_OC5_SetConfig+0xe0>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d01f      	beq.n	8006956 <TIM_OC5_SetConfig+0xa2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a1f      	ldr	r2, [pc, #124]	@ (8006998 <TIM_OC5_SetConfig+0xe4>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d01b      	beq.n	8006956 <TIM_OC5_SetConfig+0xa2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a1e      	ldr	r2, [pc, #120]	@ (800699c <TIM_OC5_SetConfig+0xe8>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d017      	beq.n	8006956 <TIM_OC5_SetConfig+0xa2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a1d      	ldr	r2, [pc, #116]	@ (80069a0 <TIM_OC5_SetConfig+0xec>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d013      	beq.n	8006956 <TIM_OC5_SetConfig+0xa2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a1c      	ldr	r2, [pc, #112]	@ (80069a4 <TIM_OC5_SetConfig+0xf0>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00f      	beq.n	8006956 <TIM_OC5_SetConfig+0xa2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a1b      	ldr	r2, [pc, #108]	@ (80069a8 <TIM_OC5_SetConfig+0xf4>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d00b      	beq.n	8006956 <TIM_OC5_SetConfig+0xa2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a1a      	ldr	r2, [pc, #104]	@ (80069ac <TIM_OC5_SetConfig+0xf8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d007      	beq.n	8006956 <TIM_OC5_SetConfig+0xa2>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a19      	ldr	r2, [pc, #100]	@ (80069b0 <TIM_OC5_SetConfig+0xfc>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d003      	beq.n	8006956 <TIM_OC5_SetConfig+0xa2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a18      	ldr	r2, [pc, #96]	@ (80069b4 <TIM_OC5_SetConfig+0x100>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d109      	bne.n	800696a <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800695c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	021b      	lsls	r3, r3, #8
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	4313      	orrs	r3, r2
 8006968:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	621a      	str	r2, [r3, #32]
}
 8006984:	bf00      	nop
 8006986:	371c      	adds	r7, #28
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	40012c00 	.word	0x40012c00
 8006994:	50012c00 	.word	0x50012c00
 8006998:	40013400 	.word	0x40013400
 800699c:	50013400 	.word	0x50013400
 80069a0:	40014000 	.word	0x40014000
 80069a4:	50014000 	.word	0x50014000
 80069a8:	40014400 	.word	0x40014400
 80069ac:	50014400 	.word	0x50014400
 80069b0:	40014800 	.word	0x40014800
 80069b4:	50014800 	.word	0x50014800

080069b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	021b      	lsls	r3, r3, #8
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	051b      	lsls	r3, r3, #20
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a22      	ldr	r2, [pc, #136]	@ (8006a98 <TIM_OC6_SetConfig+0xe0>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d023      	beq.n	8006a5c <TIM_OC6_SetConfig+0xa4>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a21      	ldr	r2, [pc, #132]	@ (8006a9c <TIM_OC6_SetConfig+0xe4>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d01f      	beq.n	8006a5c <TIM_OC6_SetConfig+0xa4>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a20      	ldr	r2, [pc, #128]	@ (8006aa0 <TIM_OC6_SetConfig+0xe8>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d01b      	beq.n	8006a5c <TIM_OC6_SetConfig+0xa4>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a1f      	ldr	r2, [pc, #124]	@ (8006aa4 <TIM_OC6_SetConfig+0xec>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d017      	beq.n	8006a5c <TIM_OC6_SetConfig+0xa4>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8006aa8 <TIM_OC6_SetConfig+0xf0>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d013      	beq.n	8006a5c <TIM_OC6_SetConfig+0xa4>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a1d      	ldr	r2, [pc, #116]	@ (8006aac <TIM_OC6_SetConfig+0xf4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d00f      	beq.n	8006a5c <TIM_OC6_SetConfig+0xa4>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8006ab0 <TIM_OC6_SetConfig+0xf8>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d00b      	beq.n	8006a5c <TIM_OC6_SetConfig+0xa4>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a1b      	ldr	r2, [pc, #108]	@ (8006ab4 <TIM_OC6_SetConfig+0xfc>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d007      	beq.n	8006a5c <TIM_OC6_SetConfig+0xa4>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ab8 <TIM_OC6_SetConfig+0x100>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d003      	beq.n	8006a5c <TIM_OC6_SetConfig+0xa4>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a19      	ldr	r2, [pc, #100]	@ (8006abc <TIM_OC6_SetConfig+0x104>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d109      	bne.n	8006a70 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	029b      	lsls	r3, r3, #10
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	621a      	str	r2, [r3, #32]
}
 8006a8a:	bf00      	nop
 8006a8c:	371c      	adds	r7, #28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	40012c00 	.word	0x40012c00
 8006a9c:	50012c00 	.word	0x50012c00
 8006aa0:	40013400 	.word	0x40013400
 8006aa4:	50013400 	.word	0x50013400
 8006aa8:	40014000 	.word	0x40014000
 8006aac:	50014000 	.word	0x50014000
 8006ab0:	40014400 	.word	0x40014400
 8006ab4:	50014400 	.word	0x50014400
 8006ab8:	40014800 	.word	0x40014800
 8006abc:	50014800 	.word	0x50014800

08006ac0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	f023 0201 	bic.w	r2, r3, #1
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	011b      	lsls	r3, r3, #4
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f023 030a 	bic.w	r3, r3, #10
 8006afc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	621a      	str	r2, [r3, #32]
}
 8006b12:	bf00      	nop
 8006b14:	371c      	adds	r7, #28
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b087      	sub	sp, #28
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	60f8      	str	r0, [r7, #12]
 8006b26:	60b9      	str	r1, [r7, #8]
 8006b28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	f023 0210 	bic.w	r2, r3, #16
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	031b      	lsls	r3, r3, #12
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	011b      	lsls	r3, r3, #4
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	621a      	str	r2, [r3, #32]
}
 8006b72:	bf00      	nop
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b085      	sub	sp, #20
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006b94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	f043 0307 	orr.w	r3, r3, #7
 8006ba4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	609a      	str	r2, [r3, #8]
}
 8006bac:	bf00      	nop
 8006bae:	3714      	adds	r7, #20
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	021a      	lsls	r2, r3, #8
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	609a      	str	r2, [r3, #8]
}
 8006bec:	bf00      	nop
 8006bee:	371c      	adds	r7, #28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	f003 031f 	and.w	r3, r3, #31
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a1a      	ldr	r2, [r3, #32]
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	43db      	mvns	r3, r3
 8006c1a:	401a      	ands	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6a1a      	ldr	r2, [r3, #32]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f003 031f 	and.w	r3, r3, #31
 8006c2a:	6879      	ldr	r1, [r7, #4]
 8006c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c30:	431a      	orrs	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	621a      	str	r2, [r3, #32]
}
 8006c36:	bf00      	nop
 8006c38:	371c      	adds	r7, #28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
	...

08006c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d101      	bne.n	8006c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c58:	2302      	movs	r3, #2
 8006c5a:	e0a1      	b.n	8006da0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a4a      	ldr	r2, [pc, #296]	@ (8006dac <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d00e      	beq.n	8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a49      	ldr	r2, [pc, #292]	@ (8006db0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d009      	beq.n	8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a47      	ldr	r2, [pc, #284]	@ (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d004      	beq.n	8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a46      	ldr	r2, [pc, #280]	@ (8006db8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d108      	bne.n	8006cb6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006caa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006cbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a34      	ldr	r2, [pc, #208]	@ (8006dac <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d04a      	beq.n	8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a33      	ldr	r2, [pc, #204]	@ (8006db0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d045      	beq.n	8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf0:	d040      	beq.n	8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006cfa:	d03b      	beq.n	8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a2e      	ldr	r2, [pc, #184]	@ (8006dbc <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d036      	beq.n	8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a2d      	ldr	r2, [pc, #180]	@ (8006dc0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d031      	beq.n	8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a2b      	ldr	r2, [pc, #172]	@ (8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d02c      	beq.n	8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a2a      	ldr	r2, [pc, #168]	@ (8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d027      	beq.n	8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a28      	ldr	r2, [pc, #160]	@ (8006dcc <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d022      	beq.n	8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a27      	ldr	r2, [pc, #156]	@ (8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d01d      	beq.n	8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d018      	beq.n	8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a1c      	ldr	r2, [pc, #112]	@ (8006db8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d013      	beq.n	8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a20      	ldr	r2, [pc, #128]	@ (8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d00e      	beq.n	8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8006dd8 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d009      	beq.n	8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a1d      	ldr	r2, [pc, #116]	@ (8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d004      	beq.n	8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a1c      	ldr	r2, [pc, #112]	@ (8006de0 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d10c      	bne.n	8006d8e <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	40012c00 	.word	0x40012c00
 8006db0:	50012c00 	.word	0x50012c00
 8006db4:	40013400 	.word	0x40013400
 8006db8:	50013400 	.word	0x50013400
 8006dbc:	40000400 	.word	0x40000400
 8006dc0:	50000400 	.word	0x50000400
 8006dc4:	40000800 	.word	0x40000800
 8006dc8:	50000800 	.word	0x50000800
 8006dcc:	40000c00 	.word	0x40000c00
 8006dd0:	50000c00 	.word	0x50000c00
 8006dd4:	40001800 	.word	0x40001800
 8006dd8:	50001800 	.word	0x50001800
 8006ddc:	40014000 	.word	0x40014000
 8006de0:	50014000 	.word	0x50014000

08006de4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d101      	bne.n	8006e00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	e07d      	b.n	8006efc <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	041b      	lsls	r3, r3, #16
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a1e      	ldr	r2, [pc, #120]	@ (8006f08 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d00e      	beq.n	8006eb0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a1d      	ldr	r2, [pc, #116]	@ (8006f0c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d009      	beq.n	8006eb0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8006f10 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d004      	beq.n	8006eb0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8006f14 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d11c      	bne.n	8006eea <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eba:	051b      	lsls	r3, r3, #20
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr
 8006f08:	40012c00 	.word	0x40012c00
 8006f0c:	50012c00 	.word	0x50012c00
 8006f10:	40013400 	.word	0x40013400
 8006f14:	50013400 	.word	0x50013400

08006f18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e042      	b.n	8006fb0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d106      	bne.n	8006f42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f83b 	bl	8006fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2224      	movs	r2, #36	@ 0x24
 8006f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 0201 	bic.w	r2, r2, #1
 8006f58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d002      	beq.n	8006f68 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fa20 	bl	80073a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f82f 	bl	8006fcc <UART_SetConfig>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d101      	bne.n	8006f78 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e01b      	b.n	8006fb0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689a      	ldr	r2, [r3, #8]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f042 0201 	orr.w	r2, r2, #1
 8006fa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fa9f 	bl	80074ec <UART_CheckIdleState>
 8006fae:	4603      	mov	r3, r0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fd0:	b094      	sub	sp, #80	@ 0x50
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	4b78      	ldr	r3, [pc, #480]	@ (80071c4 <UART_SetConfig+0x1f8>)
 8006fe2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe6:	689a      	ldr	r2, [r3, #8]
 8006fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	431a      	orrs	r2, r3
 8006fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff6:	69db      	ldr	r3, [r3, #28]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4971      	ldr	r1, [pc, #452]	@ (80071c8 <UART_SetConfig+0x1fc>)
 8007004:	4019      	ands	r1, r3
 8007006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800700c:	430b      	orrs	r3, r1
 800700e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800701a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800701c:	68d9      	ldr	r1, [r3, #12]
 800701e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	ea40 0301 	orr.w	r3, r0, r1
 8007026:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800702e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	4b64      	ldr	r3, [pc, #400]	@ (80071c4 <UART_SetConfig+0x1f8>)
 8007034:	429a      	cmp	r2, r3
 8007036:	d009      	beq.n	800704c <UART_SetConfig+0x80>
 8007038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	4b63      	ldr	r3, [pc, #396]	@ (80071cc <UART_SetConfig+0x200>)
 800703e:	429a      	cmp	r2, r3
 8007040:	d004      	beq.n	800704c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007044:	6a1a      	ldr	r2, [r3, #32]
 8007046:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007048:	4313      	orrs	r3, r2
 800704a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800704c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8007056:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800705a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007060:	430b      	orrs	r3, r1
 8007062:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800706a:	f023 000f 	bic.w	r0, r3, #15
 800706e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007070:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	ea40 0301 	orr.w	r3, r0, r1
 800707a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800707c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	4b53      	ldr	r3, [pc, #332]	@ (80071d0 <UART_SetConfig+0x204>)
 8007082:	429a      	cmp	r2, r3
 8007084:	d102      	bne.n	800708c <UART_SetConfig+0xc0>
 8007086:	2301      	movs	r3, #1
 8007088:	64bb      	str	r3, [r7, #72]	@ 0x48
 800708a:	e066      	b.n	800715a <UART_SetConfig+0x18e>
 800708c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	4b50      	ldr	r3, [pc, #320]	@ (80071d4 <UART_SetConfig+0x208>)
 8007092:	429a      	cmp	r2, r3
 8007094:	d102      	bne.n	800709c <UART_SetConfig+0xd0>
 8007096:	2302      	movs	r3, #2
 8007098:	64bb      	str	r3, [r7, #72]	@ 0x48
 800709a:	e05e      	b.n	800715a <UART_SetConfig+0x18e>
 800709c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	4b4d      	ldr	r3, [pc, #308]	@ (80071d8 <UART_SetConfig+0x20c>)
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d102      	bne.n	80070ac <UART_SetConfig+0xe0>
 80070a6:	2304      	movs	r3, #4
 80070a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070aa:	e056      	b.n	800715a <UART_SetConfig+0x18e>
 80070ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	4b4a      	ldr	r3, [pc, #296]	@ (80071dc <UART_SetConfig+0x210>)
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d102      	bne.n	80070bc <UART_SetConfig+0xf0>
 80070b6:	2308      	movs	r3, #8
 80070b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070ba:	e04e      	b.n	800715a <UART_SetConfig+0x18e>
 80070bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	4b47      	ldr	r3, [pc, #284]	@ (80071e0 <UART_SetConfig+0x214>)
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d102      	bne.n	80070cc <UART_SetConfig+0x100>
 80070c6:	2310      	movs	r3, #16
 80070c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070ca:	e046      	b.n	800715a <UART_SetConfig+0x18e>
 80070cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	4b44      	ldr	r3, [pc, #272]	@ (80071e4 <UART_SetConfig+0x218>)
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d102      	bne.n	80070dc <UART_SetConfig+0x110>
 80070d6:	2320      	movs	r3, #32
 80070d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070da:	e03e      	b.n	800715a <UART_SetConfig+0x18e>
 80070dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	4b41      	ldr	r3, [pc, #260]	@ (80071e8 <UART_SetConfig+0x21c>)
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d102      	bne.n	80070ec <UART_SetConfig+0x120>
 80070e6:	2340      	movs	r3, #64	@ 0x40
 80070e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070ea:	e036      	b.n	800715a <UART_SetConfig+0x18e>
 80070ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	4b3e      	ldr	r3, [pc, #248]	@ (80071ec <UART_SetConfig+0x220>)
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d102      	bne.n	80070fc <UART_SetConfig+0x130>
 80070f6:	2380      	movs	r3, #128	@ 0x80
 80070f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070fa:	e02e      	b.n	800715a <UART_SetConfig+0x18e>
 80070fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	4b3b      	ldr	r3, [pc, #236]	@ (80071f0 <UART_SetConfig+0x224>)
 8007102:	429a      	cmp	r2, r3
 8007104:	d103      	bne.n	800710e <UART_SetConfig+0x142>
 8007106:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800710a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800710c:	e025      	b.n	800715a <UART_SetConfig+0x18e>
 800710e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	4b38      	ldr	r3, [pc, #224]	@ (80071f4 <UART_SetConfig+0x228>)
 8007114:	429a      	cmp	r2, r3
 8007116:	d103      	bne.n	8007120 <UART_SetConfig+0x154>
 8007118:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800711c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800711e:	e01c      	b.n	800715a <UART_SetConfig+0x18e>
 8007120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	4b34      	ldr	r3, [pc, #208]	@ (80071f8 <UART_SetConfig+0x22c>)
 8007126:	429a      	cmp	r2, r3
 8007128:	d103      	bne.n	8007132 <UART_SetConfig+0x166>
 800712a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800712e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007130:	e013      	b.n	800715a <UART_SetConfig+0x18e>
 8007132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	4b31      	ldr	r3, [pc, #196]	@ (80071fc <UART_SetConfig+0x230>)
 8007138:	429a      	cmp	r2, r3
 800713a:	d103      	bne.n	8007144 <UART_SetConfig+0x178>
 800713c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007140:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007142:	e00a      	b.n	800715a <UART_SetConfig+0x18e>
 8007144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	4b1e      	ldr	r3, [pc, #120]	@ (80071c4 <UART_SetConfig+0x1f8>)
 800714a:	429a      	cmp	r2, r3
 800714c:	d103      	bne.n	8007156 <UART_SetConfig+0x18a>
 800714e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007152:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007154:	e001      	b.n	800715a <UART_SetConfig+0x18e>
 8007156:	2300      	movs	r3, #0
 8007158:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800715a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	4b19      	ldr	r3, [pc, #100]	@ (80071c4 <UART_SetConfig+0x1f8>)
 8007160:	429a      	cmp	r2, r3
 8007162:	d005      	beq.n	8007170 <UART_SetConfig+0x1a4>
 8007164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	4b18      	ldr	r3, [pc, #96]	@ (80071cc <UART_SetConfig+0x200>)
 800716a:	429a      	cmp	r2, r3
 800716c:	f040 8094 	bne.w	8007298 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007170:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007172:	2200      	movs	r2, #0
 8007174:	623b      	str	r3, [r7, #32]
 8007176:	627a      	str	r2, [r7, #36]	@ 0x24
 8007178:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800717c:	f7fb fffc 	bl	8003178 <HAL_RCCEx_GetPeriphCLKFreq>
 8007180:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 80f7 	beq.w	8007378 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800718a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800718c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718e:	4a1c      	ldr	r2, [pc, #112]	@ (8007200 <UART_SetConfig+0x234>)
 8007190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007194:	461a      	mov	r2, r3
 8007196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007198:	fbb3 f3f2 	udiv	r3, r3, r2
 800719c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800719e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	4613      	mov	r3, r2
 80071a4:	005b      	lsls	r3, r3, #1
 80071a6:	4413      	add	r3, r2
 80071a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d305      	bcc.n	80071ba <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d924      	bls.n	8007204 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80071c0:	e069      	b.n	8007296 <UART_SetConfig+0x2ca>
 80071c2:	bf00      	nop
 80071c4:	44002400 	.word	0x44002400
 80071c8:	cfff69f3 	.word	0xcfff69f3
 80071cc:	54002400 	.word	0x54002400
 80071d0:	40013800 	.word	0x40013800
 80071d4:	40004400 	.word	0x40004400
 80071d8:	40004800 	.word	0x40004800
 80071dc:	40004c00 	.word	0x40004c00
 80071e0:	40005000 	.word	0x40005000
 80071e4:	40006400 	.word	0x40006400
 80071e8:	40007800 	.word	0x40007800
 80071ec:	40007c00 	.word	0x40007c00
 80071f0:	40008000 	.word	0x40008000
 80071f4:	40006800 	.word	0x40006800
 80071f8:	40006c00 	.word	0x40006c00
 80071fc:	40008400 	.word	0x40008400
 8007200:	0800787c 	.word	0x0800787c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007206:	2200      	movs	r2, #0
 8007208:	61bb      	str	r3, [r7, #24]
 800720a:	61fa      	str	r2, [r7, #28]
 800720c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800720e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007210:	4a64      	ldr	r2, [pc, #400]	@ (80073a4 <UART_SetConfig+0x3d8>)
 8007212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007216:	b29b      	uxth	r3, r3
 8007218:	2200      	movs	r2, #0
 800721a:	613b      	str	r3, [r7, #16]
 800721c:	617a      	str	r2, [r7, #20]
 800721e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007222:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007226:	f7f9 f831 	bl	800028c <__aeabi_uldivmod>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	4610      	mov	r0, r2
 8007230:	4619      	mov	r1, r3
 8007232:	f04f 0200 	mov.w	r2, #0
 8007236:	f04f 0300 	mov.w	r3, #0
 800723a:	020b      	lsls	r3, r1, #8
 800723c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007240:	0202      	lsls	r2, r0, #8
 8007242:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007244:	6849      	ldr	r1, [r1, #4]
 8007246:	0849      	lsrs	r1, r1, #1
 8007248:	2000      	movs	r0, #0
 800724a:	460c      	mov	r4, r1
 800724c:	4605      	mov	r5, r0
 800724e:	eb12 0804 	adds.w	r8, r2, r4
 8007252:	eb43 0905 	adc.w	r9, r3, r5
 8007256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	60bb      	str	r3, [r7, #8]
 800725e:	60fa      	str	r2, [r7, #12]
 8007260:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007264:	4640      	mov	r0, r8
 8007266:	4649      	mov	r1, r9
 8007268:	f7f9 f810 	bl	800028c <__aeabi_uldivmod>
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	4613      	mov	r3, r2
 8007272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007276:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800727a:	d308      	bcc.n	800728e <UART_SetConfig+0x2c2>
 800727c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800727e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007282:	d204      	bcs.n	800728e <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8007284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800728a:	60da      	str	r2, [r3, #12]
 800728c:	e003      	b.n	8007296 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8007294:	e070      	b.n	8007378 <UART_SetConfig+0x3ac>
 8007296:	e06f      	b.n	8007378 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729a:	69db      	ldr	r3, [r3, #28]
 800729c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072a0:	d13c      	bne.n	800731c <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80072a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072a4:	2200      	movs	r2, #0
 80072a6:	603b      	str	r3, [r7, #0]
 80072a8:	607a      	str	r2, [r7, #4]
 80072aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072ae:	f7fb ff63 	bl	8003178 <HAL_RCCEx_GetPeriphCLKFreq>
 80072b2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d05e      	beq.n	8007378 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072be:	4a39      	ldr	r2, [pc, #228]	@ (80073a4 <UART_SetConfig+0x3d8>)
 80072c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072c4:	461a      	mov	r2, r3
 80072c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80072cc:	005a      	lsls	r2, r3, #1
 80072ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	085b      	lsrs	r3, r3, #1
 80072d4:	441a      	add	r2, r3
 80072d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	fbb2 f3f3 	udiv	r3, r2, r3
 80072de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072e2:	2b0f      	cmp	r3, #15
 80072e4:	d916      	bls.n	8007314 <UART_SetConfig+0x348>
 80072e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072ec:	d212      	bcs.n	8007314 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	f023 030f 	bic.w	r3, r3, #15
 80072f6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072fa:	085b      	lsrs	r3, r3, #1
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	f003 0307 	and.w	r3, r3, #7
 8007302:	b29a      	uxth	r2, r3
 8007304:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007306:	4313      	orrs	r3, r2
 8007308:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800730a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8007310:	60da      	str	r2, [r3, #12]
 8007312:	e031      	b.n	8007378 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800731a:	e02d      	b.n	8007378 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800731c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800731e:	2200      	movs	r2, #0
 8007320:	469a      	mov	sl, r3
 8007322:	4693      	mov	fp, r2
 8007324:	4650      	mov	r0, sl
 8007326:	4659      	mov	r1, fp
 8007328:	f7fb ff26 	bl	8003178 <HAL_RCCEx_GetPeriphCLKFreq>
 800732c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800732e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007330:	2b00      	cmp	r3, #0
 8007332:	d021      	beq.n	8007378 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007338:	4a1a      	ldr	r2, [pc, #104]	@ (80073a4 <UART_SetConfig+0x3d8>)
 800733a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800733e:	461a      	mov	r2, r3
 8007340:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007342:	fbb3 f2f2 	udiv	r2, r3, r2
 8007346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	085b      	lsrs	r3, r3, #1
 800734c:	441a      	add	r2, r3
 800734e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	fbb2 f3f3 	udiv	r3, r2, r3
 8007356:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800735a:	2b0f      	cmp	r3, #15
 800735c:	d909      	bls.n	8007372 <UART_SetConfig+0x3a6>
 800735e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007364:	d205      	bcs.n	8007372 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007368:	b29a      	uxth	r2, r3
 800736a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	60da      	str	r2, [r3, #12]
 8007370:	e002      	b.n	8007378 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800737a:	2201      	movs	r2, #1
 800737c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007382:	2201      	movs	r2, #1
 8007384:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800738a:	2200      	movs	r2, #0
 800738c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800738e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007390:	2200      	movs	r2, #0
 8007392:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007394:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007398:	4618      	mov	r0, r3
 800739a:	3750      	adds	r7, #80	@ 0x50
 800739c:	46bd      	mov	sp, r7
 800739e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073a2:	bf00      	nop
 80073a4:	0800787c 	.word	0x0800787c

080073a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b4:	f003 0308 	and.w	r3, r3, #8
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00a      	beq.n	80073d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00a      	beq.n	8007416 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800741a:	f003 0304 	and.w	r3, r3, #4
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00a      	beq.n	8007438 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800743c:	f003 0310 	and.w	r3, r3, #16
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00a      	beq.n	800745a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800745e:	f003 0320 	and.w	r3, r3, #32
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00a      	beq.n	800747c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	430a      	orrs	r2, r1
 800747a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007484:	2b00      	cmp	r3, #0
 8007486:	d01a      	beq.n	80074be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	430a      	orrs	r2, r1
 800749c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074a6:	d10a      	bne.n	80074be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	430a      	orrs	r2, r1
 80074de:	605a      	str	r2, [r3, #4]
  }
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b098      	sub	sp, #96	@ 0x60
 80074f0:	af02      	add	r7, sp, #8
 80074f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074fc:	f7f9 fed4 	bl	80012a8 <HAL_GetTick>
 8007500:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0308 	and.w	r3, r3, #8
 800750c:	2b08      	cmp	r3, #8
 800750e:	d12f      	bne.n	8007570 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007510:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007518:	2200      	movs	r2, #0
 800751a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f88e 	bl	8007640 <UART_WaitOnFlagUntilTimeout>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d022      	beq.n	8007570 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007532:	e853 3f00 	ldrex	r3, [r3]
 8007536:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800753a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800753e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	461a      	mov	r2, r3
 8007546:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007548:	647b      	str	r3, [r7, #68]	@ 0x44
 800754a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800754e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007550:	e841 2300 	strex	r3, r2, [r1]
 8007554:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1e6      	bne.n	800752a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2220      	movs	r2, #32
 8007560:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e063      	b.n	8007638 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0304 	and.w	r3, r3, #4
 800757a:	2b04      	cmp	r3, #4
 800757c:	d149      	bne.n	8007612 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800757e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007586:	2200      	movs	r2, #0
 8007588:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f857 	bl	8007640 <UART_WaitOnFlagUntilTimeout>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d03c      	beq.n	8007612 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a0:	e853 3f00 	ldrex	r3, [r3]
 80075a4:	623b      	str	r3, [r7, #32]
   return(result);
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	461a      	mov	r2, r3
 80075b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80075b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075be:	e841 2300 	strex	r3, r2, [r1]
 80075c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1e6      	bne.n	8007598 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	3308      	adds	r3, #8
 80075d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	e853 3f00 	ldrex	r3, [r3]
 80075d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f023 0301 	bic.w	r3, r3, #1
 80075e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3308      	adds	r3, #8
 80075e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075ea:	61fa      	str	r2, [r7, #28]
 80075ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ee:	69b9      	ldr	r1, [r7, #24]
 80075f0:	69fa      	ldr	r2, [r7, #28]
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	617b      	str	r3, [r7, #20]
   return(result);
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1e5      	bne.n	80075ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2220      	movs	r2, #32
 8007602:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e012      	b.n	8007638 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2220      	movs	r2, #32
 8007616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2220      	movs	r2, #32
 800761e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3758      	adds	r7, #88	@ 0x58
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	603b      	str	r3, [r7, #0]
 800764c:	4613      	mov	r3, r2
 800764e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007650:	e04f      	b.n	80076f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007658:	d04b      	beq.n	80076f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800765a:	f7f9 fe25 	bl	80012a8 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	69ba      	ldr	r2, [r7, #24]
 8007666:	429a      	cmp	r2, r3
 8007668:	d302      	bcc.n	8007670 <UART_WaitOnFlagUntilTimeout+0x30>
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d101      	bne.n	8007674 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	e04e      	b.n	8007712 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0304 	and.w	r3, r3, #4
 800767e:	2b00      	cmp	r3, #0
 8007680:	d037      	beq.n	80076f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2b80      	cmp	r3, #128	@ 0x80
 8007686:	d034      	beq.n	80076f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2b40      	cmp	r3, #64	@ 0x40
 800768c:	d031      	beq.n	80076f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	69db      	ldr	r3, [r3, #28]
 8007694:	f003 0308 	and.w	r3, r3, #8
 8007698:	2b08      	cmp	r3, #8
 800769a:	d110      	bne.n	80076be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2208      	movs	r2, #8
 80076a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f000 f838 	bl	800771a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2208      	movs	r2, #8
 80076ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e029      	b.n	8007712 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	69db      	ldr	r3, [r3, #28]
 80076c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076cc:	d111      	bne.n	80076f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80076d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 f81e 	bl	800771a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2220      	movs	r2, #32
 80076e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e00f      	b.n	8007712 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	69da      	ldr	r2, [r3, #28]
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	4013      	ands	r3, r2
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	429a      	cmp	r2, r3
 8007700:	bf0c      	ite	eq
 8007702:	2301      	moveq	r3, #1
 8007704:	2300      	movne	r3, #0
 8007706:	b2db      	uxtb	r3, r3
 8007708:	461a      	mov	r2, r3
 800770a:	79fb      	ldrb	r3, [r7, #7]
 800770c:	429a      	cmp	r2, r3
 800770e:	d0a0      	beq.n	8007652 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800771a:	b480      	push	{r7}
 800771c:	b095      	sub	sp, #84	@ 0x54
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800772a:	e853 3f00 	ldrex	r3, [r3]
 800772e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007732:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007736:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	461a      	mov	r2, r3
 800773e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007740:	643b      	str	r3, [r7, #64]	@ 0x40
 8007742:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007744:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007746:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007748:	e841 2300 	strex	r3, r2, [r1]
 800774c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800774e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1e6      	bne.n	8007722 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3308      	adds	r3, #8
 800775a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	e853 3f00 	ldrex	r3, [r3]
 8007762:	61fb      	str	r3, [r7, #28]
   return(result);
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800776a:	f023 0301 	bic.w	r3, r3, #1
 800776e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	3308      	adds	r3, #8
 8007776:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007778:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800777a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800777e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007780:	e841 2300 	strex	r3, r2, [r1]
 8007784:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1e3      	bne.n	8007754 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007790:	2b01      	cmp	r3, #1
 8007792:	d118      	bne.n	80077c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	e853 3f00 	ldrex	r3, [r3]
 80077a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	f023 0310 	bic.w	r3, r3, #16
 80077a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	461a      	mov	r2, r3
 80077b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077b2:	61bb      	str	r3, [r7, #24]
 80077b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b6:	6979      	ldr	r1, [r7, #20]
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	e841 2300 	strex	r3, r2, [r1]
 80077be:	613b      	str	r3, [r7, #16]
   return(result);
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e6      	bne.n	8007794 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2220      	movs	r2, #32
 80077ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80077da:	bf00      	nop
 80077dc:	3754      	adds	r7, #84	@ 0x54
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <memset>:
 80077e6:	4402      	add	r2, r0
 80077e8:	4603      	mov	r3, r0
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d100      	bne.n	80077f0 <memset+0xa>
 80077ee:	4770      	bx	lr
 80077f0:	f803 1b01 	strb.w	r1, [r3], #1
 80077f4:	e7f9      	b.n	80077ea <memset+0x4>
	...

080077f8 <__libc_init_array>:
 80077f8:	b570      	push	{r4, r5, r6, lr}
 80077fa:	4d0d      	ldr	r5, [pc, #52]	@ (8007830 <__libc_init_array+0x38>)
 80077fc:	2600      	movs	r6, #0
 80077fe:	4c0d      	ldr	r4, [pc, #52]	@ (8007834 <__libc_init_array+0x3c>)
 8007800:	1b64      	subs	r4, r4, r5
 8007802:	10a4      	asrs	r4, r4, #2
 8007804:	42a6      	cmp	r6, r4
 8007806:	d109      	bne.n	800781c <__libc_init_array+0x24>
 8007808:	4d0b      	ldr	r5, [pc, #44]	@ (8007838 <__libc_init_array+0x40>)
 800780a:	2600      	movs	r6, #0
 800780c:	4c0b      	ldr	r4, [pc, #44]	@ (800783c <__libc_init_array+0x44>)
 800780e:	f000 f817 	bl	8007840 <_init>
 8007812:	1b64      	subs	r4, r4, r5
 8007814:	10a4      	asrs	r4, r4, #2
 8007816:	42a6      	cmp	r6, r4
 8007818:	d105      	bne.n	8007826 <__libc_init_array+0x2e>
 800781a:	bd70      	pop	{r4, r5, r6, pc}
 800781c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007820:	3601      	adds	r6, #1
 8007822:	4798      	blx	r3
 8007824:	e7ee      	b.n	8007804 <__libc_init_array+0xc>
 8007826:	f855 3b04 	ldr.w	r3, [r5], #4
 800782a:	3601      	adds	r6, #1
 800782c:	4798      	blx	r3
 800782e:	e7f2      	b.n	8007816 <__libc_init_array+0x1e>
 8007830:	0800789c 	.word	0x0800789c
 8007834:	0800789c 	.word	0x0800789c
 8007838:	0800789c 	.word	0x0800789c
 800783c:	080078a0 	.word	0x080078a0

08007840 <_init>:
 8007840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007842:	bf00      	nop
 8007844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007846:	bc08      	pop	{r3}
 8007848:	469e      	mov	lr, r3
 800784a:	4770      	bx	lr

0800784c <_fini>:
 800784c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784e:	bf00      	nop
 8007850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007852:	bc08      	pop	{r3}
 8007854:	469e      	mov	lr, r3
 8007856:	4770      	bx	lr
