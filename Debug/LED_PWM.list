
LED_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007618  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08007864  08007864  00008864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078a0  080078a0  00009028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080078a0  080078a0  000088a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078a8  080078a8  00009028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078a8  080078a8  000088a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080078ac  080078ac  000088ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  080078b0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000028  080078d8  00009028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  080078d8  00009150  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00009028  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148b6  00000000  00000000  0000905e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a4  00000000  00000000  0001d914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  0001fcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dad  00000000  00000000  00020e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031e0e  00000000  00000000  00021bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c00  00000000  00000000  000539fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00142cbe  00000000  00000000  000695fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ac2b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b28  00000000  00000000  001ac2fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001b0e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000028 	.word	0x20000028
 8000268:	00000000 	.word	0x00000000
 800026c:	0800784c 	.word	0x0800784c

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	2000002c 	.word	0x2000002c
 8000288:	0800784c 	.word	0x0800784c

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b9b0 	b.w	8000604 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	4688      	mov	r8, r1
 80002c4:	4604      	mov	r4, r0
 80002c6:	468e      	mov	lr, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14a      	bne.n	8000362 <__udivmoddi4+0xa6>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	4617      	mov	r7, r2
 80002d0:	d95f      	bls.n	8000392 <__udivmoddi4+0xd6>
 80002d2:	fab2 f682 	clz	r6, r2
 80002d6:	b14e      	cbz	r6, 80002ec <__udivmoddi4+0x30>
 80002d8:	f1c6 0320 	rsb	r3, r6, #32
 80002dc:	fa01 fe06 	lsl.w	lr, r1, r6
 80002e0:	40b7      	lsls	r7, r6
 80002e2:	40b4      	lsls	r4, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	ea43 0e0e 	orr.w	lr, r3, lr
 80002ec:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f0:	fa1f fc87 	uxth.w	ip, r7
 80002f4:	0c23      	lsrs	r3, r4, #16
 80002f6:	fbbe f1f8 	udiv	r1, lr, r8
 80002fa:	fb08 ee11 	mls	lr, r8, r1, lr
 80002fe:	fb01 f20c 	mul.w	r2, r1, ip
 8000302:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x5e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x5c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 8154 	bhi.w	80005c0 <__udivmoddi4+0x304>
 8000318:	4601      	mov	r1, r0
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	b2a2      	uxth	r2, r4
 800031e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000322:	fb08 3310 	mls	r3, r8, r0, r3
 8000326:	fb00 fc0c 	mul.w	ip, r0, ip
 800032a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800032e:	4594      	cmp	ip, r2
 8000330:	d90b      	bls.n	800034a <__udivmoddi4+0x8e>
 8000332:	18ba      	adds	r2, r7, r2
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	bf2c      	ite	cs
 800033a:	2401      	movcs	r4, #1
 800033c:	2400      	movcc	r4, #0
 800033e:	4594      	cmp	ip, r2
 8000340:	d902      	bls.n	8000348 <__udivmoddi4+0x8c>
 8000342:	2c00      	cmp	r4, #0
 8000344:	f000 813f 	beq.w	80005c6 <__udivmoddi4+0x30a>
 8000348:	4618      	mov	r0, r3
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	eba2 020c 	sub.w	r2, r2, ip
 8000352:	2100      	movs	r1, #0
 8000354:	b11d      	cbz	r5, 800035e <__udivmoddi4+0xa2>
 8000356:	40f2      	lsrs	r2, r6
 8000358:	2300      	movs	r3, #0
 800035a:	e9c5 2300 	strd	r2, r3, [r5]
 800035e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000362:	428b      	cmp	r3, r1
 8000364:	d905      	bls.n	8000372 <__udivmoddi4+0xb6>
 8000366:	b10d      	cbz	r5, 800036c <__udivmoddi4+0xb0>
 8000368:	e9c5 0100 	strd	r0, r1, [r5]
 800036c:	2100      	movs	r1, #0
 800036e:	4608      	mov	r0, r1
 8000370:	e7f5      	b.n	800035e <__udivmoddi4+0xa2>
 8000372:	fab3 f183 	clz	r1, r3
 8000376:	2900      	cmp	r1, #0
 8000378:	d14e      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037a:	4543      	cmp	r3, r8
 800037c:	f0c0 8112 	bcc.w	80005a4 <__udivmoddi4+0x2e8>
 8000380:	4282      	cmp	r2, r0
 8000382:	f240 810f 	bls.w	80005a4 <__udivmoddi4+0x2e8>
 8000386:	4608      	mov	r0, r1
 8000388:	2d00      	cmp	r5, #0
 800038a:	d0e8      	beq.n	800035e <__udivmoddi4+0xa2>
 800038c:	e9c5 4e00 	strd	r4, lr, [r5]
 8000390:	e7e5      	b.n	800035e <__udivmoddi4+0xa2>
 8000392:	2a00      	cmp	r2, #0
 8000394:	f000 80ac 	beq.w	80004f0 <__udivmoddi4+0x234>
 8000398:	fab2 f682 	clz	r6, r2
 800039c:	2e00      	cmp	r6, #0
 800039e:	f040 80bb 	bne.w	8000518 <__udivmoddi4+0x25c>
 80003a2:	1a8b      	subs	r3, r1, r2
 80003a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003a8:	b2bc      	uxth	r4, r7
 80003aa:	2101      	movs	r1, #1
 80003ac:	0c02      	lsrs	r2, r0, #16
 80003ae:	b280      	uxth	r0, r0
 80003b0:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003bc:	fb04 f20c 	mul.w	r2, r4, ip
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d90e      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c4:	18fb      	adds	r3, r7, r3
 80003c6:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80ec 	beq.w	80005b8 <__udivmoddi4+0x2fc>
 80003e0:	46c4      	mov	ip, r8
 80003e2:	1a9b      	subs	r3, r3, r2
 80003e4:	fbb3 f8fe 	udiv	r8, r3, lr
 80003e8:	fb0e 3318 	mls	r3, lr, r8, r3
 80003ec:	fb04 f408 	mul.w	r4, r4, r8
 80003f0:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003f4:	4294      	cmp	r4, r2
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x154>
 80003f8:	18ba      	adds	r2, r7, r2
 80003fa:	f108 33ff 	add.w	r3, r8, #4294967295
 80003fe:	bf2c      	ite	cs
 8000400:	2001      	movcs	r0, #1
 8000402:	2000      	movcc	r0, #0
 8000404:	4294      	cmp	r4, r2
 8000406:	d902      	bls.n	800040e <__udivmoddi4+0x152>
 8000408:	2800      	cmp	r0, #0
 800040a:	f000 80d1 	beq.w	80005b0 <__udivmoddi4+0x2f4>
 800040e:	4698      	mov	r8, r3
 8000410:	1b12      	subs	r2, r2, r4
 8000412:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa08 f401 	lsl.w	r4, r8, r1
 8000422:	fa00 f901 	lsl.w	r9, r0, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	fa28 f806 	lsr.w	r8, r8, r6
 800042e:	408a      	lsls	r2, r1
 8000430:	431f      	orrs	r7, r3
 8000432:	fa20 f306 	lsr.w	r3, r0, r6
 8000436:	0c38      	lsrs	r0, r7, #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa1f fc87 	uxth.w	ip, r7
 800043e:	0c1c      	lsrs	r4, r3, #16
 8000440:	fbb8 fef0 	udiv	lr, r8, r0
 8000444:	fb00 881e 	mls	r8, r0, lr, r8
 8000448:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800044c:	fb0e f80c 	mul.w	r8, lr, ip
 8000450:	45a0      	cmp	r8, r4
 8000452:	d90e      	bls.n	8000472 <__udivmoddi4+0x1b6>
 8000454:	193c      	adds	r4, r7, r4
 8000456:	f10e 3aff 	add.w	sl, lr, #4294967295
 800045a:	bf2c      	ite	cs
 800045c:	f04f 0b01 	movcs.w	fp, #1
 8000460:	f04f 0b00 	movcc.w	fp, #0
 8000464:	45a0      	cmp	r8, r4
 8000466:	d903      	bls.n	8000470 <__udivmoddi4+0x1b4>
 8000468:	f1bb 0f00 	cmp.w	fp, #0
 800046c:	f000 80b8 	beq.w	80005e0 <__udivmoddi4+0x324>
 8000470:	46d6      	mov	lr, sl
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fa1f f883 	uxth.w	r8, r3
 800047a:	fbb4 f3f0 	udiv	r3, r4, r0
 800047e:	fb00 4413 	mls	r4, r0, r3, r4
 8000482:	fb03 fc0c 	mul.w	ip, r3, ip
 8000486:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800048a:	45a4      	cmp	ip, r4
 800048c:	d90e      	bls.n	80004ac <__udivmoddi4+0x1f0>
 800048e:	193c      	adds	r4, r7, r4
 8000490:	f103 30ff 	add.w	r0, r3, #4294967295
 8000494:	bf2c      	ite	cs
 8000496:	f04f 0801 	movcs.w	r8, #1
 800049a:	f04f 0800 	movcc.w	r8, #0
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d903      	bls.n	80004aa <__udivmoddi4+0x1ee>
 80004a2:	f1b8 0f00 	cmp.w	r8, #0
 80004a6:	f000 809f 	beq.w	80005e8 <__udivmoddi4+0x32c>
 80004aa:	4603      	mov	r3, r0
 80004ac:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b0:	eba4 040c 	sub.w	r4, r4, ip
 80004b4:	fba0 ec02 	umull	lr, ip, r0, r2
 80004b8:	4564      	cmp	r4, ip
 80004ba:	4673      	mov	r3, lr
 80004bc:	46e0      	mov	r8, ip
 80004be:	d302      	bcc.n	80004c6 <__udivmoddi4+0x20a>
 80004c0:	d107      	bne.n	80004d2 <__udivmoddi4+0x216>
 80004c2:	45f1      	cmp	r9, lr
 80004c4:	d205      	bcs.n	80004d2 <__udivmoddi4+0x216>
 80004c6:	ebbe 0302 	subs.w	r3, lr, r2
 80004ca:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ce:	3801      	subs	r0, #1
 80004d0:	46e0      	mov	r8, ip
 80004d2:	b15d      	cbz	r5, 80004ec <__udivmoddi4+0x230>
 80004d4:	ebb9 0203 	subs.w	r2, r9, r3
 80004d8:	eb64 0408 	sbc.w	r4, r4, r8
 80004dc:	fa04 f606 	lsl.w	r6, r4, r6
 80004e0:	fa22 f301 	lsr.w	r3, r2, r1
 80004e4:	40cc      	lsrs	r4, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	e9c5 6400 	strd	r6, r4, [r5]
 80004ec:	2100      	movs	r1, #0
 80004ee:	e736      	b.n	800035e <__udivmoddi4+0xa2>
 80004f0:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f4:	0c01      	lsrs	r1, r0, #16
 80004f6:	4614      	mov	r4, r2
 80004f8:	b280      	uxth	r0, r0
 80004fa:	4696      	mov	lr, r2
 80004fc:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000500:	2620      	movs	r6, #32
 8000502:	4690      	mov	r8, r2
 8000504:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000508:	4610      	mov	r0, r2
 800050a:	fbb1 f1f2 	udiv	r1, r1, r2
 800050e:	eba3 0308 	sub.w	r3, r3, r8
 8000512:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000516:	e74b      	b.n	80003b0 <__udivmoddi4+0xf4>
 8000518:	40b7      	lsls	r7, r6
 800051a:	f1c6 0320 	rsb	r3, r6, #32
 800051e:	fa01 f206 	lsl.w	r2, r1, r6
 8000522:	fa21 f803 	lsr.w	r8, r1, r3
 8000526:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800052a:	fa20 f303 	lsr.w	r3, r0, r3
 800052e:	b2bc      	uxth	r4, r7
 8000530:	40b0      	lsls	r0, r6
 8000532:	4313      	orrs	r3, r2
 8000534:	0c02      	lsrs	r2, r0, #16
 8000536:	0c19      	lsrs	r1, r3, #16
 8000538:	b280      	uxth	r0, r0
 800053a:	fbb8 f9fe 	udiv	r9, r8, lr
 800053e:	fb0e 8819 	mls	r8, lr, r9, r8
 8000542:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000546:	fb09 f804 	mul.w	r8, r9, r4
 800054a:	4588      	cmp	r8, r1
 800054c:	d951      	bls.n	80005f2 <__udivmoddi4+0x336>
 800054e:	1879      	adds	r1, r7, r1
 8000550:	f109 3cff 	add.w	ip, r9, #4294967295
 8000554:	bf2c      	ite	cs
 8000556:	f04f 0a01 	movcs.w	sl, #1
 800055a:	f04f 0a00 	movcc.w	sl, #0
 800055e:	4588      	cmp	r8, r1
 8000560:	d902      	bls.n	8000568 <__udivmoddi4+0x2ac>
 8000562:	f1ba 0f00 	cmp.w	sl, #0
 8000566:	d031      	beq.n	80005cc <__udivmoddi4+0x310>
 8000568:	eba1 0108 	sub.w	r1, r1, r8
 800056c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000570:	fb09 f804 	mul.w	r8, r9, r4
 8000574:	fb0e 1119 	mls	r1, lr, r9, r1
 8000578:	b29b      	uxth	r3, r3
 800057a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800057e:	4543      	cmp	r3, r8
 8000580:	d235      	bcs.n	80005ee <__udivmoddi4+0x332>
 8000582:	18fb      	adds	r3, r7, r3
 8000584:	f109 31ff 	add.w	r1, r9, #4294967295
 8000588:	bf2c      	ite	cs
 800058a:	f04f 0a01 	movcs.w	sl, #1
 800058e:	f04f 0a00 	movcc.w	sl, #0
 8000592:	4543      	cmp	r3, r8
 8000594:	d2bb      	bcs.n	800050e <__udivmoddi4+0x252>
 8000596:	f1ba 0f00 	cmp.w	sl, #0
 800059a:	d1b8      	bne.n	800050e <__udivmoddi4+0x252>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e7b4      	b.n	800050e <__udivmoddi4+0x252>
 80005a4:	1a84      	subs	r4, r0, r2
 80005a6:	eb68 0203 	sbc.w	r2, r8, r3
 80005aa:	2001      	movs	r0, #1
 80005ac:	4696      	mov	lr, r2
 80005ae:	e6eb      	b.n	8000388 <__udivmoddi4+0xcc>
 80005b0:	443a      	add	r2, r7
 80005b2:	f1a8 0802 	sub.w	r8, r8, #2
 80005b6:	e72b      	b.n	8000410 <__udivmoddi4+0x154>
 80005b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80005bc:	443b      	add	r3, r7
 80005be:	e710      	b.n	80003e2 <__udivmoddi4+0x126>
 80005c0:	3902      	subs	r1, #2
 80005c2:	443b      	add	r3, r7
 80005c4:	e6a9      	b.n	800031a <__udivmoddi4+0x5e>
 80005c6:	443a      	add	r2, r7
 80005c8:	3802      	subs	r0, #2
 80005ca:	e6be      	b.n	800034a <__udivmoddi4+0x8e>
 80005cc:	eba7 0808 	sub.w	r8, r7, r8
 80005d0:	f1a9 0c02 	sub.w	ip, r9, #2
 80005d4:	4441      	add	r1, r8
 80005d6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005da:	fb09 f804 	mul.w	r8, r9, r4
 80005de:	e7c9      	b.n	8000574 <__udivmoddi4+0x2b8>
 80005e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80005e4:	443c      	add	r4, r7
 80005e6:	e744      	b.n	8000472 <__udivmoddi4+0x1b6>
 80005e8:	3b02      	subs	r3, #2
 80005ea:	443c      	add	r4, r7
 80005ec:	e75e      	b.n	80004ac <__udivmoddi4+0x1f0>
 80005ee:	4649      	mov	r1, r9
 80005f0:	e78d      	b.n	800050e <__udivmoddi4+0x252>
 80005f2:	eba1 0108 	sub.w	r1, r1, r8
 80005f6:	46cc      	mov	ip, r9
 80005f8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fc:	fb09 f804 	mul.w	r8, r9, r4
 8000600:	e7b8      	b.n	8000574 <__udivmoddi4+0x2b8>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fda0 	bl	8001150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f83a 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f958 	bl	80008c8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000618:	f000 f8a6 	bl	8000768 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800061c:	2100      	movs	r1, #0
 800061e:	4818      	ldr	r0, [pc, #96]	@ (8000680 <main+0x78>)
 8000620:	f005 f9c2 	bl	80059a8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000624:	2000      	movs	r0, #0
 8000626:	f000 fbbf 	bl	8000da8 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 800062a:	2001      	movs	r0, #1
 800062c:	f000 fbbc 	bl	8000da8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000630:	2002      	movs	r0, #2
 8000632:	f000 fbb9 	bl	8000da8 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000636:	2101      	movs	r1, #1
 8000638:	2000      	movs	r0, #0
 800063a:	f000 fc2b 	bl	8000e94 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800063e:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <main+0x7c>)
 8000640:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000644:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000646:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <main+0x7c>)
 8000648:	2200      	movs	r2, #0
 800064a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800064c:	4b0d      	ldr	r3, [pc, #52]	@ (8000684 <main+0x7c>)
 800064e:	2200      	movs	r2, #0
 8000650:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <main+0x7c>)
 8000654:	2200      	movs	r2, #0
 8000656:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000658:	4b0a      	ldr	r3, [pc, #40]	@ (8000684 <main+0x7c>)
 800065a:	2200      	movs	r2, #0
 800065c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800065e:	4909      	ldr	r1, [pc, #36]	@ (8000684 <main+0x7c>)
 8000660:	2000      	movs	r0, #0
 8000662:	f000 fcb1 	bl	8000fc8 <BSP_COM_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <main+0x68>
  {
    Error_Handler();
 800066c:	f000 fa56 	bl	8000b1c <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle_ramp());
 8000670:	f000 fa28 	bl	8000ac4 <duty_cycle_ramp>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b01      	ldr	r3, [pc, #4]	@ (8000680 <main+0x78>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	635a      	str	r2, [r3, #52]	@ 0x34
 800067e:	e7f7      	b.n	8000670 <main+0x68>
 8000680:	20000054 	.word	0x20000054
 8000684:	20000044 	.word	0x20000044

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b09c      	sub	sp, #112	@ 0x70
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2250      	movs	r2, #80	@ 0x50
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f007 f8ab 	bl	80077f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
 80006ac:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000760 <SystemClock_Config+0xd8>)
 80006b0:	691b      	ldr	r3, [r3, #16]
 80006b2:	4a2b      	ldr	r2, [pc, #172]	@ (8000760 <SystemClock_Config+0xd8>)
 80006b4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80006b8:	6113      	str	r3, [r2, #16]
 80006ba:	4b29      	ldr	r3, [pc, #164]	@ (8000760 <SystemClock_Config+0xd8>)
 80006bc:	691b      	ldr	r3, [r3, #16]
 80006be:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c6:	bf00      	nop
 80006c8:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <SystemClock_Config+0xd8>)
 80006ca:	695b      	ldr	r3, [r3, #20]
 80006cc:	f003 0308 	and.w	r3, r3, #8
 80006d0:	2b08      	cmp	r3, #8
 80006d2:	d1f9      	bne.n	80006c8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d4:	2301      	movs	r3, #1
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006d8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	2302      	movs	r3, #2
 80006e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80006e2:	2303      	movs	r3, #3
 80006e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e6:	2304      	movs	r3, #4
 80006e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 80006ea:	23fa      	movs	r3, #250	@ 0xfa
 80006ec:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80006fa:	2304      	movs	r3, #4
 80006fc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80006fe:	2300      	movs	r3, #0
 8000700:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	4618      	mov	r0, r3
 800070c:	f001 f97c 	bl	8001a08 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000716:	f000 fa01 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	231f      	movs	r3, #31
 800071c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2303      	movs	r3, #3
 8000720:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	2105      	movs	r1, #5
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fd9d 	bl	8002278 <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000744:	f000 f9ea 	bl	8000b1c <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <SystemClock_Config+0xdc>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000750:	4a04      	ldr	r2, [pc, #16]	@ (8000764 <SystemClock_Config+0xdc>)
 8000752:	f043 0320 	orr.w	r3, r3, #32
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	bf00      	nop
 800075a:	3770      	adds	r7, #112	@ 0x70
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	44020800 	.word	0x44020800
 8000764:	40022000 	.word	0x40022000

08000768 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b09c      	sub	sp, #112	@ 0x70
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000788:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
 8000798:	615a      	str	r2, [r3, #20]
 800079a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2234      	movs	r2, #52	@ 0x34
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f007 f825 	bl	80077f2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a8:	4b45      	ldr	r3, [pc, #276]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007aa:	4a46      	ldr	r2, [pc, #280]	@ (80008c4 <MX_TIM1_Init+0x15c>)
 80007ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007ae:	4b44      	ldr	r3, [pc, #272]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b4:	4b42      	ldr	r3, [pc, #264]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 80007ba:	4b41      	ldr	r3, [pc, #260]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007bc:	22ff      	movs	r2, #255	@ 0xff
 80007be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c0:	4b3f      	ldr	r3, [pc, #252]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c6:	4b3e      	ldr	r3, [pc, #248]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007cc:	4b3c      	ldr	r3, [pc, #240]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007ce:	2280      	movs	r2, #128	@ 0x80
 80007d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d2:	483b      	ldr	r0, [pc, #236]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007d4:	f005 f830 	bl	8005838 <HAL_TIM_Base_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80007de:	f000 f99d 	bl	8000b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007e8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007ec:	4619      	mov	r1, r3
 80007ee:	4834      	ldr	r0, [pc, #208]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007f0:	f005 fb4e 	bl	8005e90 <HAL_TIM_ConfigClockSource>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007fa:	f000 f98f 	bl	8000b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007fe:	4830      	ldr	r0, [pc, #192]	@ (80008c0 <MX_TIM1_Init+0x158>)
 8000800:	f005 f871 	bl	80058e6 <HAL_TIM_PWM_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800080a:	f000 f987 	bl	8000b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080e:	2300      	movs	r3, #0
 8000810:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000812:	2300      	movs	r3, #0
 8000814:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800081a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800081e:	4619      	mov	r1, r3
 8000820:	4827      	ldr	r0, [pc, #156]	@ (80008c0 <MX_TIM1_Init+0x158>)
 8000822:	f006 fa15 	bl	8006c50 <HAL_TIMEx_MasterConfigSynchronization>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800082c:	f000 f976 	bl	8000b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000830:	2360      	movs	r3, #96	@ 0x60
 8000832:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 255;
 8000834:	23ff      	movs	r3, #255	@ 0xff
 8000836:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000838:	2300      	movs	r3, #0
 800083a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800083c:	2300      	movs	r3, #0
 800083e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000844:	2300      	movs	r3, #0
 8000846:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800084c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000850:	2200      	movs	r2, #0
 8000852:	4619      	mov	r1, r3
 8000854:	481a      	ldr	r0, [pc, #104]	@ (80008c0 <MX_TIM1_Init+0x158>)
 8000856:	f005 fa07 	bl	8005c68 <HAL_TIM_PWM_ConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000860:	f000 f95c 	bl	8000b1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000878:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800087c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800088a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800088e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	4619      	mov	r1, r3
 80008a0:	4807      	ldr	r0, [pc, #28]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80008a2:	f006 faa5 	bl	8006df0 <HAL_TIMEx_ConfigBreakDeadTime>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80008ac:	f000 f936 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008b0:	4803      	ldr	r0, [pc, #12]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80008b2:	f000 f961 	bl	8000b78 <HAL_TIM_MspPostInit>

}
 80008b6:	bf00      	nop
 80008b8:	3770      	adds	r7, #112	@ 0x70
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000054 	.word	0x20000054
 80008c4:	40012c00 	.word	0x40012c00

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08c      	sub	sp, #48	@ 0x30
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008de:	4b73      	ldr	r3, [pc, #460]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 80008e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008e4:	4a71      	ldr	r2, [pc, #452]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 80008e6:	f043 0310 	orr.w	r3, r3, #16
 80008ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008ee:	4b6f      	ldr	r3, [pc, #444]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 80008f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008f4:	f003 0310 	and.w	r3, r3, #16
 80008f8:	61bb      	str	r3, [r7, #24]
 80008fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fc:	4b6b      	ldr	r3, [pc, #428]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 80008fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000902:	4a6a      	ldr	r2, [pc, #424]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800090c:	4b67      	ldr	r3, [pc, #412]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 800090e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091a:	4b64      	ldr	r3, [pc, #400]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 800091c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000920:	4a62      	ldr	r2, [pc, #392]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 8000922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000926:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800092a:	4b60      	ldr	r3, [pc, #384]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 800092c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	4b5c      	ldr	r3, [pc, #368]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 800093a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800093e:	4a5b      	ldr	r2, [pc, #364]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000948:	4b58      	ldr	r3, [pc, #352]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 800094a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	4b55      	ldr	r3, [pc, #340]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 8000958:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800095c:	4a53      	ldr	r2, [pc, #332]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 800095e:	f043 0302 	orr.w	r3, r3, #2
 8000962:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000966:	4b51      	ldr	r3, [pc, #324]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 8000968:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800096c:	f003 0302 	and.w	r3, r3, #2
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000974:	4b4d      	ldr	r3, [pc, #308]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 8000976:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800097a:	4a4c      	ldr	r2, [pc, #304]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 800097c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000980:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000984:	4b49      	ldr	r3, [pc, #292]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 8000986:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800098a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000992:	2332      	movs	r3, #50	@ 0x32
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099e:	2302      	movs	r3, #2
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009a2:	230b      	movs	r3, #11
 80009a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4840      	ldr	r0, [pc, #256]	@ (8000ab0 <MX_GPIO_Init+0x1e8>)
 80009ae:	f000 fea5 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009b2:	2386      	movs	r3, #134	@ 0x86
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009be:	2302      	movs	r3, #2
 80009c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009c2:	230b      	movs	r3, #11
 80009c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4839      	ldr	r0, [pc, #228]	@ (8000ab4 <MX_GPIO_Init+0x1ec>)
 80009ce:	f000 fe95 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80009d2:	2310      	movs	r3, #16
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d6:	2303      	movs	r3, #3
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4833      	ldr	r0, [pc, #204]	@ (8000ab4 <MX_GPIO_Init+0x1ec>)
 80009e6:	f000 fe89 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 80009ea:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f0:	2303      	movs	r3, #3
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	482e      	ldr	r0, [pc, #184]	@ (8000ab8 <MX_GPIO_Init+0x1f0>)
 8000a00:	f000 fe7c 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a12:	2302      	movs	r3, #2
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a16:	230b      	movs	r3, #11
 8000a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4825      	ldr	r0, [pc, #148]	@ (8000ab8 <MX_GPIO_Init+0x1f0>)
 8000a22:	f000 fe6b 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000a26:	2380      	movs	r3, #128	@ 0x80
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2a:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <MX_GPIO_Init+0x1f4>)
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4821      	ldr	r0, [pc, #132]	@ (8000ac0 <MX_GPIO_Init+0x1f8>)
 8000a3a:	f000 fe5f 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000a3e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000a50:	230a      	movs	r3, #10
 8000a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4816      	ldr	r0, [pc, #88]	@ (8000ab4 <MX_GPIO_Init+0x1ec>)
 8000a5c:	f000 fe4e 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8000a60:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a72:	230b      	movs	r3, #11
 8000a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4810      	ldr	r0, [pc, #64]	@ (8000ac0 <MX_GPIO_Init+0x1f8>)
 8000a7e:	f000 fe3d 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000a82:	23c0      	movs	r3, #192	@ 0xc0
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a92:	2308      	movs	r3, #8
 8000a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4806      	ldr	r0, [pc, #24]	@ (8000ab8 <MX_GPIO_Init+0x1f0>)
 8000a9e:	f000 fe2d 	bl	80016fc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3730      	adds	r7, #48	@ 0x30
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	44020c00 	.word	0x44020c00
 8000ab0:	42020800 	.word	0x42020800
 8000ab4:	42020000 	.word	0x42020000
 8000ab8:	42020400 	.word	0x42020400
 8000abc:	10110000 	.word	0x10110000
 8000ac0:	42021800 	.word	0x42021800

08000ac4 <duty_cycle_ramp>:

/* USER CODE BEGIN 4 */
uint8_t duty_cycle_ramp(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	static uint8_t pwm = 0;
	static uint32_t last_time = 0;
	static uint32_t now = 0;

	now = HAL_GetTick();
 8000ac8:	f000 fbf4 	bl	80012b4 <HAL_GetTick>
 8000acc:	4603      	mov	r3, r0
 8000ace:	4a10      	ldr	r2, [pc, #64]	@ (8000b10 <duty_cycle_ramp+0x4c>)
 8000ad0:	6013      	str	r3, [r2, #0]
	if (pwm <= 255) {
		if (HAL_GetTick() - last_time > 500)
 8000ad2:	f000 fbef 	bl	80012b4 <HAL_GetTick>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <duty_cycle_ramp+0x50>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000ae2:	d910      	bls.n	8000b06 <duty_cycle_ramp+0x42>
		{
			pwm = (pwm + 1 > 255) ? 255 : (pwm + 10);
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <duty_cycle_ramp+0x54>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2bff      	cmp	r3, #255	@ 0xff
 8000aea:	d004      	beq.n	8000af6 <duty_cycle_ramp+0x32>
 8000aec:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <duty_cycle_ramp+0x54>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	330a      	adds	r3, #10
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	e000      	b.n	8000af8 <duty_cycle_ramp+0x34>
 8000af6:	23ff      	movs	r3, #255	@ 0xff
 8000af8:	4a07      	ldr	r2, [pc, #28]	@ (8000b18 <duty_cycle_ramp+0x54>)
 8000afa:	7013      	strb	r3, [r2, #0]
			last_time = HAL_GetTick();
 8000afc:	f000 fbda 	bl	80012b4 <HAL_GetTick>
 8000b00:	4603      	mov	r3, r0
 8000b02:	4a04      	ldr	r2, [pc, #16]	@ (8000b14 <duty_cycle_ramp+0x50>)
 8000b04:	6013      	str	r3, [r2, #0]

		}
	}
	return pwm;
 8000b06:	4b04      	ldr	r3, [pc, #16]	@ (8000b18 <duty_cycle_ramp+0x54>)
 8000b08:	781b      	ldrb	r3, [r3, #0]

}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200000a0 	.word	0x200000a0
 8000b14:	200000a4 	.word	0x200000a4
 8000b18:	200000a8 	.word	0x200000a8

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <Error_Handler+0x8>

08000b28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END MspInit 0 */

  /* System interrupt init*/

  /* Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b2c:	f000 ff5c 	bl	80019e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0b      	ldr	r2, [pc, #44]	@ (8000b70 <HAL_TIM_Base_MspInit+0x3c>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d10e      	bne.n	8000b64 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b46:	4b0b      	ldr	r3, [pc, #44]	@ (8000b74 <HAL_TIM_Base_MspInit+0x40>)
 8000b48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000b4c:	4a09      	ldr	r2, [pc, #36]	@ (8000b74 <HAL_TIM_Base_MspInit+0x40>)
 8000b4e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b52:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000b56:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <HAL_TIM_Base_MspInit+0x40>)
 8000b58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000b5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000b64:	bf00      	nop
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	40012c00 	.word	0x40012c00
 8000b74:	44020c00 	.word	0x44020c00

08000b78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 030c 	add.w	r3, r7, #12
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a13      	ldr	r2, [pc, #76]	@ (8000be4 <HAL_TIM_MspPostInit+0x6c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d11f      	bne.n	8000bda <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b9a:	4b13      	ldr	r3, [pc, #76]	@ (8000be8 <HAL_TIM_MspPostInit+0x70>)
 8000b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ba0:	4a11      	ldr	r2, [pc, #68]	@ (8000be8 <HAL_TIM_MspPostInit+0x70>)
 8000ba2:	f043 0310 	orr.w	r3, r3, #16
 8000ba6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000baa:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <HAL_TIM_MspPostInit+0x70>)
 8000bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bb0:	f003 0310 	and.w	r3, r3, #16
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bbc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	@ (8000bec <HAL_TIM_MspPostInit+0x74>)
 8000bd6:	f000 fd91 	bl	80016fc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bda:	bf00      	nop
 8000bdc:	3720      	adds	r7, #32
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40012c00 	.word	0x40012c00
 8000be8:	44020c00 	.word	0x44020c00
 8000bec:	42021000 	.word	0x42021000

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <MemManage_Handler+0x4>

08000c08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c46:	f000 fb21 	bl	800128c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000c52:	2000      	movs	r0, #0
 8000c54:	f000 f996 	bl	8000f84 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c62:	4b35      	ldr	r3, [pc, #212]	@ (8000d38 <SystemInit+0xdc>)
 8000c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c68:	4a33      	ldr	r2, [pc, #204]	@ (8000d38 <SystemInit+0xdc>)
 8000c6a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c6e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000c72:	4b32      	ldr	r3, [pc, #200]	@ (8000d3c <SystemInit+0xe0>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000c78:	4b30      	ldr	r3, [pc, #192]	@ (8000d3c <SystemInit+0xe0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d3c <SystemInit+0xe0>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000c84:	4b2d      	ldr	r3, [pc, #180]	@ (8000d3c <SystemInit+0xe0>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	492c      	ldr	r1, [pc, #176]	@ (8000d3c <SystemInit+0xe0>)
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d40 <SystemInit+0xe4>)
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000c90:	4b2a      	ldr	r3, [pc, #168]	@ (8000d3c <SystemInit+0xe0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000c96:	4b29      	ldr	r3, [pc, #164]	@ (8000d3c <SystemInit+0xe0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000c9c:	4b27      	ldr	r3, [pc, #156]	@ (8000d3c <SystemInit+0xe0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000ca2:	4b26      	ldr	r3, [pc, #152]	@ (8000d3c <SystemInit+0xe0>)
 8000ca4:	4a27      	ldr	r2, [pc, #156]	@ (8000d44 <SystemInit+0xe8>)
 8000ca6:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000ca8:	4b24      	ldr	r3, [pc, #144]	@ (8000d3c <SystemInit+0xe0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000cae:	4b23      	ldr	r3, [pc, #140]	@ (8000d3c <SystemInit+0xe0>)
 8000cb0:	4a24      	ldr	r2, [pc, #144]	@ (8000d44 <SystemInit+0xe8>)
 8000cb2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000cb4:	4b21      	ldr	r3, [pc, #132]	@ (8000d3c <SystemInit+0xe0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000cba:	4b20      	ldr	r3, [pc, #128]	@ (8000d3c <SystemInit+0xe0>)
 8000cbc:	4a21      	ldr	r2, [pc, #132]	@ (8000d44 <SystemInit+0xe8>)
 8000cbe:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d3c <SystemInit+0xe0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d3c <SystemInit+0xe0>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a1c      	ldr	r2, [pc, #112]	@ (8000d3c <SystemInit+0xe0>)
 8000ccc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cd0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d3c <SystemInit+0xe0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cd8:	4b17      	ldr	r3, [pc, #92]	@ (8000d38 <SystemInit+0xdc>)
 8000cda:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000cde:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000ce0:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <SystemInit+0xec>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000ce8:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000cf0:	d003      	beq.n	8000cfa <SystemInit+0x9e>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000cf8:	d117      	bne.n	8000d2a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000cfa:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <SystemInit+0xec>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d005      	beq.n	8000d12 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <SystemInit+0xec>)
 8000d08:	4a10      	ldr	r2, [pc, #64]	@ (8000d4c <SystemInit+0xf0>)
 8000d0a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <SystemInit+0xec>)
 8000d0e:	4a10      	ldr	r2, [pc, #64]	@ (8000d50 <SystemInit+0xf4>)
 8000d10:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000d12:	4b0d      	ldr	r3, [pc, #52]	@ (8000d48 <SystemInit+0xec>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	4a0c      	ldr	r2, [pc, #48]	@ (8000d48 <SystemInit+0xec>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <SystemInit+0xec>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	4a09      	ldr	r2, [pc, #36]	@ (8000d48 <SystemInit+0xec>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	61d3      	str	r3, [r2, #28]
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00
 8000d3c:	44020c00 	.word	0x44020c00
 8000d40:	eae2eae3 	.word	0xeae2eae3
 8000d44:	01010280 	.word	0x01010280
 8000d48:	40022000 	.word	0x40022000
 8000d4c:	08192a3b 	.word	0x08192a3b
 8000d50:	4c5d6e7f 	.word	0x4c5d6e7f

08000d54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d54:	480d      	ldr	r0, [pc, #52]	@ (8000d8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d56:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d58:	f7ff ff80 	bl	8000c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d5c:	480c      	ldr	r0, [pc, #48]	@ (8000d90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d5e:	490d      	ldr	r1, [pc, #52]	@ (8000d94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d60:	4a0d      	ldr	r2, [pc, #52]	@ (8000d98 <LoopForever+0xe>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d74:	4c0a      	ldr	r4, [pc, #40]	@ (8000da0 <LoopForever+0x16>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d82:	f006 fd3f 	bl	8007804 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d86:	f7ff fc3f 	bl	8000608 <main>

08000d8a <LoopForever>:

LoopForever:
    b LoopForever
 8000d8a:	e7fe      	b.n	8000d8a <LoopForever>
  ldr   r0, =_estack
 8000d8c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000d98:	080078b0 	.word	0x080078b0
  ldr r2, =_sbss
 8000d9c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000da0:	20000150 	.word	0x20000150

08000da4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC1_IRQHandler>
	...

08000da8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	@ 0x30
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d009      	beq.n	8000dd0 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d006      	beq.n	8000dd0 <BSP_LED_Init+0x28>
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d003      	beq.n	8000dd0 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000dc8:	f06f 0301 	mvn.w	r3, #1
 8000dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000dce:	e055      	b.n	8000e7c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d10f      	bne.n	8000df6 <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 8000dd6:	4b2c      	ldr	r3, [pc, #176]	@ (8000e88 <BSP_LED_Init+0xe0>)
 8000dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ddc:	4a2a      	ldr	r2, [pc, #168]	@ (8000e88 <BSP_LED_Init+0xe0>)
 8000dde:	f043 0320 	orr.w	r3, r3, #32
 8000de2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000de6:	4b28      	ldr	r3, [pc, #160]	@ (8000e88 <BSP_LED_Init+0xe0>)
 8000de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dec:	f003 0320 	and.w	r3, r3, #32
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	e021      	b.n	8000e3a <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d10f      	bne.n	8000e1c <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8000dfc:	4b22      	ldr	r3, [pc, #136]	@ (8000e88 <BSP_LED_Init+0xe0>)
 8000dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e02:	4a21      	ldr	r2, [pc, #132]	@ (8000e88 <BSP_LED_Init+0xe0>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e88 <BSP_LED_Init+0xe0>)
 8000e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	e00e      	b.n	8000e3a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <BSP_LED_Init+0xe0>)
 8000e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e22:	4a19      	ldr	r2, [pc, #100]	@ (8000e88 <BSP_LED_Init+0xe0>)
 8000e24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e28:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e2c:	4b16      	ldr	r3, [pc, #88]	@ (8000e88 <BSP_LED_Init+0xe0>)
 8000e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	4a13      	ldr	r2, [pc, #76]	@ (8000e8c <BSP_LED_Init+0xe4>)
 8000e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e42:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	4a0f      	ldr	r2, [pc, #60]	@ (8000e90 <BSP_LED_Init+0xe8>)
 8000e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e58:	f107 0218 	add.w	r2, r7, #24
 8000e5c:	4611      	mov	r1, r2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 fc4c 	bl	80016fc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	4a0a      	ldr	r2, [pc, #40]	@ (8000e90 <BSP_LED_Init+0xe8>)
 8000e68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	4a07      	ldr	r2, [pc, #28]	@ (8000e8c <BSP_LED_Init+0xe4>)
 8000e70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e74:	2200      	movs	r2, #0
 8000e76:	4619      	mov	r1, r3
 8000e78:	f000 fd9e 	bl	80019b8 <HAL_GPIO_WritePin>
  }

  return ret;
 8000e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3730      	adds	r7, #48	@ 0x30
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	44020c00 	.word	0x44020c00
 8000e8c:	0800787c 	.word	0x0800787c
 8000e90:	20000008 	.word	0x20000008

08000e94 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	460a      	mov	r2, r1
 8000e9e:	71fb      	strb	r3, [r7, #7]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000ea4:	4b30      	ldr	r3, [pc, #192]	@ (8000f68 <BSP_PB_Init+0xd4>)
 8000ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eaa:	4a2f      	ldr	r2, [pc, #188]	@ (8000f68 <BSP_PB_Init+0xd4>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f68 <BSP_PB_Init+0xd4>)
 8000eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000ec2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ec6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10c      	bne.n	8000ef0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	4a23      	ldr	r2, [pc, #140]	@ (8000f6c <BSP_PB_Init+0xd8>)
 8000ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee2:	f107 020c 	add.w	r2, r7, #12
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fc07 	bl	80016fc <HAL_GPIO_Init>
 8000eee:	e036      	b.n	8000f5e <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f70 <BSP_PB_Init+0xdc>)
 8000ef2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8000f6c <BSP_PB_Init+0xd8>)
 8000ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efc:	f107 020c 	add.w	r2, r7, #12
 8000f00:	4611      	mov	r1, r2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fbfa 	bl	80016fc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000f08:	79fa      	ldrb	r2, [r7, #7]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	4413      	add	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4a18      	ldr	r2, [pc, #96]	@ (8000f74 <BSP_PB_Init+0xe0>)
 8000f14:	441a      	add	r2, r3
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	4917      	ldr	r1, [pc, #92]	@ (8000f78 <BSP_PB_Init+0xe4>)
 8000f1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4610      	mov	r0, r2
 8000f22:	f000 fb8f 	bl	8001644 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000f26:	79fa      	ldrb	r2, [r7, #7]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4413      	add	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4a10      	ldr	r2, [pc, #64]	@ (8000f74 <BSP_PB_Init+0xe0>)
 8000f32:	1898      	adds	r0, r3, r2
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	4a11      	ldr	r2, [pc, #68]	@ (8000f7c <BSP_PB_Init+0xe8>)
 8000f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	f000 fb54 	bl	80015ec <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000f44:	2018      	movs	r0, #24
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	4a0d      	ldr	r2, [pc, #52]	@ (8000f80 <BSP_PB_Init+0xec>)
 8000f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4619      	mov	r1, r3
 8000f52:	f000 fa73 	bl	800143c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000f56:	2318      	movs	r3, #24
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 fa89 	bl	8001470 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3720      	adds	r7, #32
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	44020c00 	.word	0x44020c00
 8000f6c:	20000014 	.word	0x20000014
 8000f70:	10110000 	.word	0x10110000
 8000f74:	200000ac 	.word	0x200000ac
 8000f78:	08007884 	.word	0x08007884
 8000f7c:	20000018 	.word	0x20000018
 8000f80:	2000001c 	.word	0x2000001c

08000f84 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000f8e:	79fa      	ldrb	r2, [r7, #7]
 8000f90:	4613      	mov	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4413      	add	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4a04      	ldr	r2, [pc, #16]	@ (8000fac <BSP_PB_IRQHandler+0x28>)
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 fb65 	bl	800166c <HAL_EXTI_IRQHandler>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200000ac 	.word	0x200000ac

08000fb0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000fde:	f06f 0301 	mvn.w	r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	e018      	b.n	8001018 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2294      	movs	r2, #148	@ 0x94
 8000fea:	fb02 f303 	mul.w	r3, r2, r3
 8000fee:	4a0d      	ldr	r2, [pc, #52]	@ (8001024 <BSP_COM_Init+0x5c>)
 8000ff0:	4413      	add	r3, r2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f854 	bl	80010a0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	2294      	movs	r2, #148	@ 0x94
 8000ffc:	fb02 f303 	mul.w	r3, r2, r3
 8001000:	4a08      	ldr	r2, [pc, #32]	@ (8001024 <BSP_COM_Init+0x5c>)
 8001002:	4413      	add	r3, r2
 8001004:	6839      	ldr	r1, [r7, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f80e 	bl	8001028 <MX_USART_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d002      	beq.n	8001018 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001012:	f06f 0303 	mvn.w	r3, #3
 8001016:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001018:	68fb      	ldr	r3, [r7, #12]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200000b8 	.word	0x200000b8

08001028 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001032:	4b16      	ldr	r3, [pc, #88]	@ (800108c <MX_USART_Init+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	220c      	movs	r2, #12
 8001046:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	895b      	ldrh	r3, [r3, #10]
 800104c:	461a      	mov	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	891b      	ldrh	r3, [r3, #8]
 800105e:	461a      	mov	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	899b      	ldrh	r3, [r3, #12]
 8001068:	461a      	mov	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001074:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f005 ff51 	bl	8006f24 <HAL_UART_Init>
 8001082:	4603      	mov	r3, r0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000004 	.word	0x20000004

08001090 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001094:	2000      	movs	r0, #0
 8001096:	f7ff ff8b 	bl	8000fb0 <BSP_PB_Callback>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	@ 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80010a8:	4b27      	ldr	r3, [pc, #156]	@ (8001148 <COM1_MspInit+0xa8>)
 80010aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010ae:	4a26      	ldr	r2, [pc, #152]	@ (8001148 <COM1_MspInit+0xa8>)
 80010b0:	f043 0308 	orr.w	r3, r3, #8
 80010b4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010b8:	4b23      	ldr	r3, [pc, #140]	@ (8001148 <COM1_MspInit+0xa8>)
 80010ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80010c6:	4b20      	ldr	r3, [pc, #128]	@ (8001148 <COM1_MspInit+0xa8>)
 80010c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001148 <COM1_MspInit+0xa8>)
 80010ce:	f043 0308 	orr.w	r3, r3, #8
 80010d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001148 <COM1_MspInit+0xa8>)
 80010d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010dc:	f003 0308 	and.w	r3, r3, #8
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80010e4:	4b18      	ldr	r3, [pc, #96]	@ (8001148 <COM1_MspInit+0xa8>)
 80010e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80010ea:	4a17      	ldr	r2, [pc, #92]	@ (8001148 <COM1_MspInit+0xa8>)
 80010ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010f0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80010f4:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <COM1_MspInit+0xa8>)
 80010f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80010fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001102:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001106:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800110c:	2302      	movs	r3, #2
 800110e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001110:	2301      	movs	r3, #1
 8001112:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001114:	2307      	movs	r3, #7
 8001116:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4619      	mov	r1, r3
 800111e:	480b      	ldr	r0, [pc, #44]	@ (800114c <COM1_MspInit+0xac>)
 8001120:	f000 faec 	bl	80016fc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001124:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001128:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800112e:	2307      	movs	r3, #7
 8001130:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	4804      	ldr	r0, [pc, #16]	@ (800114c <COM1_MspInit+0xac>)
 800113a:	f000 fadf 	bl	80016fc <HAL_GPIO_Init>
}
 800113e:	bf00      	nop
 8001140:	3728      	adds	r7, #40	@ 0x28
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	44020c00 	.word	0x44020c00
 800114c:	42020c00 	.word	0x42020c00

08001150 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001154:	2003      	movs	r0, #3
 8001156:	f000 f966 	bl	8001426 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800115a:	f001 fa45 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 800115e:	4602      	mov	r2, r0
 8001160:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <HAL_Init+0x44>)
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	f003 030f 	and.w	r3, r3, #15
 8001168:	490b      	ldr	r1, [pc, #44]	@ (8001198 <HAL_Init+0x48>)
 800116a:	5ccb      	ldrb	r3, [r1, r3]
 800116c:	fa22 f303 	lsr.w	r3, r2, r3
 8001170:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <HAL_Init+0x4c>)
 8001172:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001174:	2004      	movs	r0, #4
 8001176:	f000 f9ab 	bl	80014d0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800117a:	200f      	movs	r0, #15
 800117c:	f000 f810 	bl	80011a0 <HAL_InitTick>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e002      	b.n	8001190 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800118a:	f7ff fccd 	bl	8000b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	bd80      	pop	{r7, pc}
 8001194:	44020c00 	.word	0x44020c00
 8001198:	08007864 	.word	0x08007864
 800119c:	20000000 	.word	0x20000000

080011a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80011ac:	4b33      	ldr	r3, [pc, #204]	@ (800127c <HAL_InitTick+0xdc>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e05c      	b.n	8001272 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80011b8:	4b31      	ldr	r3, [pc, #196]	@ (8001280 <HAL_InitTick+0xe0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	2b04      	cmp	r3, #4
 80011c2:	d10c      	bne.n	80011de <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80011c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001284 <HAL_InitTick+0xe4>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b2c      	ldr	r3, [pc, #176]	@ (800127c <HAL_InitTick+0xdc>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	e037      	b.n	800124e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80011de:	f000 f9cf 	bl	8001580 <HAL_SYSTICK_GetCLKSourceConfig>
 80011e2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d023      	beq.n	8001232 <HAL_InitTick+0x92>
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d82d      	bhi.n	800124c <HAL_InitTick+0xac>
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_InitTick+0x5e>
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d00d      	beq.n	8001218 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80011fc:	e026      	b.n	800124c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80011fe:	4b21      	ldr	r3, [pc, #132]	@ (8001284 <HAL_InitTick+0xe4>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4b1e      	ldr	r3, [pc, #120]	@ (800127c <HAL_InitTick+0xdc>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	4619      	mov	r1, r3
 8001208:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800120c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001210:	fbb2 f3f3 	udiv	r3, r2, r3
 8001214:	60fb      	str	r3, [r7, #12]
        break;
 8001216:	e01a      	b.n	800124e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001218:	4b18      	ldr	r3, [pc, #96]	@ (800127c <HAL_InitTick+0xdc>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001222:	fbb3 f3f2 	udiv	r3, r3, r2
 8001226:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800122a:	fbb2 f3f3 	udiv	r3, r2, r3
 800122e:	60fb      	str	r3, [r7, #12]
        break;
 8001230:	e00d      	b.n	800124e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001232:	4b12      	ldr	r3, [pc, #72]	@ (800127c <HAL_InitTick+0xdc>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800123c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001240:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001244:	fbb2 f3f3 	udiv	r3, r2, r3
 8001248:	60fb      	str	r3, [r7, #12]
        break;
 800124a:	e000      	b.n	800124e <HAL_InitTick+0xae>
        break;
 800124c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f000 f91c 	bl	800148c <HAL_SYSTICK_Config>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e009      	b.n	8001272 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125e:	2200      	movs	r2, #0
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	f04f 30ff 	mov.w	r0, #4294967295
 8001266:	f000 f8e9 	bl	800143c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800126a:	4a07      	ldr	r2, [pc, #28]	@ (8001288 <HAL_InitTick+0xe8>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000024 	.word	0x20000024
 8001280:	e000e010 	.word	0xe000e010
 8001284:	20000000 	.word	0x20000000
 8001288:	20000020 	.word	0x20000020

0800128c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <HAL_IncTick+0x20>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_IncTick+0x24>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a04      	ldr	r2, [pc, #16]	@ (80012b0 <HAL_IncTick+0x24>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000024 	.word	0x20000024
 80012b0:	2000014c 	.word	0x2000014c

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b03      	ldr	r3, [pc, #12]	@ (80012c8 <HAL_GetTick+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	2000014c 	.word	0x2000014c

080012cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012e8:	4013      	ands	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fe:	4a04      	ldr	r2, [pc, #16]	@ (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	60d3      	str	r3, [r2, #12]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001318:	4b04      	ldr	r3, [pc, #16]	@ (800132c <__NVIC_GetPriorityGrouping+0x18>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	f003 0307 	and.w	r3, r3, #7
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800133a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db0b      	blt.n	800135a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	f003 021f 	and.w	r2, r3, #31
 8001348:	4907      	ldr	r1, [pc, #28]	@ (8001368 <__NVIC_EnableIRQ+0x38>)
 800134a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800134e:	095b      	lsrs	r3, r3, #5
 8001350:	2001      	movs	r0, #1
 8001352:	fa00 f202 	lsl.w	r2, r0, r2
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000e100 	.word	0xe000e100

0800136c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001378:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137c:	2b00      	cmp	r3, #0
 800137e:	db0a      	blt.n	8001396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	b2da      	uxtb	r2, r3
 8001384:	490c      	ldr	r1, [pc, #48]	@ (80013b8 <__NVIC_SetPriority+0x4c>)
 8001386:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138a:	0112      	lsls	r2, r2, #4
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	440b      	add	r3, r1
 8001390:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001394:	e00a      	b.n	80013ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4908      	ldr	r1, [pc, #32]	@ (80013bc <__NVIC_SetPriority+0x50>)
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	3b04      	subs	r3, #4
 80013a4:	0112      	lsls	r2, r2, #4
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	440b      	add	r3, r1
 80013aa:	761a      	strb	r2, [r3, #24]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000e100 	.word	0xe000e100
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	@ 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f1c3 0307 	rsb	r3, r3, #7
 80013da:	2b04      	cmp	r3, #4
 80013dc:	bf28      	it	cs
 80013de:	2304      	movcs	r3, #4
 80013e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3304      	adds	r3, #4
 80013e6:	2b06      	cmp	r3, #6
 80013e8:	d902      	bls.n	80013f0 <NVIC_EncodePriority+0x30>
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3b03      	subs	r3, #3
 80013ee:	e000      	b.n	80013f2 <NVIC_EncodePriority+0x32>
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	f04f 32ff 	mov.w	r2, #4294967295
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43da      	mvns	r2, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	401a      	ands	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001408:	f04f 31ff 	mov.w	r1, #4294967295
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	43d9      	mvns	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	4313      	orrs	r3, r2
         );
}
 800141a:	4618      	mov	r0, r3
 800141c:	3724      	adds	r7, #36	@ 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ff4c 	bl	80012cc <__NVIC_SetPriorityGrouping>
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800144a:	f7ff ff63 	bl	8001314 <__NVIC_GetPriorityGrouping>
 800144e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	68b9      	ldr	r1, [r7, #8]
 8001454:	6978      	ldr	r0, [r7, #20]
 8001456:	f7ff ffb3 	bl	80013c0 <NVIC_EncodePriority>
 800145a:	4602      	mov	r2, r0
 800145c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001460:	4611      	mov	r1, r2
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ff82 	bl	800136c <__NVIC_SetPriority>
}
 8001468:	bf00      	nop
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800147a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff56 	bl	8001330 <__NVIC_EnableIRQ>
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800149c:	d301      	bcc.n	80014a2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800149e:	2301      	movs	r3, #1
 80014a0:	e00d      	b.n	80014be <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80014a2:	4a0a      	ldr	r2, [pc, #40]	@ (80014cc <HAL_SYSTICK_Config+0x40>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80014aa:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <HAL_SYSTICK_Config+0x40>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80014b0:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_SYSTICK_Config+0x40>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a05      	ldr	r2, [pc, #20]	@ (80014cc <HAL_SYSTICK_Config+0x40>)
 80014b6:	f043 0303 	orr.w	r3, r3, #3
 80014ba:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000e010 	.word	0xe000e010

080014d0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d844      	bhi.n	8001568 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80014de:	a201      	add	r2, pc, #4	@ (adr r2, 80014e4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80014e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e4:	08001507 	.word	0x08001507
 80014e8:	08001525 	.word	0x08001525
 80014ec:	08001547 	.word	0x08001547
 80014f0:	08001569 	.word	0x08001569
 80014f4:	080014f9 	.word	0x080014f9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80014f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001578 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001578 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	6013      	str	r3, [r2, #0]
      break;
 8001504:	e031      	b.n	800156a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001506:	4b1c      	ldr	r3, [pc, #112]	@ (8001578 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a1b      	ldr	r2, [pc, #108]	@ (8001578 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800150c:	f023 0304 	bic.w	r3, r3, #4
 8001510:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001512:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001514:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001518:	4a18      	ldr	r2, [pc, #96]	@ (800157c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800151a:	f023 030c 	bic.w	r3, r3, #12
 800151e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001522:	e022      	b.n	800156a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001524:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a13      	ldr	r2, [pc, #76]	@ (8001578 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800152a:	f023 0304 	bic.w	r3, r3, #4
 800152e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001530:	4b12      	ldr	r3, [pc, #72]	@ (800157c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001532:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001536:	f023 030c 	bic.w	r3, r3, #12
 800153a:	4a10      	ldr	r2, [pc, #64]	@ (800157c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001544:	e011      	b.n	800156a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001546:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a0b      	ldr	r2, [pc, #44]	@ (8001578 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800154c:	f023 0304 	bic.w	r3, r3, #4
 8001550:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001552:	4b0a      	ldr	r3, [pc, #40]	@ (800157c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001554:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001558:	f023 030c 	bic.w	r3, r3, #12
 800155c:	4a07      	ldr	r2, [pc, #28]	@ (800157c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800155e:	f043 0308 	orr.w	r3, r3, #8
 8001562:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001566:	e000      	b.n	800156a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001568:	bf00      	nop
  }
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e010 	.word	0xe000e010
 800157c:	44020c00 	.word	0x44020c00

08001580 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001586:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	2b00      	cmp	r3, #0
 8001590:	d002      	beq.n	8001598 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001592:	2304      	movs	r3, #4
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	e01e      	b.n	80015d6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001598:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800159a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d00f      	beq.n	80015ca <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d80f      	bhi.n	80015d0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d003      	beq.n	80015c4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80015bc:	e008      	b.n	80015d0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
        break;
 80015c2:	e008      	b.n	80015d6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80015c4:	2301      	movs	r3, #1
 80015c6:	607b      	str	r3, [r7, #4]
        break;
 80015c8:	e005      	b.n	80015d6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80015ca:	2302      	movs	r3, #2
 80015cc:	607b      	str	r3, [r7, #4]
        break;
 80015ce:	e002      	b.n	80015d6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80015d0:	2300      	movs	r3, #0
 80015d2:	607b      	str	r3, [r7, #4]
        break;
 80015d4:	bf00      	nop
    }
  }
  return systick_source;
 80015d6:	687b      	ldr	r3, [r7, #4]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000e010 	.word	0xe000e010
 80015e8:	44020c00 	.word	0x44020c00

080015ec <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80015ec:	b480      	push	{r7}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	460b      	mov	r3, r1
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80015fe:	7afb      	ldrb	r3, [r7, #11]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d011      	beq.n	8001628 <HAL_EXTI_RegisterCallback+0x3c>
 8001604:	2b02      	cmp	r3, #2
 8001606:	dc13      	bgt.n	8001630 <HAL_EXTI_RegisterCallback+0x44>
 8001608:	2b00      	cmp	r3, #0
 800160a:	d002      	beq.n	8001612 <HAL_EXTI_RegisterCallback+0x26>
 800160c:	2b01      	cmp	r3, #1
 800160e:	d007      	beq.n	8001620 <HAL_EXTI_RegisterCallback+0x34>
 8001610:	e00e      	b.n	8001630 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	609a      	str	r2, [r3, #8]
      break;
 800161e:	e00a      	b.n	8001636 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	605a      	str	r2, [r3, #4]
      break;
 8001626:	e006      	b.n	8001636 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	609a      	str	r2, [r3, #8]
      break;
 800162e:	e002      	b.n	8001636 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	75fb      	strb	r3, [r7, #23]
      break;
 8001634:	bf00      	nop
  }

  return status;
 8001636:	7dfb      	ldrb	r3, [r7, #23]
}
 8001638:	4618      	mov	r0, r3
 800163a:	371c      	adds	r7, #28
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e003      	b.n	8001660 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800165e:	2300      	movs	r3, #0
  }
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	0c1b      	lsrs	r3, r3, #16
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 031f 	and.w	r3, r3, #31
 8001688:	2201      	movs	r2, #1
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	015a      	lsls	r2, r3, #5
 8001694:	4b17      	ldr	r3, [pc, #92]	@ (80016f4 <HAL_EXTI_IRQHandler+0x88>)
 8001696:	4413      	add	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d009      	beq.n	80016be <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	015a      	lsls	r2, r3, #5
 80016c2:	4b0d      	ldr	r3, [pc, #52]	@ (80016f8 <HAL_EXTI_IRQHandler+0x8c>)
 80016c4:	4413      	add	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d009      	beq.n	80016ec <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d002      	beq.n	80016ec <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	4798      	blx	r3
    }
  }
}
 80016ec:	bf00      	nop
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	4402200c 	.word	0x4402200c
 80016f8:	44022010 	.word	0x44022010

080016fc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b087      	sub	sp, #28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800170a:	e142      	b.n	8001992 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	2101      	movs	r1, #1
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	fa01 f303 	lsl.w	r3, r1, r3
 8001718:	4013      	ands	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 8134 	beq.w	800198c <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d003      	beq.n	8001734 <HAL_GPIO_Init+0x38>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b12      	cmp	r3, #18
 8001732:	d125      	bne.n	8001780 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	08da      	lsrs	r2, r3, #3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3208      	adds	r2, #8
 800173c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001740:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	220f      	movs	r2, #15
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	4013      	ands	r3, r2
 8001756:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	f003 020f 	and.w	r2, r3, #15
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	4313      	orrs	r3, r2
 8001770:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	08da      	lsrs	r2, r3, #3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3208      	adds	r2, #8
 800177a:	6979      	ldr	r1, [r7, #20]
 800177c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2203      	movs	r2, #3
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	4013      	ands	r3, r2
 8001796:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0203 	and.w	r2, r3, #3
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d00b      	beq.n	80017d4 <HAL_GPIO_Init+0xd8>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d007      	beq.n	80017d4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017c8:	2b11      	cmp	r3, #17
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b12      	cmp	r3, #18
 80017d2:	d130      	bne.n	8001836 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	4013      	ands	r3, r2
 80017ea:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800180a:	2201      	movs	r2, #1
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	4013      	ands	r3, r2
 8001818:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	091b      	lsrs	r3, r3, #4
 8001820:	f003 0201 	and.w	r2, r3, #1
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	4313      	orrs	r3, r2
 800182e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b03      	cmp	r3, #3
 8001840:	d109      	bne.n	8001856 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 800184a:	2b03      	cmp	r3, #3
 800184c:	d11b      	bne.n	8001886 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d017      	beq.n	8001886 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	2203      	movs	r2, #3
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	4013      	ands	r3, r2
 800186c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	4313      	orrs	r3, r2
 800187e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d07c      	beq.n	800198c <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001892:	4a47      	ldr	r2, [pc, #284]	@ (80019b0 <HAL_GPIO_Init+0x2b4>)
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	089b      	lsrs	r3, r3, #2
 8001898:	3318      	adds	r3, #24
 800189a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	220f      	movs	r2, #15
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	4013      	ands	r3, r2
 80018b4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	0a9a      	lsrs	r2, r3, #10
 80018ba:	4b3e      	ldr	r3, [pc, #248]	@ (80019b4 <HAL_GPIO_Init+0x2b8>)
 80018bc:	4013      	ands	r3, r2
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	f002 0203 	and.w	r2, r2, #3
 80018c4:	00d2      	lsls	r2, r2, #3
 80018c6:	4093      	lsls	r3, r2
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80018ce:	4938      	ldr	r1, [pc, #224]	@ (80019b0 <HAL_GPIO_Init+0x2b4>)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	3318      	adds	r3, #24
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80018dc:	4b34      	ldr	r3, [pc, #208]	@ (80019b0 <HAL_GPIO_Init+0x2b4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	4013      	ands	r3, r2
 80018ea:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001900:	4a2b      	ldr	r2, [pc, #172]	@ (80019b0 <HAL_GPIO_Init+0x2b4>)
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001906:	4b2a      	ldr	r3, [pc, #168]	@ (80019b0 <HAL_GPIO_Init+0x2b4>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	43db      	mvns	r3, r3
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	4013      	ands	r3, r2
 8001914:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4313      	orrs	r3, r2
 8001928:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800192a:	4a21      	ldr	r2, [pc, #132]	@ (80019b0 <HAL_GPIO_Init+0x2b4>)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001930:	4b1f      	ldr	r3, [pc, #124]	@ (80019b0 <HAL_GPIO_Init+0x2b4>)
 8001932:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001936:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	43db      	mvns	r3, r3
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	4013      	ands	r3, r2
 8001940:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4313      	orrs	r3, r2
 8001954:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001956:	4a16      	ldr	r2, [pc, #88]	@ (80019b0 <HAL_GPIO_Init+0x2b4>)
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800195e:	4b14      	ldr	r3, [pc, #80]	@ (80019b0 <HAL_GPIO_Init+0x2b4>)
 8001960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001964:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	43db      	mvns	r3, r3
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	4013      	ands	r3, r2
 800196e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4313      	orrs	r3, r2
 8001982:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001984:	4a0a      	ldr	r2, [pc, #40]	@ (80019b0 <HAL_GPIO_Init+0x2b4>)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	3301      	adds	r3, #1
 8001990:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	fa22 f303 	lsr.w	r3, r2, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	f47f aeb5 	bne.w	800170c <HAL_GPIO_Init+0x10>
  }
}
 80019a2:	bf00      	nop
 80019a4:	bf00      	nop
 80019a6:	371c      	adds	r7, #28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	44022000 	.word	0x44022000
 80019b4:	002f7f7f 	.word	0x002f7f7f

080019b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	807b      	strh	r3, [r7, #2]
 80019c4:	4613      	mov	r3, r2
 80019c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019c8:	787b      	ldrb	r3, [r7, #1]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019ce:	887a      	ldrh	r2, [r7, #2]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019d4:	e002      	b.n	80019dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019d6:	887a      	ldrh	r2, [r7, #2]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80019ec:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80019ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f0:	4a04      	ldr	r2, [pc, #16]	@ (8001a04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	44020800 	.word	0x44020800

08001a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d102      	bne.n	8001a1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	f000 bc28 	b.w	800226c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a1c:	4b94      	ldr	r3, [pc, #592]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	f003 0318 	and.w	r3, r3, #24
 8001a24:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001a26:	4b92      	ldr	r3, [pc, #584]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0310 	and.w	r3, r3, #16
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d05b      	beq.n	8001af4 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d005      	beq.n	8001a4e <HAL_RCC_OscConfig+0x46>
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	2b18      	cmp	r3, #24
 8001a46:	d114      	bne.n	8001a72 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d111      	bne.n	8001a72 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d102      	bne.n	8001a5c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	f000 bc08 	b.w	800226c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001a5c:	4b84      	ldr	r3, [pc, #528]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	041b      	lsls	r3, r3, #16
 8001a6a:	4981      	ldr	r1, [pc, #516]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001a70:	e040      	b.n	8001af4 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d023      	beq.n	8001ac2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a7a:	4b7d      	ldr	r3, [pc, #500]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a7c      	ldr	r2, [pc, #496]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a86:	f7ff fc15 	bl	80012b4 <HAL_GetTick>
 8001a8a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001a8e:	f7ff fc11 	bl	80012b4 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e3e5      	b.n	800226c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001aa0:	4b73      	ldr	r3, [pc, #460]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001aac:	4b70      	ldr	r3, [pc, #448]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	041b      	lsls	r3, r3, #16
 8001aba:	496d      	ldr	r1, [pc, #436]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	618b      	str	r3, [r1, #24]
 8001ac0:	e018      	b.n	8001af4 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ac2:	4b6b      	ldr	r3, [pc, #428]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a6a      	ldr	r2, [pc, #424]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001ac8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ace:	f7ff fbf1 	bl	80012b4 <HAL_GetTick>
 8001ad2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001ad6:	f7ff fbed 	bl	80012b4 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e3c1      	b.n	800226c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001ae8:	4b61      	ldr	r3, [pc, #388]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f0      	bne.n	8001ad6 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80a0 	beq.w	8001c42 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	2b10      	cmp	r3, #16
 8001b06:	d005      	beq.n	8001b14 <HAL_RCC_OscConfig+0x10c>
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	2b18      	cmp	r3, #24
 8001b0c:	d109      	bne.n	8001b22 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	d106      	bne.n	8001b22 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f040 8092 	bne.w	8001c42 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e3a4      	b.n	800226c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_OscConfig+0x132>
 8001b2c:	4b50      	ldr	r3, [pc, #320]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a4f      	ldr	r2, [pc, #316]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001b32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	e058      	b.n	8001bec <HAL_RCC_OscConfig+0x1e4>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d112      	bne.n	8001b68 <HAL_RCC_OscConfig+0x160>
 8001b42:	4b4b      	ldr	r3, [pc, #300]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a4a      	ldr	r2, [pc, #296]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001b48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	4b48      	ldr	r3, [pc, #288]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a47      	ldr	r2, [pc, #284]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001b54:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	4b45      	ldr	r3, [pc, #276]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a44      	ldr	r2, [pc, #272]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001b60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	e041      	b.n	8001bec <HAL_RCC_OscConfig+0x1e4>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b70:	d112      	bne.n	8001b98 <HAL_RCC_OscConfig+0x190>
 8001b72:	4b3f      	ldr	r3, [pc, #252]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a3e      	ldr	r2, [pc, #248]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001b78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a3b      	ldr	r2, [pc, #236]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001b84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	4b39      	ldr	r3, [pc, #228]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a38      	ldr	r2, [pc, #224]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001b90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e029      	b.n	8001bec <HAL_RCC_OscConfig+0x1e4>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001ba0:	d112      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x1c0>
 8001ba2:	4b33      	ldr	r3, [pc, #204]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a32      	ldr	r2, [pc, #200]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001ba8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b30      	ldr	r3, [pc, #192]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a2f      	ldr	r2, [pc, #188]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001bb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	4b2d      	ldr	r3, [pc, #180]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a2c      	ldr	r2, [pc, #176]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	e011      	b.n	8001bec <HAL_RCC_OscConfig+0x1e4>
 8001bc8:	4b29      	ldr	r3, [pc, #164]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a28      	ldr	r2, [pc, #160]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001bce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b26      	ldr	r3, [pc, #152]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a25      	ldr	r2, [pc, #148]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001bda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4b23      	ldr	r3, [pc, #140]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a22      	ldr	r2, [pc, #136]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001be6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d013      	beq.n	8001c1c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fb5e 	bl	80012b4 <HAL_GetTick>
 8001bf8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001bfc:	f7ff fb5a 	bl	80012b4 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b64      	cmp	r3, #100	@ 0x64
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e32e      	b.n	800226c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c0e:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x1f4>
 8001c1a:	e012      	b.n	8001c42 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fb4a 	bl	80012b4 <HAL_GetTick>
 8001c20:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001c24:	f7ff fb46 	bl	80012b4 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	@ 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e31a      	b.n	800226c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c36:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 809a 	beq.w	8001d84 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <HAL_RCC_OscConfig+0x25a>
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	2b18      	cmp	r3, #24
 8001c5a:	d149      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d146      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d104      	bne.n	8001c74 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e2fe      	b.n	800226c <HAL_RCC_OscConfig+0x864>
 8001c6e:	bf00      	nop
 8001c70:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d11c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001c7a:	4b9a      	ldr	r3, [pc, #616]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0218 	and.w	r2, r3, #24
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d014      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001c8a:	4b96      	ldr	r3, [pc, #600]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 0218 	bic.w	r2, r3, #24
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	4993      	ldr	r1, [pc, #588]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001c9c:	f000 fdd0 	bl	8002840 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ca0:	4b91      	ldr	r3, [pc, #580]	@ (8001ee8 <HAL_RCC_OscConfig+0x4e0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fa7b 	bl	80011a0 <HAL_InitTick>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e2db      	b.n	800226c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7ff fafe 	bl	80012b4 <HAL_GetTick>
 8001cb8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001cbc:	f7ff fafa 	bl	80012b4 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e2ce      	b.n	800226c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cce:	4b85      	ldr	r3, [pc, #532]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001cda:	4b82      	ldr	r3, [pc, #520]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	041b      	lsls	r3, r3, #16
 8001ce8:	497e      	ldr	r1, [pc, #504]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001cee:	e049      	b.n	8001d84 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d02c      	beq.n	8001d52 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001cf8:	4b7a      	ldr	r3, [pc, #488]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f023 0218 	bic.w	r2, r3, #24
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	4977      	ldr	r1, [pc, #476]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001d0a:	4b76      	ldr	r3, [pc, #472]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a75      	ldr	r2, [pc, #468]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d16:	f7ff facd 	bl	80012b4 <HAL_GetTick>
 8001d1a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001d1e:	f7ff fac9 	bl	80012b4 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e29d      	b.n	800226c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d30:	4b6c      	ldr	r3, [pc, #432]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001d3c:	4b69      	ldr	r3, [pc, #420]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	041b      	lsls	r3, r3, #16
 8001d4a:	4966      	ldr	r1, [pc, #408]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	610b      	str	r3, [r1, #16]
 8001d50:	e018      	b.n	8001d84 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d52:	4b64      	ldr	r3, [pc, #400]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a63      	ldr	r2, [pc, #396]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001d58:	f023 0301 	bic.w	r3, r3, #1
 8001d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5e:	f7ff faa9 	bl	80012b4 <HAL_GetTick>
 8001d62:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001d66:	f7ff faa5 	bl	80012b4 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e279      	b.n	800226c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d78:	4b5a      	ldr	r3, [pc, #360]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f0      	bne.n	8001d66 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d03c      	beq.n	8001e0a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d01c      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d98:	4b52      	ldr	r3, [pc, #328]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001d9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d9e:	4a51      	ldr	r2, [pc, #324]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001da0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001da4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da8:	f7ff fa84 	bl	80012b4 <HAL_GetTick>
 8001dac:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001db0:	f7ff fa80 	bl	80012b4 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e254      	b.n	800226c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001dc2:	4b48      	ldr	r3, [pc, #288]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001dc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0ef      	beq.n	8001db0 <HAL_RCC_OscConfig+0x3a8>
 8001dd0:	e01b      	b.n	8001e0a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd2:	4b44      	ldr	r3, [pc, #272]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001dd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dd8:	4a42      	ldr	r2, [pc, #264]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001dda:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001dde:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de2:	f7ff fa67 	bl	80012b4 <HAL_GetTick>
 8001de6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001dea:	f7ff fa63 	bl	80012b4 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e237      	b.n	800226c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001dfc:	4b39      	ldr	r3, [pc, #228]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001dfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1ef      	bne.n	8001dea <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 80d2 	beq.w	8001fbc <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001e18:	4b34      	ldr	r3, [pc, #208]	@ (8001eec <HAL_RCC_OscConfig+0x4e4>)
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d118      	bne.n	8001e56 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001e24:	4b31      	ldr	r3, [pc, #196]	@ (8001eec <HAL_RCC_OscConfig+0x4e4>)
 8001e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e28:	4a30      	ldr	r2, [pc, #192]	@ (8001eec <HAL_RCC_OscConfig+0x4e4>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e30:	f7ff fa40 	bl	80012b4 <HAL_GetTick>
 8001e34:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e38:	f7ff fa3c 	bl	80012b4 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e210      	b.n	800226c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001e4a:	4b28      	ldr	r3, [pc, #160]	@ (8001eec <HAL_RCC_OscConfig+0x4e4>)
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d108      	bne.n	8001e70 <HAL_RCC_OscConfig+0x468>
 8001e5e:	4b21      	ldr	r3, [pc, #132]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001e60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e64:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e6e:	e074      	b.n	8001f5a <HAL_RCC_OscConfig+0x552>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d118      	bne.n	8001eaa <HAL_RCC_OscConfig+0x4a2>
 8001e78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001e7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e7e:	4a19      	ldr	r2, [pc, #100]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001e80:	f023 0301 	bic.w	r3, r3, #1
 8001e84:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e88:	4b16      	ldr	r3, [pc, #88]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001e8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e8e:	4a15      	ldr	r2, [pc, #84]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001e90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e98:	4b12      	ldr	r3, [pc, #72]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001e9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e9e:	4a11      	ldr	r2, [pc, #68]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001ea0:	f023 0304 	bic.w	r3, r3, #4
 8001ea4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ea8:	e057      	b.n	8001f5a <HAL_RCC_OscConfig+0x552>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b05      	cmp	r3, #5
 8001eb0:	d11e      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x4e8>
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001eb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ec2:	4b08      	ldr	r3, [pc, #32]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001ec4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ec8:	4a06      	ldr	r2, [pc, #24]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001eca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ece:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ed2:	4b04      	ldr	r3, [pc, #16]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001ed4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ed8:	4a02      	ldr	r2, [pc, #8]	@ (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ee2:	e03a      	b.n	8001f5a <HAL_RCC_OscConfig+0x552>
 8001ee4:	44020c00 	.word	0x44020c00
 8001ee8:	20000020 	.word	0x20000020
 8001eec:	44020800 	.word	0x44020800
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b85      	cmp	r3, #133	@ 0x85
 8001ef6:	d118      	bne.n	8001f2a <HAL_RCC_OscConfig+0x522>
 8001ef8:	4ba2      	ldr	r3, [pc, #648]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8001efa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001efe:	4aa1      	ldr	r2, [pc, #644]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8001f00:	f043 0304 	orr.w	r3, r3, #4
 8001f04:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f08:	4b9e      	ldr	r3, [pc, #632]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8001f0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f0e:	4a9d      	ldr	r2, [pc, #628]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8001f10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f14:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f18:	4b9a      	ldr	r3, [pc, #616]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8001f1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f1e:	4a99      	ldr	r2, [pc, #612]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f28:	e017      	b.n	8001f5a <HAL_RCC_OscConfig+0x552>
 8001f2a:	4b96      	ldr	r3, [pc, #600]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8001f2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f30:	4a94      	ldr	r2, [pc, #592]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8001f32:	f023 0301 	bic.w	r3, r3, #1
 8001f36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f3a:	4b92      	ldr	r3, [pc, #584]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8001f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f40:	4a90      	ldr	r2, [pc, #576]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8001f42:	f023 0304 	bic.w	r3, r3, #4
 8001f46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f4a:	4b8e      	ldr	r3, [pc, #568]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8001f4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f50:	4a8c      	ldr	r2, [pc, #560]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8001f52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d016      	beq.n	8001f90 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f62:	f7ff f9a7 	bl	80012b4 <HAL_GetTick>
 8001f66:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f68:	e00a      	b.n	8001f80 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6a:	f7ff f9a3 	bl	80012b4 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e175      	b.n	800226c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f80:	4b80      	ldr	r3, [pc, #512]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8001f82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0ed      	beq.n	8001f6a <HAL_RCC_OscConfig+0x562>
 8001f8e:	e015      	b.n	8001fbc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f90:	f7ff f990 	bl	80012b4 <HAL_GetTick>
 8001f94:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f96:	e00a      	b.n	8001fae <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f98:	f7ff f98c 	bl	80012b4 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e15e      	b.n	800226c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fae:	4b75      	ldr	r3, [pc, #468]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8001fb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1ed      	bne.n	8001f98 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d036      	beq.n	8002036 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d019      	beq.n	8002004 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fd0:	4b6c      	ldr	r3, [pc, #432]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a6b      	ldr	r2, [pc, #428]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8001fd6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fdc:	f7ff f96a 	bl	80012b4 <HAL_GetTick>
 8001fe0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001fe4:	f7ff f966 	bl	80012b4 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e13a      	b.n	800226c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001ff6:	4b63      	ldr	r3, [pc, #396]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x5dc>
 8002002:	e018      	b.n	8002036 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002004:	4b5f      	ldr	r3, [pc, #380]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a5e      	ldr	r2, [pc, #376]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 800200a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800200e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002010:	f7ff f950 	bl	80012b4 <HAL_GetTick>
 8002014:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002018:	f7ff f94c 	bl	80012b4 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e120      	b.n	800226c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800202a:	4b56      	ldr	r3, [pc, #344]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 8115 	beq.w	800226a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	2b18      	cmp	r3, #24
 8002044:	f000 80af 	beq.w	80021a6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204c:	2b02      	cmp	r3, #2
 800204e:	f040 8086 	bne.w	800215e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002052:	4b4c      	ldr	r3, [pc, #304]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a4b      	ldr	r2, [pc, #300]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8002058:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800205c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205e:	f7ff f929 	bl	80012b4 <HAL_GetTick>
 8002062:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002066:	f7ff f925 	bl	80012b4 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e0f9      	b.n	800226c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002078:	4b42      	ldr	r3, [pc, #264]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1f0      	bne.n	8002066 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002084:	4b3f      	ldr	r3, [pc, #252]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8002086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002088:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800208c:	f023 0303 	bic.w	r3, r3, #3
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002098:	0212      	lsls	r2, r2, #8
 800209a:	430a      	orrs	r2, r1
 800209c:	4939      	ldr	r1, [pc, #228]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	628b      	str	r3, [r1, #40]	@ 0x28
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020a6:	3b01      	subs	r3, #1
 80020a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020b0:	3b01      	subs	r3, #1
 80020b2:	025b      	lsls	r3, r3, #9
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020bc:	3b01      	subs	r3, #1
 80020be:	041b      	lsls	r3, r3, #16
 80020c0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	3b01      	subs	r3, #1
 80020cc:	061b      	lsls	r3, r3, #24
 80020ce:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80020d2:	492c      	ldr	r1, [pc, #176]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80020d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 80020da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020dc:	4a29      	ldr	r2, [pc, #164]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 80020de:	f023 0310 	bic.w	r3, r3, #16
 80020e2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e8:	4a26      	ldr	r2, [pc, #152]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80020ee:	4b25      	ldr	r3, [pc, #148]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 80020f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f2:	4a24      	ldr	r2, [pc, #144]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 80020f4:	f043 0310 	orr.w	r3, r3, #16
 80020f8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80020fa:	4b22      	ldr	r3, [pc, #136]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 80020fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020fe:	f023 020c 	bic.w	r2, r3, #12
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002106:	491f      	ldr	r1, [pc, #124]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8002108:	4313      	orrs	r3, r2
 800210a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800210c:	4b1d      	ldr	r3, [pc, #116]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 800210e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002110:	f023 0220 	bic.w	r2, r3, #32
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002118:	491a      	ldr	r1, [pc, #104]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 800211a:	4313      	orrs	r3, r2
 800211c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800211e:	4b19      	ldr	r3, [pc, #100]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8002120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002122:	4a18      	ldr	r2, [pc, #96]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002128:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800212a:	4b16      	ldr	r3, [pc, #88]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a15      	ldr	r2, [pc, #84]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8002130:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002136:	f7ff f8bd 	bl	80012b4 <HAL_GetTick>
 800213a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800213e:	f7ff f8b9 	bl	80012b4 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e08d      	b.n	800226c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002150:	4b0c      	ldr	r3, [pc, #48]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x736>
 800215c:	e085      	b.n	800226a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800215e:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a08      	ldr	r2, [pc, #32]	@ (8002184 <HAL_RCC_OscConfig+0x77c>)
 8002164:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216a:	f7ff f8a3 	bl	80012b4 <HAL_GetTick>
 800216e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002170:	e00a      	b.n	8002188 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002172:	f7ff f89f 	bl	80012b4 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d903      	bls.n	8002188 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e073      	b.n	800226c <HAL_RCC_OscConfig+0x864>
 8002184:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002188:	4b3a      	ldr	r3, [pc, #232]	@ (8002274 <HAL_RCC_OscConfig+0x86c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1ee      	bne.n	8002172 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002194:	4b37      	ldr	r3, [pc, #220]	@ (8002274 <HAL_RCC_OscConfig+0x86c>)
 8002196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002198:	4a36      	ldr	r2, [pc, #216]	@ (8002274 <HAL_RCC_OscConfig+0x86c>)
 800219a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800219e:	f023 0303 	bic.w	r3, r3, #3
 80021a2:	6293      	str	r3, [r2, #40]	@ 0x28
 80021a4:	e061      	b.n	800226a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80021a6:	4b33      	ldr	r3, [pc, #204]	@ (8002274 <HAL_RCC_OscConfig+0x86c>)
 80021a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021aa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80021ac:	4b31      	ldr	r3, [pc, #196]	@ (8002274 <HAL_RCC_OscConfig+0x86c>)
 80021ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021b0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d031      	beq.n	800221e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f003 0203 	and.w	r2, r3, #3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d12a      	bne.n	800221e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	0a1b      	lsrs	r3, r3, #8
 80021cc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d122      	bne.n	800221e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021e2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d11a      	bne.n	800221e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	0a5b      	lsrs	r3, r3, #9
 80021ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d111      	bne.n	800221e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	0c1b      	lsrs	r3, r3, #16
 80021fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002206:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002208:	429a      	cmp	r2, r3
 800220a:	d108      	bne.n	800221e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	0e1b      	lsrs	r3, r3, #24
 8002210:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002218:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800221a:	429a      	cmp	r2, r3
 800221c:	d001      	beq.n	8002222 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e024      	b.n	800226c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002222:	4b14      	ldr	r3, [pc, #80]	@ (8002274 <HAL_RCC_OscConfig+0x86c>)
 8002224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002226:	08db      	lsrs	r3, r3, #3
 8002228:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002230:	429a      	cmp	r2, r3
 8002232:	d01a      	beq.n	800226a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002234:	4b0f      	ldr	r3, [pc, #60]	@ (8002274 <HAL_RCC_OscConfig+0x86c>)
 8002236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002238:	4a0e      	ldr	r2, [pc, #56]	@ (8002274 <HAL_RCC_OscConfig+0x86c>)
 800223a:	f023 0310 	bic.w	r3, r3, #16
 800223e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002240:	f7ff f838 	bl	80012b4 <HAL_GetTick>
 8002244:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002246:	bf00      	nop
 8002248:	f7ff f834 	bl	80012b4 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	4293      	cmp	r3, r2
 8002252:	d0f9      	beq.n	8002248 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002258:	4a06      	ldr	r2, [pc, #24]	@ (8002274 <HAL_RCC_OscConfig+0x86c>)
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800225e:	4b05      	ldr	r3, [pc, #20]	@ (8002274 <HAL_RCC_OscConfig+0x86c>)
 8002260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002262:	4a04      	ldr	r2, [pc, #16]	@ (8002274 <HAL_RCC_OscConfig+0x86c>)
 8002264:	f043 0310 	orr.w	r3, r3, #16
 8002268:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3720      	adds	r7, #32
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	44020c00 	.word	0x44020c00

08002278 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e19e      	b.n	80025ca <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800228c:	4b83      	ldr	r3, [pc, #524]	@ (800249c <HAL_RCC_ClockConfig+0x224>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 030f 	and.w	r3, r3, #15
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d910      	bls.n	80022bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229a:	4b80      	ldr	r3, [pc, #512]	@ (800249c <HAL_RCC_ClockConfig+0x224>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 020f 	bic.w	r2, r3, #15
 80022a2:	497e      	ldr	r1, [pc, #504]	@ (800249c <HAL_RCC_ClockConfig+0x224>)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b7c      	ldr	r3, [pc, #496]	@ (800249c <HAL_RCC_ClockConfig+0x224>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e186      	b.n	80025ca <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0310 	and.w	r3, r3, #16
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d012      	beq.n	80022ee <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695a      	ldr	r2, [r3, #20]
 80022cc:	4b74      	ldr	r3, [pc, #464]	@ (80024a0 <HAL_RCC_ClockConfig+0x228>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d909      	bls.n	80022ee <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80022da:	4b71      	ldr	r3, [pc, #452]	@ (80024a0 <HAL_RCC_ClockConfig+0x228>)
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	021b      	lsls	r3, r3, #8
 80022e8:	496d      	ldr	r1, [pc, #436]	@ (80024a0 <HAL_RCC_ClockConfig+0x228>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d012      	beq.n	8002320 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691a      	ldr	r2, [r3, #16]
 80022fe:	4b68      	ldr	r3, [pc, #416]	@ (80024a0 <HAL_RCC_ClockConfig+0x228>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	091b      	lsrs	r3, r3, #4
 8002304:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002308:	429a      	cmp	r2, r3
 800230a:	d909      	bls.n	8002320 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800230c:	4b64      	ldr	r3, [pc, #400]	@ (80024a0 <HAL_RCC_ClockConfig+0x228>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	4961      	ldr	r1, [pc, #388]	@ (80024a0 <HAL_RCC_ClockConfig+0x228>)
 800231c:	4313      	orrs	r3, r2
 800231e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d010      	beq.n	800234e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	4b5b      	ldr	r3, [pc, #364]	@ (80024a0 <HAL_RCC_ClockConfig+0x228>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002338:	429a      	cmp	r2, r3
 800233a:	d908      	bls.n	800234e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800233c:	4b58      	ldr	r3, [pc, #352]	@ (80024a0 <HAL_RCC_ClockConfig+0x228>)
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4955      	ldr	r1, [pc, #340]	@ (80024a0 <HAL_RCC_ClockConfig+0x228>)
 800234a:	4313      	orrs	r3, r2
 800234c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d010      	beq.n	800237c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	4b50      	ldr	r3, [pc, #320]	@ (80024a0 <HAL_RCC_ClockConfig+0x228>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	429a      	cmp	r2, r3
 8002368:	d908      	bls.n	800237c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800236a:	4b4d      	ldr	r3, [pc, #308]	@ (80024a0 <HAL_RCC_ClockConfig+0x228>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	f023 020f 	bic.w	r2, r3, #15
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	494a      	ldr	r1, [pc, #296]	@ (80024a0 <HAL_RCC_ClockConfig+0x228>)
 8002378:	4313      	orrs	r3, r2
 800237a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 8093 	beq.w	80024b0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b03      	cmp	r3, #3
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002392:	4b43      	ldr	r3, [pc, #268]	@ (80024a0 <HAL_RCC_ClockConfig+0x228>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d121      	bne.n	80023e2 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e113      	b.n	80025ca <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d107      	bne.n	80023ba <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023aa:	4b3d      	ldr	r3, [pc, #244]	@ (80024a0 <HAL_RCC_ClockConfig+0x228>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d115      	bne.n	80023e2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e107      	b.n	80025ca <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d107      	bne.n	80023d2 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80023c2:	4b37      	ldr	r3, [pc, #220]	@ (80024a0 <HAL_RCC_ClockConfig+0x228>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d109      	bne.n	80023e2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e0fb      	b.n	80025ca <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023d2:	4b33      	ldr	r3, [pc, #204]	@ (80024a0 <HAL_RCC_ClockConfig+0x228>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e0f3      	b.n	80025ca <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80023e2:	4b2f      	ldr	r3, [pc, #188]	@ (80024a0 <HAL_RCC_ClockConfig+0x228>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f023 0203 	bic.w	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	492c      	ldr	r1, [pc, #176]	@ (80024a0 <HAL_RCC_ClockConfig+0x228>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f4:	f7fe ff5e 	bl	80012b4 <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d112      	bne.n	8002428 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002402:	e00a      	b.n	800241a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002404:	f7fe ff56 	bl	80012b4 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e0d7      	b.n	80025ca <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800241a:	4b21      	ldr	r3, [pc, #132]	@ (80024a0 <HAL_RCC_ClockConfig+0x228>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f003 0318 	and.w	r3, r3, #24
 8002422:	2b18      	cmp	r3, #24
 8002424:	d1ee      	bne.n	8002404 <HAL_RCC_ClockConfig+0x18c>
 8002426:	e043      	b.n	80024b0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b02      	cmp	r3, #2
 800242e:	d112      	bne.n	8002456 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002430:	e00a      	b.n	8002448 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002432:	f7fe ff3f 	bl	80012b4 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e0c0      	b.n	80025ca <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002448:	4b15      	ldr	r3, [pc, #84]	@ (80024a0 <HAL_RCC_ClockConfig+0x228>)
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	f003 0318 	and.w	r3, r3, #24
 8002450:	2b10      	cmp	r3, #16
 8002452:	d1ee      	bne.n	8002432 <HAL_RCC_ClockConfig+0x1ba>
 8002454:	e02c      	b.n	80024b0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d122      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800245e:	e00a      	b.n	8002476 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002460:	f7fe ff28 	bl	80012b4 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e0a9      	b.n	80025ca <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002476:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <HAL_RCC_ClockConfig+0x228>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	f003 0318 	and.w	r3, r3, #24
 800247e:	2b08      	cmp	r3, #8
 8002480:	d1ee      	bne.n	8002460 <HAL_RCC_ClockConfig+0x1e8>
 8002482:	e015      	b.n	80024b0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002484:	f7fe ff16 	bl	80012b4 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d906      	bls.n	80024a4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e097      	b.n	80025ca <HAL_RCC_ClockConfig+0x352>
 800249a:	bf00      	nop
 800249c:	40022000 	.word	0x40022000
 80024a0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024a4:	4b4b      	ldr	r3, [pc, #300]	@ (80025d4 <HAL_RCC_ClockConfig+0x35c>)
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	f003 0318 	and.w	r3, r3, #24
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1e9      	bne.n	8002484 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d010      	beq.n	80024de <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	4b44      	ldr	r3, [pc, #272]	@ (80025d4 <HAL_RCC_ClockConfig+0x35c>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f003 030f 	and.w	r3, r3, #15
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d208      	bcs.n	80024de <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80024cc:	4b41      	ldr	r3, [pc, #260]	@ (80025d4 <HAL_RCC_ClockConfig+0x35c>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	f023 020f 	bic.w	r2, r3, #15
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	493e      	ldr	r1, [pc, #248]	@ (80025d4 <HAL_RCC_ClockConfig+0x35c>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024de:	4b3e      	ldr	r3, [pc, #248]	@ (80025d8 <HAL_RCC_ClockConfig+0x360>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d210      	bcs.n	800250e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ec:	4b3a      	ldr	r3, [pc, #232]	@ (80025d8 <HAL_RCC_ClockConfig+0x360>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f023 020f 	bic.w	r2, r3, #15
 80024f4:	4938      	ldr	r1, [pc, #224]	@ (80025d8 <HAL_RCC_ClockConfig+0x360>)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fc:	4b36      	ldr	r3, [pc, #216]	@ (80025d8 <HAL_RCC_ClockConfig+0x360>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d001      	beq.n	800250e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e05d      	b.n	80025ca <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b00      	cmp	r3, #0
 8002518:	d010      	beq.n	800253c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	4b2d      	ldr	r3, [pc, #180]	@ (80025d4 <HAL_RCC_ClockConfig+0x35c>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002526:	429a      	cmp	r2, r3
 8002528:	d208      	bcs.n	800253c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800252a:	4b2a      	ldr	r3, [pc, #168]	@ (80025d4 <HAL_RCC_ClockConfig+0x35c>)
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	4927      	ldr	r1, [pc, #156]	@ (80025d4 <HAL_RCC_ClockConfig+0x35c>)
 8002538:	4313      	orrs	r3, r2
 800253a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b00      	cmp	r3, #0
 8002546:	d012      	beq.n	800256e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	4b21      	ldr	r3, [pc, #132]	@ (80025d4 <HAL_RCC_ClockConfig+0x35c>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002556:	429a      	cmp	r2, r3
 8002558:	d209      	bcs.n	800256e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800255a:	4b1e      	ldr	r3, [pc, #120]	@ (80025d4 <HAL_RCC_ClockConfig+0x35c>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	491a      	ldr	r1, [pc, #104]	@ (80025d4 <HAL_RCC_ClockConfig+0x35c>)
 800256a:	4313      	orrs	r3, r2
 800256c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	2b00      	cmp	r3, #0
 8002578:	d012      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695a      	ldr	r2, [r3, #20]
 800257e:	4b15      	ldr	r3, [pc, #84]	@ (80025d4 <HAL_RCC_ClockConfig+0x35c>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	0a1b      	lsrs	r3, r3, #8
 8002584:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002588:	429a      	cmp	r2, r3
 800258a:	d209      	bcs.n	80025a0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800258c:	4b11      	ldr	r3, [pc, #68]	@ (80025d4 <HAL_RCC_ClockConfig+0x35c>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	021b      	lsls	r3, r3, #8
 800259a:	490e      	ldr	r1, [pc, #56]	@ (80025d4 <HAL_RCC_ClockConfig+0x35c>)
 800259c:	4313      	orrs	r3, r2
 800259e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80025a0:	f000 f822 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b0b      	ldr	r3, [pc, #44]	@ (80025d4 <HAL_RCC_ClockConfig+0x35c>)
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	490b      	ldr	r1, [pc, #44]	@ (80025dc <HAL_RCC_ClockConfig+0x364>)
 80025b0:	5ccb      	ldrb	r3, [r1, r3]
 80025b2:	fa22 f303 	lsr.w	r3, r2, r3
 80025b6:	4a0a      	ldr	r2, [pc, #40]	@ (80025e0 <HAL_RCC_ClockConfig+0x368>)
 80025b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80025ba:	4b0a      	ldr	r3, [pc, #40]	@ (80025e4 <HAL_RCC_ClockConfig+0x36c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fdee 	bl	80011a0 <HAL_InitTick>
 80025c4:	4603      	mov	r3, r0
 80025c6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80025c8:	7afb      	ldrb	r3, [r7, #11]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	44020c00 	.word	0x44020c00
 80025d8:	40022000 	.word	0x40022000
 80025dc:	08007864 	.word	0x08007864
 80025e0:	20000000 	.word	0x20000000
 80025e4:	20000020 	.word	0x20000020

080025e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b089      	sub	sp, #36	@ 0x24
 80025ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80025ee:	4b8c      	ldr	r3, [pc, #560]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x238>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f003 0318 	and.w	r3, r3, #24
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d102      	bne.n	8002600 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80025fa:	4b8a      	ldr	r3, [pc, #552]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x23c>)
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	e107      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002600:	4b87      	ldr	r3, [pc, #540]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x238>)
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	f003 0318 	and.w	r3, r3, #24
 8002608:	2b00      	cmp	r3, #0
 800260a:	d112      	bne.n	8002632 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800260c:	4b84      	ldr	r3, [pc, #528]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x238>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	2b00      	cmp	r3, #0
 8002616:	d009      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002618:	4b81      	ldr	r3, [pc, #516]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x238>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	08db      	lsrs	r3, r3, #3
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	4a81      	ldr	r2, [pc, #516]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x240>)
 8002624:	fa22 f303 	lsr.w	r3, r2, r3
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	e0f1      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800262c:	4b7e      	ldr	r3, [pc, #504]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x240>)
 800262e:	61fb      	str	r3, [r7, #28]
 8002630:	e0ee      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002632:	4b7b      	ldr	r3, [pc, #492]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x238>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 0318 	and.w	r3, r3, #24
 800263a:	2b10      	cmp	r3, #16
 800263c:	d102      	bne.n	8002644 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800263e:	4b7b      	ldr	r3, [pc, #492]	@ (800282c <HAL_RCC_GetSysClockFreq+0x244>)
 8002640:	61fb      	str	r3, [r7, #28]
 8002642:	e0e5      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002644:	4b76      	ldr	r3, [pc, #472]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x238>)
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	f003 0318 	and.w	r3, r3, #24
 800264c:	2b18      	cmp	r3, #24
 800264e:	f040 80dd 	bne.w	800280c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002652:	4b73      	ldr	r3, [pc, #460]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x238>)
 8002654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800265c:	4b70      	ldr	r3, [pc, #448]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x238>)
 800265e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002660:	0a1b      	lsrs	r3, r3, #8
 8002662:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002666:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002668:	4b6d      	ldr	r3, [pc, #436]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x238>)
 800266a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002674:	4b6a      	ldr	r3, [pc, #424]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x238>)
 8002676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002678:	08db      	lsrs	r3, r3, #3
 800267a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	fb02 f303 	mul.w	r3, r2, r3
 8002684:	ee07 3a90 	vmov	s15, r3
 8002688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800268c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 80b7 	beq.w	8002806 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d003      	beq.n	80026a6 <HAL_RCC_GetSysClockFreq+0xbe>
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d056      	beq.n	8002752 <HAL_RCC_GetSysClockFreq+0x16a>
 80026a4:	e077      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80026a6:	4b5e      	ldr	r3, [pc, #376]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x238>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0320 	and.w	r3, r3, #32
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d02d      	beq.n	800270e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80026b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x238>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	08db      	lsrs	r3, r3, #3
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	4a5a      	ldr	r2, [pc, #360]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x240>)
 80026be:	fa22 f303 	lsr.w	r3, r2, r3
 80026c2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	ee07 3a90 	vmov	s15, r3
 80026ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	ee07 3a90 	vmov	s15, r3
 80026d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026dc:	4b50      	ldr	r3, [pc, #320]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x238>)
 80026de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026e4:	ee07 3a90 	vmov	s15, r3
 80026e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80026ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80026f0:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002830 <HAL_RCC_GetSysClockFreq+0x248>
 80026f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80026fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002700:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002708:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800270c:	e065      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	ee07 3a90 	vmov	s15, r3
 8002714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002718:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002834 <HAL_RCC_GetSysClockFreq+0x24c>
 800271c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002720:	4b3f      	ldr	r3, [pc, #252]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x238>)
 8002722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002728:	ee07 3a90 	vmov	s15, r3
 800272c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002730:	ed97 6a02 	vldr	s12, [r7, #8]
 8002734:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002830 <HAL_RCC_GetSysClockFreq+0x248>
 8002738:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800273c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002740:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002744:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800274c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002750:	e043      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	ee07 3a90 	vmov	s15, r3
 8002758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800275c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002838 <HAL_RCC_GetSysClockFreq+0x250>
 8002760:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002764:	4b2e      	ldr	r3, [pc, #184]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x238>)
 8002766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800276c:	ee07 3a90 	vmov	s15, r3
 8002770:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002774:	ed97 6a02 	vldr	s12, [r7, #8]
 8002778:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002830 <HAL_RCC_GetSysClockFreq+0x248>
 800277c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002780:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002784:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002788:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800278c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002790:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002794:	e021      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	ee07 3a90 	vmov	s15, r3
 800279c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027a0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800283c <HAL_RCC_GetSysClockFreq+0x254>
 80027a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x238>)
 80027aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027b0:	ee07 3a90 	vmov	s15, r3
 80027b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80027b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80027bc:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002830 <HAL_RCC_GetSysClockFreq+0x248>
 80027c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80027c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80027d8:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80027da:	4b11      	ldr	r3, [pc, #68]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x238>)
 80027dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027de:	0a5b      	lsrs	r3, r3, #9
 80027e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027e4:	3301      	adds	r3, #1
 80027e6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	ee07 3a90 	vmov	s15, r3
 80027ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027f2:	edd7 6a06 	vldr	s13, [r7, #24]
 80027f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027fe:	ee17 3a90 	vmov	r3, s15
 8002802:	61fb      	str	r3, [r7, #28]
 8002804:	e004      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	e001      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800280c:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x240>)
 800280e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002810:	69fb      	ldr	r3, [r7, #28]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3724      	adds	r7, #36	@ 0x24
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	44020c00 	.word	0x44020c00
 8002824:	003d0900 	.word	0x003d0900
 8002828:	03d09000 	.word	0x03d09000
 800282c:	007a1200 	.word	0x007a1200
 8002830:	46000000 	.word	0x46000000
 8002834:	4c742400 	.word	0x4c742400
 8002838:	4af42400 	.word	0x4af42400
 800283c:	4a742400 	.word	0x4a742400

08002840 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002844:	f7ff fed0 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 8002848:	4602      	mov	r2, r0
 800284a:	4b08      	ldr	r3, [pc, #32]	@ (800286c <HAL_RCC_GetHCLKFreq+0x2c>)
 800284c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800284e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002852:	4907      	ldr	r1, [pc, #28]	@ (8002870 <HAL_RCC_GetHCLKFreq+0x30>)
 8002854:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002856:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800285a:	fa22 f303 	lsr.w	r3, r2, r3
 800285e:	4a05      	ldr	r2, [pc, #20]	@ (8002874 <HAL_RCC_GetHCLKFreq+0x34>)
 8002860:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002862:	4b04      	ldr	r3, [pc, #16]	@ (8002874 <HAL_RCC_GetHCLKFreq+0x34>)
 8002864:	681b      	ldr	r3, [r3, #0]
}
 8002866:	4618      	mov	r0, r3
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	44020c00 	.word	0x44020c00
 8002870:	08007864 	.word	0x08007864
 8002874:	20000000 	.word	0x20000000

08002878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800287c:	f7ff ffe0 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b06      	ldr	r3, [pc, #24]	@ (800289c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	091b      	lsrs	r3, r3, #4
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	4904      	ldr	r1, [pc, #16]	@ (80028a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	bd80      	pop	{r7, pc}
 800289c:	44020c00 	.word	0x44020c00
 80028a0:	08007874 	.word	0x08007874

080028a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80028a8:	f7ff ffca 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 80028ac:	4602      	mov	r2, r0
 80028ae:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	0a1b      	lsrs	r3, r3, #8
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	4904      	ldr	r1, [pc, #16]	@ (80028cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80028ba:	5ccb      	ldrb	r3, [r1, r3]
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	44020c00 	.word	0x44020c00
 80028cc:	08007874 	.word	0x08007874

080028d0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80028d4:	f7ff ffb4 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 80028d8:	4602      	mov	r2, r0
 80028da:	4b06      	ldr	r3, [pc, #24]	@ (80028f4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	0b1b      	lsrs	r3, r3, #12
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	4904      	ldr	r1, [pc, #16]	@ (80028f8 <HAL_RCC_GetPCLK3Freq+0x28>)
 80028e6:	5ccb      	ldrb	r3, [r1, r3]
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	44020c00 	.word	0x44020c00
 80028f8:	08007874 	.word	0x08007874

080028fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b08b      	sub	sp, #44	@ 0x2c
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8002904:	4bae      	ldr	r3, [pc, #696]	@ (8002bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800290c:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800290e:	4bac      	ldr	r3, [pc, #688]	@ (8002bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002918:	4ba9      	ldr	r3, [pc, #676]	@ (8002bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800291a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291c:	0a1b      	lsrs	r3, r3, #8
 800291e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002922:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002924:	4ba6      	ldr	r3, [pc, #664]	@ (8002bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002930:	4ba3      	ldr	r3, [pc, #652]	@ (8002bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002934:	08db      	lsrs	r3, r3, #3
 8002936:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	fb02 f303 	mul.w	r3, r2, r3
 8002940:	ee07 3a90 	vmov	s15, r3
 8002944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002948:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 8126 	beq.w	8002ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	2b03      	cmp	r3, #3
 8002958:	d053      	beq.n	8002a02 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	2b03      	cmp	r3, #3
 800295e:	d86f      	bhi.n	8002a40 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d003      	beq.n	800296e <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	2b02      	cmp	r3, #2
 800296a:	d02b      	beq.n	80029c4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800296c:	e068      	b.n	8002a40 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800296e:	4b94      	ldr	r3, [pc, #592]	@ (8002bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	08db      	lsrs	r3, r3, #3
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	4a92      	ldr	r2, [pc, #584]	@ (8002bc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800297a:	fa22 f303 	lsr.w	r3, r2, r3
 800297e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	ee07 3a90 	vmov	s15, r3
 8002986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	ee07 3a90 	vmov	s15, r3
 8002990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	ee07 3a90 	vmov	s15, r3
 800299e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029a2:	ed97 6a04 	vldr	s12, [r7, #16]
 80029a6:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8002bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80029aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029be:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80029c2:	e068      	b.n	8002a96 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	ee07 3a90 	vmov	s15, r3
 80029ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ce:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8002bcc <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80029d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	ee07 3a90 	vmov	s15, r3
 80029dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029e0:	ed97 6a04 	vldr	s12, [r7, #16]
 80029e4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80029e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029fc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002a00:	e049      	b.n	8002a96 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	ee07 3a90 	vmov	s15, r3
 8002a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a0c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8002a10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	ee07 3a90 	vmov	s15, r3
 8002a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a1e:	ed97 6a04 	vldr	s12, [r7, #16]
 8002a22:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8002bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8002a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002a3e:	e02a      	b.n	8002a96 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002a40:	4b5f      	ldr	r3, [pc, #380]	@ (8002bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	08db      	lsrs	r3, r3, #3
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	4a5e      	ldr	r2, [pc, #376]	@ (8002bc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8002a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a50:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	ee07 3a90 	vmov	s15, r3
 8002a58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	ee07 3a90 	vmov	s15, r3
 8002a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	ee07 3a90 	vmov	s15, r3
 8002a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a74:	ed97 6a04 	vldr	s12, [r7, #16]
 8002a78:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8002bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8002a7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a90:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002a94:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002a96:	4b4a      	ldr	r3, [pc, #296]	@ (8002bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002aa2:	d121      	bne.n	8002ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8002aa4:	4b46      	ldr	r3, [pc, #280]	@ (8002bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d017      	beq.n	8002ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8002ab0:	4b43      	ldr	r3, [pc, #268]	@ (8002bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab4:	0a5b      	lsrs	r3, r3, #9
 8002ab6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002aba:	ee07 3a90 	vmov	s15, r3
 8002abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8002ac2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ac6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8002aca:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002ace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ad6:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	e006      	b.n	8002aee <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	e002      	b.n	8002aee <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002aee:	4b34      	ldr	r3, [pc, #208]	@ (8002bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002afa:	d121      	bne.n	8002b40 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8002afc:	4b30      	ldr	r3, [pc, #192]	@ (8002bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d017      	beq.n	8002b38 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8002b08:	4b2d      	ldr	r3, [pc, #180]	@ (8002bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b0c:	0c1b      	lsrs	r3, r3, #16
 8002b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b12:	ee07 3a90 	vmov	s15, r3
 8002b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8002b1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b1e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8002b22:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b2e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	e006      	b.n	8002b46 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	e002      	b.n	8002b46 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002b46:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b52:	d121      	bne.n	8002b98 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8002b54:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d017      	beq.n	8002b90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8002b60:	4b17      	ldr	r3, [pc, #92]	@ (8002bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b64:	0e1b      	lsrs	r3, r3, #24
 8002b66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b6a:	ee07 3a90 	vmov	s15, r3
 8002b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8002b72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b76:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8002b7a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002b7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b86:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8002b8e:	e010      	b.n	8002bb2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	609a      	str	r2, [r3, #8]
}
 8002b96:	e00c      	b.n	8002bb2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
}
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	609a      	str	r2, [r3, #8]
}
 8002bb2:	bf00      	nop
 8002bb4:	372c      	adds	r7, #44	@ 0x2c
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	44020c00 	.word	0x44020c00
 8002bc4:	03d09000 	.word	0x03d09000
 8002bc8:	46000000 	.word	0x46000000
 8002bcc:	4a742400 	.word	0x4a742400
 8002bd0:	4af42400 	.word	0x4af42400

08002bd4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b08b      	sub	sp, #44	@ 0x2c
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8002bdc:	4bae      	ldr	r3, [pc, #696]	@ (8002e98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002be4:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8002be6:	4bac      	ldr	r3, [pc, #688]	@ (8002e98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8002bf0:	4ba9      	ldr	r3, [pc, #676]	@ (8002e98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf4:	0a1b      	lsrs	r3, r3, #8
 8002bf6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bfa:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8002bfc:	4ba6      	ldr	r3, [pc, #664]	@ (8002e98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8002c08:	4ba3      	ldr	r3, [pc, #652]	@ (8002e98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	08db      	lsrs	r3, r3, #3
 8002c0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	fb02 f303 	mul.w	r3, r2, r3
 8002c18:	ee07 3a90 	vmov	s15, r3
 8002c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c20:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 8126 	beq.w	8002e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d053      	beq.n	8002cda <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d86f      	bhi.n	8002d18 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d003      	beq.n	8002c46 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d02b      	beq.n	8002c9c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8002c44:	e068      	b.n	8002d18 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002c46:	4b94      	ldr	r3, [pc, #592]	@ (8002e98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	08db      	lsrs	r3, r3, #3
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	4a92      	ldr	r2, [pc, #584]	@ (8002e9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8002c52:	fa22 f303 	lsr.w	r3, r2, r3
 8002c56:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	ee07 3a90 	vmov	s15, r3
 8002c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	ee07 3a90 	vmov	s15, r3
 8002c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	ee07 3a90 	vmov	s15, r3
 8002c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c7a:	ed97 6a04 	vldr	s12, [r7, #16]
 8002c7e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8002ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c96:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002c9a:	e068      	b.n	8002d6e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	ee07 3a90 	vmov	s15, r3
 8002ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ca6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8002ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8002caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	ee07 3a90 	vmov	s15, r3
 8002cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cb8:	ed97 6a04 	vldr	s12, [r7, #16]
 8002cbc:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002cc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ccc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002cd8:	e049      	b.n	8002d6e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	ee07 3a90 	vmov	s15, r3
 8002ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8002ce8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	ee07 3a90 	vmov	s15, r3
 8002cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cf6:	ed97 6a04 	vldr	s12, [r7, #16]
 8002cfa:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8002ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d12:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002d16:	e02a      	b.n	8002d6e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002d18:	4b5f      	ldr	r3, [pc, #380]	@ (8002e98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	08db      	lsrs	r3, r3, #3
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	4a5e      	ldr	r2, [pc, #376]	@ (8002e9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8002d24:	fa22 f303 	lsr.w	r3, r2, r3
 8002d28:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	ee07 3a90 	vmov	s15, r3
 8002d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	ee07 3a90 	vmov	s15, r3
 8002d48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d4c:	ed97 6a04 	vldr	s12, [r7, #16]
 8002d50:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8002ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002d54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d68:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002d6c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002d6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d7a:	d121      	bne.n	8002dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8002d7c:	4b46      	ldr	r3, [pc, #280]	@ (8002e98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d017      	beq.n	8002db8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8002d88:	4b43      	ldr	r3, [pc, #268]	@ (8002e98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d8c:	0a5b      	lsrs	r3, r3, #9
 8002d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d92:	ee07 3a90 	vmov	s15, r3
 8002d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8002d9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d9e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8002da2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dae:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	e006      	b.n	8002dc6 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	e002      	b.n	8002dc6 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002dc6:	4b34      	ldr	r3, [pc, #208]	@ (8002e98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dd2:	d121      	bne.n	8002e18 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8002dd4:	4b30      	ldr	r3, [pc, #192]	@ (8002e98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d017      	beq.n	8002e10 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8002de0:	4b2d      	ldr	r3, [pc, #180]	@ (8002e98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de4:	0c1b      	lsrs	r3, r3, #16
 8002de6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dea:	ee07 3a90 	vmov	s15, r3
 8002dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8002df2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002df6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8002dfa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e06:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	e006      	b.n	8002e1e <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	e002      	b.n	8002e1e <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e2a:	d121      	bne.n	8002e70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8002e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002e98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d017      	beq.n	8002e68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8002e38:	4b17      	ldr	r3, [pc, #92]	@ (8002e98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e3c:	0e1b      	lsrs	r3, r3, #24
 8002e3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e42:	ee07 3a90 	vmov	s15, r3
 8002e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8002e4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e4e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8002e52:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002e56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e5e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002e66:	e010      	b.n	8002e8a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
}
 8002e6e:	e00c      	b.n	8002e8a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	609a      	str	r2, [r3, #8]
}
 8002e76:	e008      	b.n	8002e8a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	609a      	str	r2, [r3, #8]
}
 8002e8a:	bf00      	nop
 8002e8c:	372c      	adds	r7, #44	@ 0x2c
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	44020c00 	.word	0x44020c00
 8002e9c:	03d09000 	.word	0x03d09000
 8002ea0:	46000000 	.word	0x46000000
 8002ea4:	4a742400 	.word	0x4a742400
 8002ea8:	4af42400 	.word	0x4af42400

08002eac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b08b      	sub	sp, #44	@ 0x2c
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8002eb4:	4bae      	ldr	r3, [pc, #696]	@ (8003170 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ebc:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8002ebe:	4bac      	ldr	r3, [pc, #688]	@ (8003170 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8002ec8:	4ba9      	ldr	r3, [pc, #676]	@ (8003170 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ecc:	0a1b      	lsrs	r3, r3, #8
 8002ece:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ed2:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8002ed4:	4ba6      	ldr	r3, [pc, #664]	@ (8003170 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed8:	091b      	lsrs	r3, r3, #4
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8002ee0:	4ba3      	ldr	r3, [pc, #652]	@ (8003170 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ee4:	08db      	lsrs	r3, r3, #3
 8002ee6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	fb02 f303 	mul.w	r3, r2, r3
 8002ef0:	ee07 3a90 	vmov	s15, r3
 8002ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ef8:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 8126 	beq.w	8003150 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d053      	beq.n	8002fb2 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d86f      	bhi.n	8002ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d003      	beq.n	8002f1e <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d02b      	beq.n	8002f74 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8002f1c:	e068      	b.n	8002ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002f1e:	4b94      	ldr	r3, [pc, #592]	@ (8003170 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	08db      	lsrs	r3, r3, #3
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	4a92      	ldr	r2, [pc, #584]	@ (8003174 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8002f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	ee07 3a90 	vmov	s15, r3
 8002f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	ee07 3a90 	vmov	s15, r3
 8002f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	ee07 3a90 	vmov	s15, r3
 8002f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f52:	ed97 6a04 	vldr	s12, [r7, #16]
 8002f56:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8003178 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8002f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f6e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002f72:	e068      	b.n	8003046 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	ee07 3a90 	vmov	s15, r3
 8002f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f7e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800317c <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8002f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	ee07 3a90 	vmov	s15, r3
 8002f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f90:	ed97 6a04 	vldr	s12, [r7, #16]
 8002f94:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003178 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8002f98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fa0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fac:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002fb0:	e049      	b.n	8003046 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	ee07 3a90 	vmov	s15, r3
 8002fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fbc:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003180 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8002fc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	ee07 3a90 	vmov	s15, r3
 8002fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fce:	ed97 6a04 	vldr	s12, [r7, #16]
 8002fd2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8003178 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8002fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002fee:	e02a      	b.n	8003046 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002ff0:	4b5f      	ldr	r3, [pc, #380]	@ (8003170 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	08db      	lsrs	r3, r3, #3
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	4a5e      	ldr	r2, [pc, #376]	@ (8003174 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8003000:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	ee07 3a90 	vmov	s15, r3
 8003008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	ee07 3a90 	vmov	s15, r3
 8003012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	ee07 3a90 	vmov	s15, r3
 8003020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003024:	ed97 6a04 	vldr	s12, [r7, #16]
 8003028:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8003178 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800302c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003030:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003034:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003038:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800303c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003040:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003044:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003046:	4b4a      	ldr	r3, [pc, #296]	@ (8003170 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800304e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003052:	d121      	bne.n	8003098 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8003054:	4b46      	ldr	r3, [pc, #280]	@ (8003170 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d017      	beq.n	8003090 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003060:	4b43      	ldr	r3, [pc, #268]	@ (8003170 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003064:	0a5b      	lsrs	r3, r3, #9
 8003066:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800306a:	ee07 3a90 	vmov	s15, r3
 800306e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8003072:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003076:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800307a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800307e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003086:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	e006      	b.n	800309e <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	e002      	b.n	800309e <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800309e:	4b34      	ldr	r3, [pc, #208]	@ (8003170 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030aa:	d121      	bne.n	80030f0 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80030ac:	4b30      	ldr	r3, [pc, #192]	@ (8003170 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80030ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d017      	beq.n	80030e8 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80030b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003170 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80030ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030c2:	ee07 3a90 	vmov	s15, r3
 80030c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80030ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80030ce:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80030d2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80030d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030de:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	e006      	b.n	80030f6 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	e002      	b.n	80030f6 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80030f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003170 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003102:	d121      	bne.n	8003148 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8003104:	4b1a      	ldr	r3, [pc, #104]	@ (8003170 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003108:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d017      	beq.n	8003140 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003110:	4b17      	ldr	r3, [pc, #92]	@ (8003170 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003114:	0e1b      	lsrs	r3, r3, #24
 8003116:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800311a:	ee07 3a90 	vmov	s15, r3
 800311e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8003122:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003126:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800312a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800312e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003136:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800313e:	e010      	b.n	8003162 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	609a      	str	r2, [r3, #8]
}
 8003146:	e00c      	b.n	8003162 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	609a      	str	r2, [r3, #8]
}
 800314e:	e008      	b.n	8003162 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	609a      	str	r2, [r3, #8]
}
 8003162:	bf00      	nop
 8003164:	372c      	adds	r7, #44	@ 0x2c
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	44020c00 	.word	0x44020c00
 8003174:	03d09000 	.word	0x03d09000
 8003178:	46000000 	.word	0x46000000
 800317c:	4a742400 	.word	0x4a742400
 8003180:	4af42400 	.word	0x4af42400

08003184 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003184:	b590      	push	{r4, r7, lr}
 8003186:	b08f      	sub	sp, #60	@ 0x3c
 8003188:	af00      	add	r7, sp, #0
 800318a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800318e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003192:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8003196:	4321      	orrs	r1, r4
 8003198:	d150      	bne.n	800323c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800319a:	4b26      	ldr	r3, [pc, #152]	@ (8003234 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800319c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031a4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80031a6:	4b23      	ldr	r3, [pc, #140]	@ (8003234 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80031a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d108      	bne.n	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80031b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031ba:	d104      	bne.n	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80031bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80031c2:	f002 bb2a 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80031c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003234 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80031c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031d4:	d108      	bne.n	80031e8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80031d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031dc:	d104      	bne.n	80031e8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80031de:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80031e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80031e4:	f002 bb19 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80031e8:	4b12      	ldr	r3, [pc, #72]	@ (8003234 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031f4:	d119      	bne.n	800322a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80031f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031fc:	d115      	bne.n	800322a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80031fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003234 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8003206:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800320a:	d30a      	bcc.n	8003222 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800320c:	4b09      	ldr	r3, [pc, #36]	@ (8003234 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	0a1b      	lsrs	r3, r3, #8
 8003212:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003216:	4a08      	ldr	r2, [pc, #32]	@ (8003238 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003218:	fbb2 f3f3 	udiv	r3, r2, r3
 800321c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800321e:	f002 bafc 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8003226:	f002 baf8 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	637b      	str	r3, [r7, #52]	@ 0x34
 800322e:	f002 baf4 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003232:	bf00      	nop
 8003234:	44020c00 	.word	0x44020c00
 8003238:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800323c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003240:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8003244:	ea50 0104 	orrs.w	r1, r0, r4
 8003248:	f001 8275 	beq.w	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 800324c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003250:	2801      	cmp	r0, #1
 8003252:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8003256:	f082 82dd 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800325a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800325e:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8003262:	ea50 0104 	orrs.w	r1, r0, r4
 8003266:	f001 816c 	beq.w	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800326a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800326e:	2801      	cmp	r0, #1
 8003270:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8003274:	f082 82ce 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003278:	e9d7 0100 	ldrd	r0, r1, [r7]
 800327c:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8003280:	ea50 0104 	orrs.w	r1, r0, r4
 8003284:	f001 8602 	beq.w	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8003288:	e9d7 0100 	ldrd	r0, r1, [r7]
 800328c:	2801      	cmp	r0, #1
 800328e:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8003292:	f082 82bf 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003296:	e9d7 0100 	ldrd	r0, r1, [r7]
 800329a:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 800329e:	ea50 0104 	orrs.w	r1, r0, r4
 80032a2:	f001 854c 	beq.w	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80032a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032aa:	2801      	cmp	r0, #1
 80032ac:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 80032b0:	f082 82b0 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80032b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032b8:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 80032bc:	ea50 0104 	orrs.w	r1, r0, r4
 80032c0:	f001 849e 	beq.w	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80032c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032c8:	2801      	cmp	r0, #1
 80032ca:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 80032ce:	f082 82a1 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80032d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032d6:	f1a1 0420 	sub.w	r4, r1, #32
 80032da:	ea50 0104 	orrs.w	r1, r0, r4
 80032de:	f001 83e8 	beq.w	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80032e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032e6:	2801      	cmp	r0, #1
 80032e8:	f171 0120 	sbcs.w	r1, r1, #32
 80032ec:	f082 8292 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80032f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032f4:	f1a1 0410 	sub.w	r4, r1, #16
 80032f8:	ea50 0104 	orrs.w	r1, r0, r4
 80032fc:	f002 8256 	beq.w	80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8003300:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003304:	2801      	cmp	r0, #1
 8003306:	f171 0110 	sbcs.w	r1, r1, #16
 800330a:	f082 8283 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800330e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003312:	f1a1 0408 	sub.w	r4, r1, #8
 8003316:	ea50 0104 	orrs.w	r1, r0, r4
 800331a:	f002 81cc 	beq.w	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800331e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003322:	2801      	cmp	r0, #1
 8003324:	f171 0108 	sbcs.w	r1, r1, #8
 8003328:	f082 8274 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800332c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003330:	1f0c      	subs	r4, r1, #4
 8003332:	ea50 0104 	orrs.w	r1, r0, r4
 8003336:	f001 8648 	beq.w	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800333a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800333e:	2801      	cmp	r0, #1
 8003340:	f171 0104 	sbcs.w	r1, r1, #4
 8003344:	f082 8266 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003348:	e9d7 0100 	ldrd	r0, r1, [r7]
 800334c:	1e8c      	subs	r4, r1, #2
 800334e:	ea50 0104 	orrs.w	r1, r0, r4
 8003352:	f002 8143 	beq.w	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8003356:	e9d7 0100 	ldrd	r0, r1, [r7]
 800335a:	2801      	cmp	r0, #1
 800335c:	f171 0102 	sbcs.w	r1, r1, #2
 8003360:	f082 8258 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003364:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003368:	1e4c      	subs	r4, r1, #1
 800336a:	ea50 0104 	orrs.w	r1, r0, r4
 800336e:	f002 80ce 	beq.w	800550e <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8003372:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003376:	2801      	cmp	r0, #1
 8003378:	f171 0101 	sbcs.w	r1, r1, #1
 800337c:	f082 824a 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003380:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003384:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8003388:	4321      	orrs	r1, r4
 800338a:	f002 8059 	beq.w	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800338e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003392:	4cd9      	ldr	r4, [pc, #868]	@ (80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8003394:	42a0      	cmp	r0, r4
 8003396:	f171 0100 	sbcs.w	r1, r1, #0
 800339a:	f082 823b 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800339e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033a2:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80033a6:	4321      	orrs	r1, r4
 80033a8:	f001 87d9 	beq.w	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 80033ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033b0:	4cd2      	ldr	r4, [pc, #840]	@ (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80033b2:	42a0      	cmp	r0, r4
 80033b4:	f171 0100 	sbcs.w	r1, r1, #0
 80033b8:	f082 822c 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80033bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033c0:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80033c4:	4321      	orrs	r1, r4
 80033c6:	f001 8751 	beq.w	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80033ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033ce:	4ccc      	ldr	r4, [pc, #816]	@ (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80033d0:	42a0      	cmp	r0, r4
 80033d2:	f171 0100 	sbcs.w	r1, r1, #0
 80033d6:	f082 821d 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80033da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033de:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80033e2:	4321      	orrs	r1, r4
 80033e4:	f001 869a 	beq.w	800511c <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 80033e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033ec:	4cc5      	ldr	r4, [pc, #788]	@ (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80033ee:	42a0      	cmp	r0, r4
 80033f0:	f171 0100 	sbcs.w	r1, r1, #0
 80033f4:	f082 820e 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80033f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033fc:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8003400:	4321      	orrs	r1, r4
 8003402:	f001 8612 	beq.w	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8003406:	e9d7 0100 	ldrd	r0, r1, [r7]
 800340a:	4cbf      	ldr	r4, [pc, #764]	@ (8003708 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800340c:	42a0      	cmp	r0, r4
 800340e:	f171 0100 	sbcs.w	r1, r1, #0
 8003412:	f082 81ff 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003416:	e9d7 0100 	ldrd	r0, r1, [r7]
 800341a:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800341e:	4321      	orrs	r1, r4
 8003420:	f002 817e 	beq.w	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8003424:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003428:	4cb8      	ldr	r4, [pc, #736]	@ (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800342a:	42a0      	cmp	r0, r4
 800342c:	f171 0100 	sbcs.w	r1, r1, #0
 8003430:	f082 81f0 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003434:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003438:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 800343c:	4321      	orrs	r1, r4
 800343e:	f000 829e 	beq.w	800397e <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8003442:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003446:	4cb2      	ldr	r4, [pc, #712]	@ (8003710 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003448:	42a0      	cmp	r0, r4
 800344a:	f171 0100 	sbcs.w	r1, r1, #0
 800344e:	f082 81e1 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003452:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003456:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800345a:	4321      	orrs	r1, r4
 800345c:	f000 826d 	beq.w	800393a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8003460:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003464:	4cab      	ldr	r4, [pc, #684]	@ (8003714 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003466:	42a0      	cmp	r0, r4
 8003468:	f171 0100 	sbcs.w	r1, r1, #0
 800346c:	f082 81d2 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003470:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003474:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8003478:	4321      	orrs	r1, r4
 800347a:	f001 800d 	beq.w	8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800347e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003482:	4ca5      	ldr	r4, [pc, #660]	@ (8003718 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8003484:	42a0      	cmp	r0, r4
 8003486:	f171 0100 	sbcs.w	r1, r1, #0
 800348a:	f082 81c3 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800348e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003492:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8003496:	4321      	orrs	r1, r4
 8003498:	f000 81d0 	beq.w	800383c <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800349c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034a0:	4c9e      	ldr	r4, [pc, #632]	@ (800371c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80034a2:	42a0      	cmp	r0, r4
 80034a4:	f171 0100 	sbcs.w	r1, r1, #0
 80034a8:	f082 81b4 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80034ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034b0:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 80034b4:	4321      	orrs	r1, r4
 80034b6:	f000 8142 	beq.w	800373e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 80034ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034be:	4c98      	ldr	r4, [pc, #608]	@ (8003720 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80034c0:	42a0      	cmp	r0, r4
 80034c2:	f171 0100 	sbcs.w	r1, r1, #0
 80034c6:	f082 81a5 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80034ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034ce:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80034d2:	4321      	orrs	r1, r4
 80034d4:	f001 824e 	beq.w	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 80034d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034dc:	4c91      	ldr	r4, [pc, #580]	@ (8003724 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80034de:	42a0      	cmp	r0, r4
 80034e0:	f171 0100 	sbcs.w	r1, r1, #0
 80034e4:	f082 8196 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80034e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034ec:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80034f0:	4321      	orrs	r1, r4
 80034f2:	f001 8197 	beq.w	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 80034f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034fa:	4c8b      	ldr	r4, [pc, #556]	@ (8003728 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80034fc:	42a0      	cmp	r0, r4
 80034fe:	f171 0100 	sbcs.w	r1, r1, #0
 8003502:	f082 8187 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003506:	e9d7 0100 	ldrd	r0, r1, [r7]
 800350a:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800350e:	4321      	orrs	r1, r4
 8003510:	f001 8154 	beq.w	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8003514:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003518:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 800351c:	f171 0100 	sbcs.w	r1, r1, #0
 8003520:	f082 8178 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003524:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003528:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 800352c:	4321      	orrs	r1, r4
 800352e:	f001 80b7 	beq.w	80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8003532:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003536:	f248 0401 	movw	r4, #32769	@ 0x8001
 800353a:	42a0      	cmp	r0, r4
 800353c:	f171 0100 	sbcs.w	r1, r1, #0
 8003540:	f082 8168 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003544:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003548:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 800354c:	4321      	orrs	r1, r4
 800354e:	f001 8064 	beq.w	800461a <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8003552:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003556:	f244 0401 	movw	r4, #16385	@ 0x4001
 800355a:	42a0      	cmp	r0, r4
 800355c:	f171 0100 	sbcs.w	r1, r1, #0
 8003560:	f082 8158 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003564:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003568:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 800356c:	4321      	orrs	r1, r4
 800356e:	f001 8011 	beq.w	8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8003572:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003576:	f242 0401 	movw	r4, #8193	@ 0x2001
 800357a:	42a0      	cmp	r0, r4
 800357c:	f171 0100 	sbcs.w	r1, r1, #0
 8003580:	f082 8148 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003584:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003588:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 800358c:	4321      	orrs	r1, r4
 800358e:	f000 871e 	beq.w	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8003592:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003596:	f241 0401 	movw	r4, #4097	@ 0x1001
 800359a:	42a0      	cmp	r0, r4
 800359c:	f171 0100 	sbcs.w	r1, r1, #0
 80035a0:	f082 8138 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80035a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035a8:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 80035ac:	4321      	orrs	r1, r4
 80035ae:	f000 86a8 	beq.w	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 80035b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035b6:	f640 0401 	movw	r4, #2049	@ 0x801
 80035ba:	42a0      	cmp	r0, r4
 80035bc:	f171 0100 	sbcs.w	r1, r1, #0
 80035c0:	f082 8128 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80035c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035c8:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 80035cc:	4321      	orrs	r1, r4
 80035ce:	f000 8632 	beq.w	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 80035d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035d6:	f240 4401 	movw	r4, #1025	@ 0x401
 80035da:	42a0      	cmp	r0, r4
 80035dc:	f171 0100 	sbcs.w	r1, r1, #0
 80035e0:	f082 8118 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80035e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035e8:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 80035ec:	4321      	orrs	r1, r4
 80035ee:	f000 85b0 	beq.w	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 80035f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035f6:	f240 2401 	movw	r4, #513	@ 0x201
 80035fa:	42a0      	cmp	r0, r4
 80035fc:	f171 0100 	sbcs.w	r1, r1, #0
 8003600:	f082 8108 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003604:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003608:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 800360c:	4321      	orrs	r1, r4
 800360e:	f000 8535 	beq.w	800407c <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8003612:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003616:	f240 1401 	movw	r4, #257	@ 0x101
 800361a:	42a0      	cmp	r0, r4
 800361c:	f171 0100 	sbcs.w	r1, r1, #0
 8003620:	f082 80f8 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003624:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003628:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 800362c:	4321      	orrs	r1, r4
 800362e:	f000 84ba 	beq.w	8003fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8003632:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003636:	2881      	cmp	r0, #129	@ 0x81
 8003638:	f171 0100 	sbcs.w	r1, r1, #0
 800363c:	f082 80ea 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003640:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003644:	2821      	cmp	r0, #33	@ 0x21
 8003646:	f171 0100 	sbcs.w	r1, r1, #0
 800364a:	d26f      	bcs.n	800372c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800364c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003650:	4301      	orrs	r1, r0
 8003652:	f002 80df 	beq.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003656:	e9d7 0100 	ldrd	r0, r1, [r7]
 800365a:	1e42      	subs	r2, r0, #1
 800365c:	f141 33ff 	adc.w	r3, r1, #4294967295
 8003660:	2a20      	cmp	r2, #32
 8003662:	f173 0100 	sbcs.w	r1, r3, #0
 8003666:	f082 80d5 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800366a:	2a1f      	cmp	r2, #31
 800366c:	f202 80d2 	bhi.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003670:	a101      	add	r1, pc, #4	@ (adr r1, 8003678 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8003672:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003676:	bf00      	nop
 8003678:	080039d9 	.word	0x080039d9
 800367c:	08003aa5 	.word	0x08003aa5
 8003680:	08005815 	.word	0x08005815
 8003684:	08003b65 	.word	0x08003b65
 8003688:	08005815 	.word	0x08005815
 800368c:	08005815 	.word	0x08005815
 8003690:	08005815 	.word	0x08005815
 8003694:	08003c35 	.word	0x08003c35
 8003698:	08005815 	.word	0x08005815
 800369c:	08005815 	.word	0x08005815
 80036a0:	08005815 	.word	0x08005815
 80036a4:	08005815 	.word	0x08005815
 80036a8:	08005815 	.word	0x08005815
 80036ac:	08005815 	.word	0x08005815
 80036b0:	08005815 	.word	0x08005815
 80036b4:	08003d17 	.word	0x08003d17
 80036b8:	08005815 	.word	0x08005815
 80036bc:	08005815 	.word	0x08005815
 80036c0:	08005815 	.word	0x08005815
 80036c4:	08005815 	.word	0x08005815
 80036c8:	08005815 	.word	0x08005815
 80036cc:	08005815 	.word	0x08005815
 80036d0:	08005815 	.word	0x08005815
 80036d4:	08005815 	.word	0x08005815
 80036d8:	08005815 	.word	0x08005815
 80036dc:	08005815 	.word	0x08005815
 80036e0:	08005815 	.word	0x08005815
 80036e4:	08005815 	.word	0x08005815
 80036e8:	08005815 	.word	0x08005815
 80036ec:	08005815 	.word	0x08005815
 80036f0:	08005815 	.word	0x08005815
 80036f4:	08003ded 	.word	0x08003ded
 80036f8:	80000001 	.word	0x80000001
 80036fc:	40000001 	.word	0x40000001
 8003700:	20000001 	.word	0x20000001
 8003704:	10000001 	.word	0x10000001
 8003708:	08000001 	.word	0x08000001
 800370c:	04000001 	.word	0x04000001
 8003710:	00800001 	.word	0x00800001
 8003714:	00400001 	.word	0x00400001
 8003718:	00200001 	.word	0x00200001
 800371c:	00100001 	.word	0x00100001
 8003720:	00080001 	.word	0x00080001
 8003724:	00040001 	.word	0x00040001
 8003728:	00020001 	.word	0x00020001
 800372c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003730:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8003734:	430b      	orrs	r3, r1
 8003736:	f000 83c4 	beq.w	8003ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800373a:	f002 b86b 	b.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800373e:	4ba1      	ldr	r3, [pc, #644]	@ (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003740:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003744:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8003748:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800374a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003750:	d036      	beq.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8003752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003754:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003758:	d86b      	bhi.n	8003832 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800375a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003760:	d02b      	beq.n	80037ba <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8003762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003764:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003768:	d863      	bhi.n	8003832 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800376a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003770:	d01b      	beq.n	80037aa <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8003772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003774:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003778:	d85b      	bhi.n	8003832 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800377a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377c:	2b00      	cmp	r3, #0
 800377e:	d004      	beq.n	800378a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8003780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003782:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003786:	d008      	beq.n	800379a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8003788:	e053      	b.n	8003832 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800378a:	f107 0320 	add.w	r3, r7, #32
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff f8b4 	bl	80028fc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8003794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003796:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003798:	e04e      	b.n	8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800379a:	f107 0314 	add.w	r3, r7, #20
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff fa18 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80037a8:	e046      	b.n	8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80037aa:	f107 0308 	add.w	r3, r7, #8
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff fb7c 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80037b8:	e03e      	b.n	8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80037ba:	4b83      	ldr	r3, [pc, #524]	@ (80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80037bc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80037be:	e03b      	b.n	8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80037c0:	4b80      	ldr	r3, [pc, #512]	@ (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80037c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037c6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80037ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80037cc:	4b7d      	ldr	r3, [pc, #500]	@ (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d10c      	bne.n	80037f2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80037d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80037de:	4b79      	ldr	r3, [pc, #484]	@ (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	08db      	lsrs	r3, r3, #3
 80037e4:	f003 0303 	and.w	r3, r3, #3
 80037e8:	4a78      	ldr	r2, [pc, #480]	@ (80039cc <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80037ea:	fa22 f303 	lsr.w	r3, r2, r3
 80037ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80037f0:	e01e      	b.n	8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80037f2:	4b74      	ldr	r3, [pc, #464]	@ (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037fe:	d106      	bne.n	800380e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8003800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003806:	d102      	bne.n	800380e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8003808:	4b71      	ldr	r3, [pc, #452]	@ (80039d0 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800380a:	637b      	str	r3, [r7, #52]	@ 0x34
 800380c:	e010      	b.n	8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800380e:	4b6d      	ldr	r3, [pc, #436]	@ (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003816:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800381a:	d106      	bne.n	800382a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800381c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003822:	d102      	bne.n	800382a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8003824:	4b6b      	ldr	r3, [pc, #428]	@ (80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8003826:	637b      	str	r3, [r7, #52]	@ 0x34
 8003828:	e002      	b.n	8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800382e:	e003      	b.n	8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8003830:	e002      	b.n	8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003836:	bf00      	nop
          }
        }
        break;
 8003838:	f001 bfef 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800383c:	4b61      	ldr	r3, [pc, #388]	@ (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800383e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003842:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8003846:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8003848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800384e:	d036      	beq.n	80038be <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8003850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003852:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003856:	d86b      	bhi.n	8003930 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8003858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800385e:	d02b      	beq.n	80038b8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8003860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003862:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003866:	d863      	bhi.n	8003930 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8003868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800386e:	d01b      	beq.n	80038a8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8003870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003872:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003876:	d85b      	bhi.n	8003930 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8003878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387a:	2b00      	cmp	r3, #0
 800387c:	d004      	beq.n	8003888 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800387e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003880:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003884:	d008      	beq.n	8003898 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8003886:	e053      	b.n	8003930 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003888:	f107 0320 	add.w	r3, r7, #32
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff f835 	bl	80028fc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8003892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003894:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003896:	e04e      	b.n	8003936 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003898:	f107 0314 	add.w	r3, r7, #20
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff f999 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80038a6:	e046      	b.n	8003936 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80038a8:	f107 0308 	add.w	r3, r7, #8
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff fafd 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80038b6:	e03e      	b.n	8003936 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80038b8:	4b43      	ldr	r3, [pc, #268]	@ (80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80038ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80038bc:	e03b      	b.n	8003936 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80038be:	4b41      	ldr	r3, [pc, #260]	@ (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80038c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80038c4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80038c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80038ca:	4b3e      	ldr	r3, [pc, #248]	@ (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d10c      	bne.n	80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80038d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d109      	bne.n	80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80038dc:	4b39      	ldr	r3, [pc, #228]	@ (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	08db      	lsrs	r3, r3, #3
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	4a39      	ldr	r2, [pc, #228]	@ (80039cc <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80038e8:	fa22 f303 	lsr.w	r3, r2, r3
 80038ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80038ee:	e01e      	b.n	800392e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80038f0:	4b34      	ldr	r3, [pc, #208]	@ (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038fc:	d106      	bne.n	800390c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80038fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003904:	d102      	bne.n	800390c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8003906:	4b32      	ldr	r3, [pc, #200]	@ (80039d0 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8003908:	637b      	str	r3, [r7, #52]	@ 0x34
 800390a:	e010      	b.n	800392e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800390c:	4b2d      	ldr	r3, [pc, #180]	@ (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003914:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003918:	d106      	bne.n	8003928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800391a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003920:	d102      	bne.n	8003928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8003922:	4b2c      	ldr	r3, [pc, #176]	@ (80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8003924:	637b      	str	r3, [r7, #52]	@ 0x34
 8003926:	e002      	b.n	800392e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800392c:	e003      	b.n	8003936 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800392e:	e002      	b.n	8003936 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003934:	bf00      	nop
          }
        }
        break;
 8003936:	f001 bf70 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800393a:	4b22      	ldr	r3, [pc, #136]	@ (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800393c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003944:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8003946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003948:	2b00      	cmp	r3, #0
 800394a:	d108      	bne.n	800395e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800394c:	f107 0320 	add.w	r3, r7, #32
 8003950:	4618      	mov	r0, r3
 8003952:	f7fe ffd3 	bl	80028fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003958:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800395a:	f001 bf5e 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800395e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003960:	2b40      	cmp	r3, #64	@ 0x40
 8003962:	d108      	bne.n	8003976 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003964:	f107 0314 	add.w	r3, r7, #20
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff f933 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003972:	f001 bf52 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800397a:	f001 bf4e 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800397e:	4b11      	ldr	r3, [pc, #68]	@ (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003980:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003988:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800398a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398c:	2b00      	cmp	r3, #0
 800398e:	d108      	bne.n	80039a2 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003990:	f107 0320 	add.w	r3, r7, #32
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe ffb1 	bl	80028fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800399e:	f001 bf3c 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 80039a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a4:	2b80      	cmp	r3, #128	@ 0x80
 80039a6:	d108      	bne.n	80039ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80039a8:	f107 0314 	add.w	r3, r7, #20
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff f911 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80039b6:	f001 bf30 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80039be:	f001 bf2c 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80039c2:	bf00      	nop
 80039c4:	44020c00 	.word	0x44020c00
 80039c8:	00bb8000 	.word	0x00bb8000
 80039cc:	03d09000 	.word	0x03d09000
 80039d0:	003d0900 	.word	0x003d0900
 80039d4:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80039d8:	4b9d      	ldr	r3, [pc, #628]	@ (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80039da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80039e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d104      	bne.n	80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80039ea:	f7fe ff5b 	bl	80028a4 <HAL_RCC_GetPCLK2Freq>
 80039ee:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80039f0:	f001 bf13 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80039f4:	4b96      	ldr	r3, [pc, #600]	@ (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a00:	d10a      	bne.n	8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8003a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d107      	bne.n	8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003a08:	f107 0314 	add.w	r3, r7, #20
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff f8e1 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a16:	e043      	b.n	8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8003a18:	4b8d      	ldr	r3, [pc, #564]	@ (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a24:	d10a      	bne.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8003a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d107      	bne.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003a2c:	f107 0308 	add.w	r3, r7, #8
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff fa3b 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a3a:	e031      	b.n	8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8003a3c:	4b84      	ldr	r3, [pc, #528]	@ (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d10c      	bne.n	8003a62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8003a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	d109      	bne.n	8003a62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003a4e:	4b80      	ldr	r3, [pc, #512]	@ (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	08db      	lsrs	r3, r3, #3
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	4a7e      	ldr	r2, [pc, #504]	@ (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8003a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a60:	e01e      	b.n	8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8003a62:	4b7b      	ldr	r3, [pc, #492]	@ (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a6e:	d105      	bne.n	8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8003a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d102      	bne.n	8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8003a76:	4b78      	ldr	r3, [pc, #480]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003a78:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a7a:	e011      	b.n	8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003a7c:	4b74      	ldr	r3, [pc, #464]	@ (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003a7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d106      	bne.n	8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8c:	2b05      	cmp	r3, #5
 8003a8e:	d103      	bne.n	8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8003a90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a94:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a96:	e003      	b.n	8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003a9c:	f001 bebd 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003aa0:	f001 bebb 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003aa4:	4b6a      	ldr	r3, [pc, #424]	@ (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003aa6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003aaa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003aae:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d104      	bne.n	8003ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003ab6:	f7fe fedf 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 8003aba:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8003abc:	f001 bead 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8003ac0:	4b63      	ldr	r3, [pc, #396]	@ (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ac8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003acc:	d10a      	bne.n	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d107      	bne.n	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ad4:	f107 0314 	add.w	r3, r7, #20
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff f87b 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ae2:	e03d      	b.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae6:	2b10      	cmp	r3, #16
 8003ae8:	d108      	bne.n	8003afc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003aea:	f107 0308 	add.w	r3, r7, #8
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff f9dc 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003af8:	f001 be8f 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8003afc:	4b54      	ldr	r3, [pc, #336]	@ (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d10c      	bne.n	8003b22 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8003b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0a:	2b18      	cmp	r3, #24
 8003b0c:	d109      	bne.n	8003b22 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003b0e:	4b50      	ldr	r3, [pc, #320]	@ (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	08db      	lsrs	r3, r3, #3
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	4a4e      	ldr	r2, [pc, #312]	@ (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8003b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b20:	e01e      	b.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8003b22:	4b4b      	ldr	r3, [pc, #300]	@ (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b2e:	d105      	bne.n	8003b3c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8003b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b32:	2b20      	cmp	r3, #32
 8003b34:	d102      	bne.n	8003b3c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8003b36:	4b48      	ldr	r3, [pc, #288]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003b38:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b3a:	e011      	b.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8003b3c:	4b44      	ldr	r3, [pc, #272]	@ (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003b3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d106      	bne.n	8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4c:	2b28      	cmp	r3, #40	@ 0x28
 8003b4e:	d103      	bne.n	8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8003b50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b56:	e003      	b.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003b5c:	f001 be5d 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003b60:	f001 be5b 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003b64:	4b3a      	ldr	r3, [pc, #232]	@ (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003b66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003b6a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8003b6e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d104      	bne.n	8003b80 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003b76:	f7fe fe7f 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 8003b7a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8003b7c:	f001 be4d 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8003b80:	4b33      	ldr	r3, [pc, #204]	@ (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b8c:	d10a      	bne.n	8003ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b90:	2b40      	cmp	r3, #64	@ 0x40
 8003b92:	d107      	bne.n	8003ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b94:	f107 0314 	add.w	r3, r7, #20
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff f81b 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ba2:	e045      	b.n	8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8003ba4:	4b2a      	ldr	r3, [pc, #168]	@ (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bb0:	d10a      	bne.n	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb4:	2b80      	cmp	r3, #128	@ 0x80
 8003bb6:	d107      	bne.n	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003bb8:	f107 0308 	add.w	r3, r7, #8
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff f975 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bc6:	e033      	b.n	8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003bc8:	4b21      	ldr	r3, [pc, #132]	@ (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d10c      	bne.n	8003bee <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bd8:	d109      	bne.n	8003bee <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003bda:	4b1d      	ldr	r3, [pc, #116]	@ (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	08db      	lsrs	r3, r3, #3
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	4a1b      	ldr	r2, [pc, #108]	@ (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8003be6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bea:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bec:	e020      	b.n	8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8003bee:	4b18      	ldr	r3, [pc, #96]	@ (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bfa:	d106      	bne.n	8003c0a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c02:	d102      	bne.n	8003c0a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8003c04:	4b14      	ldr	r3, [pc, #80]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c08:	e012      	b.n	8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003c0a:	4b11      	ldr	r3, [pc, #68]	@ (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003c0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d107      	bne.n	8003c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8003c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c1a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003c1e:	d103      	bne.n	8003c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8003c20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c26:	e003      	b.n	8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c2c:	f001 bdf5 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003c30:	f001 bdf3 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003c34:	4b06      	ldr	r3, [pc, #24]	@ (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003c36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003c3a:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8003c3e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8003c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10a      	bne.n	8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003c46:	f7fe fe17 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 8003c4a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8003c4c:	f001 bde5 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003c50:	44020c00 	.word	0x44020c00
 8003c54:	03d09000 	.word	0x03d09000
 8003c58:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8003c5c:	4ba0      	ldr	r3, [pc, #640]	@ (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c68:	d10b      	bne.n	8003c82 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c70:	d107      	bne.n	8003c82 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c72:	f107 0314 	add.w	r3, r7, #20
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fe ffac 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c80:	e047      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8003c82:	4b97      	ldr	r3, [pc, #604]	@ (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c8e:	d10b      	bne.n	8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8003c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c96:	d107      	bne.n	8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003c98:	f107 0308 	add.w	r3, r7, #8
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff f905 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ca6:	e034      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8003ca8:	4b8d      	ldr	r3, [pc, #564]	@ (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d10d      	bne.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003cba:	d109      	bne.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003cbc:	4b88      	ldr	r3, [pc, #544]	@ (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	08db      	lsrs	r3, r3, #3
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	4a87      	ldr	r2, [pc, #540]	@ (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cce:	e020      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8003cd0:	4b83      	ldr	r3, [pc, #524]	@ (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cdc:	d106      	bne.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8003cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ce4:	d102      	bne.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8003ce6:	4b80      	ldr	r3, [pc, #512]	@ (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8003ce8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cea:	e012      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8003cec:	4b7c      	ldr	r3, [pc, #496]	@ (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003cee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d107      	bne.n	8003d0a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003d00:	d103      	bne.n	8003d0a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8003d02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d08:	e003      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003d0e:	f001 bd84 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003d12:	f001 bd82 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003d16:	4b72      	ldr	r3, [pc, #456]	@ (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003d18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003d1c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8003d20:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8003d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d104      	bne.n	8003d32 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003d28:	f7fe fda6 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 8003d2c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8003d2e:	f001 bd74 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8003d32:	4b6b      	ldr	r3, [pc, #428]	@ (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d3e:	d10b      	bne.n	8003d58 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8003d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d46:	d107      	bne.n	8003d58 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d48:	f107 0314 	add.w	r3, r7, #20
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fe ff41 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d56:	e047      	b.n	8003de8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8003d58:	4b61      	ldr	r3, [pc, #388]	@ (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d64:	d10b      	bne.n	8003d7e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8003d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d6c:	d107      	bne.n	8003d7e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003d6e:	f107 0308 	add.w	r3, r7, #8
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff f89a 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d7c:	e034      	b.n	8003de8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8003d7e:	4b58      	ldr	r3, [pc, #352]	@ (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d10d      	bne.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d90:	d109      	bne.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d92:	4b53      	ldr	r3, [pc, #332]	@ (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	08db      	lsrs	r3, r3, #3
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	4a51      	ldr	r2, [pc, #324]	@ (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8003d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003da2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003da4:	e020      	b.n	8003de8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8003da6:	4b4e      	ldr	r3, [pc, #312]	@ (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003db2:	d106      	bne.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8003db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dba:	d102      	bne.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8003dbc:	4b4a      	ldr	r3, [pc, #296]	@ (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8003dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dc0:	e012      	b.n	8003de8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8003dc2:	4b47      	ldr	r3, [pc, #284]	@ (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003dc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d107      	bne.n	8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003dd6:	d103      	bne.n	8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8003dd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ddc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dde:	e003      	b.n	8003de8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003de4:	f001 bd19 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003de8:	f001 bd17 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8003dec:	4b3c      	ldr	r3, [pc, #240]	@ (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003dee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003df2:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8003df6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8003df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d104      	bne.n	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003dfe:	f7fe fd3b 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 8003e02:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8003e04:	f001 bd09 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8003e08:	4b35      	ldr	r3, [pc, #212]	@ (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e14:	d10b      	bne.n	8003e2e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8003e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e1c:	d107      	bne.n	8003e2e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003e1e:	f107 0314 	add.w	r3, r7, #20
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe fed6 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e2c:	e047      	b.n	8003ebe <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8003e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e3a:	d10b      	bne.n	8003e54 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e42:	d107      	bne.n	8003e54 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003e44:	f107 0308 	add.w	r3, r7, #8
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff f82f 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e52:	e034      	b.n	8003ebe <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8003e54:	4b22      	ldr	r3, [pc, #136]	@ (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d10d      	bne.n	8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8003e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e62:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003e66:	d109      	bne.n	8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003e68:	4b1d      	ldr	r3, [pc, #116]	@ (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	08db      	lsrs	r3, r3, #3
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8003e74:	fa22 f303 	lsr.w	r3, r2, r3
 8003e78:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e7a:	e020      	b.n	8003ebe <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8003e7c:	4b18      	ldr	r3, [pc, #96]	@ (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e88:	d106      	bne.n	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e90:	d102      	bne.n	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8003e92:	4b15      	ldr	r3, [pc, #84]	@ (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8003e94:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e96:	e012      	b.n	8003ebe <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8003e98:	4b11      	ldr	r3, [pc, #68]	@ (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003e9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d107      	bne.n	8003eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003eac:	d103      	bne.n	8003eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8003eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eb4:	e003      	b.n	8003ebe <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003eba:	f001 bcae 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003ebe:	f001 bcac 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8003ec2:	4b07      	ldr	r3, [pc, #28]	@ (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003ec4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003ec8:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8003ecc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8003ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10b      	bne.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003ed4:	f7fe fcd0 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 8003ed8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8003eda:	f001 bc9e 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003ede:	bf00      	nop
 8003ee0:	44020c00 	.word	0x44020c00
 8003ee4:	03d09000 	.word	0x03d09000
 8003ee8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8003eec:	4ba0      	ldr	r3, [pc, #640]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ef4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ef8:	d10b      	bne.n	8003f12 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8003efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f00:	d107      	bne.n	8003f12 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003f02:	f107 0314 	add.w	r3, r7, #20
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fe fe64 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f10:	e047      	b.n	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8003f12:	4b97      	ldr	r3, [pc, #604]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f1e:	d10b      	bne.n	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8003f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f22:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f26:	d107      	bne.n	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003f28:	f107 0308 	add.w	r3, r7, #8
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fe ffbd 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f36:	e034      	b.n	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8003f38:	4b8d      	ldr	r3, [pc, #564]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d10d      	bne.n	8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8003f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f46:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003f4a:	d109      	bne.n	8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f4c:	4b88      	ldr	r3, [pc, #544]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	08db      	lsrs	r3, r3, #3
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	4a87      	ldr	r2, [pc, #540]	@ (8004174 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8003f58:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f5e:	e020      	b.n	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8003f60:	4b83      	ldr	r3, [pc, #524]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f6c:	d106      	bne.n	8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f74:	d102      	bne.n	8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8003f76:	4b80      	ldr	r3, [pc, #512]	@ (8004178 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8003f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f7a:	e012      	b.n	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8003f7c:	4b7c      	ldr	r3, [pc, #496]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003f7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d107      	bne.n	8003f9a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003f90:	d103      	bne.n	8003f9a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8003f92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f96:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f98:	e003      	b.n	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f9e:	f001 bc3c 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003fa2:	f001 bc3a 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8003fa6:	4b72      	ldr	r3, [pc, #456]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003fa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003fac:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8003fb0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d104      	bne.n	8003fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003fb8:	f7fe fc5e 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 8003fbc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8003fbe:	f001 bc2c 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8003fc2:	4b6b      	ldr	r3, [pc, #428]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fce:	d10b      	bne.n	8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fd6:	d107      	bne.n	8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003fd8:	f107 0314 	add.w	r3, r7, #20
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fe fdf9 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fe6:	e047      	b.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8003fe8:	4b61      	ldr	r3, [pc, #388]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ff0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ff4:	d10b      	bne.n	800400e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ffc:	d107      	bne.n	800400e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003ffe:	f107 0308 	add.w	r3, r7, #8
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe ff52 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	637b      	str	r3, [r7, #52]	@ 0x34
 800400c:	e034      	b.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800400e:	4b58      	ldr	r3, [pc, #352]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b02      	cmp	r3, #2
 8004018:	d10d      	bne.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800401a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004020:	d109      	bne.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004022:	4b53      	ldr	r3, [pc, #332]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	08db      	lsrs	r3, r3, #3
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	4a51      	ldr	r2, [pc, #324]	@ (8004174 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800402e:	fa22 f303 	lsr.w	r3, r2, r3
 8004032:	637b      	str	r3, [r7, #52]	@ 0x34
 8004034:	e020      	b.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8004036:	4b4e      	ldr	r3, [pc, #312]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800403e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004042:	d106      	bne.n	8004052 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8004044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004046:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800404a:	d102      	bne.n	8004052 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800404c:	4b4a      	ldr	r3, [pc, #296]	@ (8004178 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800404e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004050:	e012      	b.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8004052:	4b47      	ldr	r3, [pc, #284]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b02      	cmp	r3, #2
 800405e:	d107      	bne.n	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8004060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004062:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004066:	d103      	bne.n	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8004068:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800406c:	637b      	str	r3, [r7, #52]	@ 0x34
 800406e:	e003      	b.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004074:	f001 bbd1 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004078:	f001 bbcf 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800407c:	4b3c      	ldr	r3, [pc, #240]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800407e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004082:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004086:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8004088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408a:	2b00      	cmp	r3, #0
 800408c:	d104      	bne.n	8004098 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800408e:	f7fe fbf3 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 8004092:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8004094:	f001 bbc1 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8004098:	4b35      	ldr	r3, [pc, #212]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040a4:	d10b      	bne.n	80040be <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 80040a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040ac:	d107      	bne.n	80040be <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80040ae:	f107 0314 	add.w	r3, r7, #20
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fe fd8e 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80040bc:	e047      	b.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80040be:	4b2c      	ldr	r3, [pc, #176]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040ca:	d10b      	bne.n	80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80040cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040d2:	d107      	bne.n	80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80040d4:	f107 0308 	add.w	r3, r7, #8
 80040d8:	4618      	mov	r0, r3
 80040da:	f7fe fee7 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80040e2:	e034      	b.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 80040e4:	4b22      	ldr	r3, [pc, #136]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d10d      	bne.n	800410c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 80040f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80040f6:	d109      	bne.n	800410c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80040f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	08db      	lsrs	r3, r3, #3
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	4a1c      	ldr	r2, [pc, #112]	@ (8004174 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8004104:	fa22 f303 	lsr.w	r3, r2, r3
 8004108:	637b      	str	r3, [r7, #52]	@ 0x34
 800410a:	e020      	b.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800410c:	4b18      	ldr	r3, [pc, #96]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004118:	d106      	bne.n	8004128 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800411a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004120:	d102      	bne.n	8004128 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8004122:	4b15      	ldr	r3, [pc, #84]	@ (8004178 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8004124:	637b      	str	r3, [r7, #52]	@ 0x34
 8004126:	e012      	b.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8004128:	4b11      	ldr	r3, [pc, #68]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800412a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b02      	cmp	r3, #2
 8004134:	d107      	bne.n	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8004136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004138:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800413c:	d103      	bne.n	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800413e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004142:	637b      	str	r3, [r7, #52]	@ 0x34
 8004144:	e003      	b.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800414a:	f001 bb66 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800414e:	f001 bb64 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8004152:	4b07      	ldr	r3, [pc, #28]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004154:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004158:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800415c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800415e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10b      	bne.n	800417c <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004164:	f7fe fb88 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 8004168:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800416a:	f001 bb56 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800416e:	bf00      	nop
 8004170:	44020c00 	.word	0x44020c00
 8004174:	03d09000 	.word	0x03d09000
 8004178:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800417c:	4ba1      	ldr	r3, [pc, #644]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004184:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004188:	d10b      	bne.n	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800418a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004190:	d107      	bne.n	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004192:	f107 0314 	add.w	r3, r7, #20
 8004196:	4618      	mov	r0, r3
 8004198:	f7fe fd1c 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	637b      	str	r3, [r7, #52]	@ 0x34
 80041a0:	e047      	b.n	8004232 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 80041a2:	4b98      	ldr	r3, [pc, #608]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041ae:	d10b      	bne.n	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 80041b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041b6:	d107      	bne.n	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80041b8:	f107 0308 	add.w	r3, r7, #8
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fe fe75 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80041c6:	e034      	b.n	8004232 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80041c8:	4b8e      	ldr	r3, [pc, #568]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d10d      	bne.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 80041d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80041da:	d109      	bne.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80041dc:	4b89      	ldr	r3, [pc, #548]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	08db      	lsrs	r3, r3, #3
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	4a88      	ldr	r2, [pc, #544]	@ (8004408 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80041e8:	fa22 f303 	lsr.w	r3, r2, r3
 80041ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80041ee:	e020      	b.n	8004232 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80041f0:	4b84      	ldr	r3, [pc, #528]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041fc:	d106      	bne.n	800420c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 80041fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004200:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004204:	d102      	bne.n	800420c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8004206:	4b81      	ldr	r3, [pc, #516]	@ (800440c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8004208:	637b      	str	r3, [r7, #52]	@ 0x34
 800420a:	e012      	b.n	8004232 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800420c:	4b7d      	ldr	r3, [pc, #500]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800420e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b02      	cmp	r3, #2
 8004218:	d107      	bne.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800421a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8004220:	d103      	bne.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8004222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004226:	637b      	str	r3, [r7, #52]	@ 0x34
 8004228:	e003      	b.n	8004232 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800422e:	f001 baf4 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004232:	f001 baf2 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8004236:	4b73      	ldr	r3, [pc, #460]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004238:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8004242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004244:	2b00      	cmp	r3, #0
 8004246:	d104      	bne.n	8004252 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004248:	f7fe fb16 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 800424c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800424e:	f001 bae4 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8004252:	4b6c      	ldr	r3, [pc, #432]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800425a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800425e:	d10a      	bne.n	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8004260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004262:	2b01      	cmp	r3, #1
 8004264:	d107      	bne.n	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004266:	f107 0314 	add.w	r3, r7, #20
 800426a:	4618      	mov	r0, r3
 800426c:	f7fe fcb2 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	637b      	str	r3, [r7, #52]	@ 0x34
 8004274:	e043      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8004276:	4b63      	ldr	r3, [pc, #396]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800427e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004282:	d10a      	bne.n	800429a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8004284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004286:	2b02      	cmp	r3, #2
 8004288:	d107      	bne.n	800429a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800428a:	f107 0308 	add.w	r3, r7, #8
 800428e:	4618      	mov	r0, r3
 8004290:	f7fe fe0c 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	637b      	str	r3, [r7, #52]	@ 0x34
 8004298:	e031      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800429a:	4b5a      	ldr	r3, [pc, #360]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d10c      	bne.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 80042a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a8:	2b03      	cmp	r3, #3
 80042aa:	d109      	bne.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80042ac:	4b55      	ldr	r3, [pc, #340]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	08db      	lsrs	r3, r3, #3
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	4a54      	ldr	r2, [pc, #336]	@ (8004408 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80042b8:	fa22 f303 	lsr.w	r3, r2, r3
 80042bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80042be:	e01e      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80042c0:	4b50      	ldr	r3, [pc, #320]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042cc:	d105      	bne.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80042ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d102      	bne.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 80042d4:	4b4d      	ldr	r3, [pc, #308]	@ (800440c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80042d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80042d8:	e011      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 80042da:	4b4a      	ldr	r3, [pc, #296]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80042dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d106      	bne.n	80042f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 80042e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ea:	2b05      	cmp	r3, #5
 80042ec:	d103      	bne.n	80042f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 80042ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80042f4:	e003      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042fa:	f001 ba8e 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80042fe:	f001 ba8c 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8004302:	4b40      	ldr	r3, [pc, #256]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004304:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004308:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800430c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800430e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004310:	2b00      	cmp	r3, #0
 8004312:	d104      	bne.n	800431e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004314:	f7fe fab0 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 8004318:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800431a:	f001 ba7e 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800431e:	4b39      	ldr	r3, [pc, #228]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004326:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800432a:	d10a      	bne.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800432c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432e:	2b10      	cmp	r3, #16
 8004330:	d107      	bne.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004332:	f107 0314 	add.w	r3, r7, #20
 8004336:	4618      	mov	r0, r3
 8004338:	f7fe fc4c 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004340:	e043      	b.n	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8004342:	4b30      	ldr	r3, [pc, #192]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800434a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800434e:	d10a      	bne.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8004350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004352:	2b20      	cmp	r3, #32
 8004354:	d107      	bne.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004356:	f107 0308 	add.w	r3, r7, #8
 800435a:	4618      	mov	r0, r3
 800435c:	f7fe fda6 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	637b      	str	r3, [r7, #52]	@ 0x34
 8004364:	e031      	b.n	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8004366:	4b27      	ldr	r3, [pc, #156]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b02      	cmp	r3, #2
 8004370:	d10c      	bne.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8004372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004374:	2b30      	cmp	r3, #48	@ 0x30
 8004376:	d109      	bne.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004378:	4b22      	ldr	r3, [pc, #136]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	08db      	lsrs	r3, r3, #3
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	4a21      	ldr	r2, [pc, #132]	@ (8004408 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8004384:	fa22 f303 	lsr.w	r3, r2, r3
 8004388:	637b      	str	r3, [r7, #52]	@ 0x34
 800438a:	e01e      	b.n	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800438c:	4b1d      	ldr	r3, [pc, #116]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004398:	d105      	bne.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800439a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439c:	2b40      	cmp	r3, #64	@ 0x40
 800439e:	d102      	bne.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 80043a0:	4b1a      	ldr	r3, [pc, #104]	@ (800440c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80043a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80043a4:	e011      	b.n	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 80043a6:	4b17      	ldr	r3, [pc, #92]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80043a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d106      	bne.n	80043c2 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 80043b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b6:	2b50      	cmp	r3, #80	@ 0x50
 80043b8:	d103      	bne.n	80043c2 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 80043ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043be:	637b      	str	r3, [r7, #52]	@ 0x34
 80043c0:	e003      	b.n	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043c6:	f001 ba28 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80043ca:	f001 ba26 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80043ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80043d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043d4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80043d8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80043da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d104      	bne.n	80043ea <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80043e0:	f7fe fa76 	bl	80028d0 <HAL_RCC_GetPCLK3Freq>
 80043e4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80043e6:	f001 ba18 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80043ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043f0:	d10e      	bne.n	8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043f2:	f107 0314 	add.w	r3, r7, #20
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fe fbec 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004400:	f001 ba0b 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004404:	44020c00 	.word	0x44020c00
 8004408:	03d09000 	.word	0x03d09000
 800440c:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8004410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004412:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004416:	d108      	bne.n	800442a <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004418:	f107 0308 	add.w	r3, r7, #8
 800441c:	4618      	mov	r0, r3
 800441e:	f7fe fd45 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004426:	f001 b9f8 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800442a:	4ba4      	ldr	r3, [pc, #656]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b02      	cmp	r3, #2
 8004434:	d10d      	bne.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8004436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004438:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800443c:	d109      	bne.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800443e:	4b9f      	ldr	r3, [pc, #636]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	08db      	lsrs	r3, r3, #3
 8004444:	f003 0303 	and.w	r3, r3, #3
 8004448:	4a9d      	ldr	r2, [pc, #628]	@ (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800444a:	fa22 f303 	lsr.w	r3, r2, r3
 800444e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004450:	e020      	b.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8004452:	4b9a      	ldr	r3, [pc, #616]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800445a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800445e:	d106      	bne.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8004460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004462:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004466:	d102      	bne.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8004468:	4b96      	ldr	r3, [pc, #600]	@ (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800446a:	637b      	str	r3, [r7, #52]	@ 0x34
 800446c:	e012      	b.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800446e:	4b93      	ldr	r3, [pc, #588]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004470:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b02      	cmp	r3, #2
 800447a:	d107      	bne.n	800448c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800447c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004482:	d103      	bne.n	800448c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8004484:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004488:	637b      	str	r3, [r7, #52]	@ 0x34
 800448a:	e003      	b.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004490:	f001 b9c3 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004494:	f001 b9c1 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004498:	4b88      	ldr	r3, [pc, #544]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800449a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80044a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d104      	bne.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80044aa:	f7fe f9c9 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 80044ae:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80044b0:	f001 b9b3 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80044b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d104      	bne.n	80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 80044ba:	f7fe f895 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 80044be:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80044c0:	f001 b9ab 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80044c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d108      	bne.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044ca:	f107 0314 	add.w	r3, r7, #20
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fe fb80 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044d8:	f001 b99f 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80044dc:	4b77      	ldr	r3, [pc, #476]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044e8:	d105      	bne.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80044ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d102      	bne.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 80044f0:	4b75      	ldr	r3, [pc, #468]	@ (80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 80044f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80044f4:	e023      	b.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80044f6:	4b71      	ldr	r3, [pc, #452]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d10c      	bne.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8004502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004504:	2b04      	cmp	r3, #4
 8004506:	d109      	bne.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004508:	4b6c      	ldr	r3, [pc, #432]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	08db      	lsrs	r3, r3, #3
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	4a6b      	ldr	r2, [pc, #428]	@ (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8004514:	fa22 f303 	lsr.w	r3, r2, r3
 8004518:	637b      	str	r3, [r7, #52]	@ 0x34
 800451a:	e010      	b.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800451c:	4b67      	ldr	r3, [pc, #412]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004528:	d105      	bne.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800452a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452c:	2b05      	cmp	r3, #5
 800452e:	d102      	bne.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8004530:	4b64      	ldr	r3, [pc, #400]	@ (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8004532:	637b      	str	r3, [r7, #52]	@ 0x34
 8004534:	e003      	b.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800453a:	f001 b96e 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800453e:	f001 b96c 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8004542:	4b5e      	ldr	r3, [pc, #376]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004544:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800454e:	4b5b      	ldr	r3, [pc, #364]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b02      	cmp	r3, #2
 800455a:	d106      	bne.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800455c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455e:	2b00      	cmp	r3, #0
 8004560:	d103      	bne.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8004562:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004566:	637b      	str	r3, [r7, #52]	@ 0x34
 8004568:	e012      	b.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800456a:	4b54      	ldr	r3, [pc, #336]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800456c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004570:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004574:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004578:	d106      	bne.n	8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800457a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457c:	2b08      	cmp	r3, #8
 800457e:	d103      	bne.n	8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8004580:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004584:	637b      	str	r3, [r7, #52]	@ 0x34
 8004586:	e003      	b.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800458c:	f001 b945 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004590:	f001 b943 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004594:	4b49      	ldr	r3, [pc, #292]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004596:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800459a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800459e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80045a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d104      	bne.n	80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80045a6:	f7fe f967 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 80045aa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80045ac:	f001 b935 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80045b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045b6:	d108      	bne.n	80045ca <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045b8:	f107 0308 	add.w	r3, r7, #8
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fe fc75 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045c6:	f001 b928 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80045ca:	4b3c      	ldr	r3, [pc, #240]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d10d      	bne.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 80045d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045dc:	d109      	bne.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80045de:	4b37      	ldr	r3, [pc, #220]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	08db      	lsrs	r3, r3, #3
 80045e4:	f003 0303 	and.w	r3, r3, #3
 80045e8:	4a35      	ldr	r2, [pc, #212]	@ (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80045ea:	fa22 f303 	lsr.w	r3, r2, r3
 80045ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80045f0:	e011      	b.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80045f2:	4b32      	ldr	r3, [pc, #200]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045fe:	d106      	bne.n	800460e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8004600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004602:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004606:	d102      	bne.n	800460e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8004608:	4b2e      	ldr	r3, [pc, #184]	@ (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800460a:	637b      	str	r3, [r7, #52]	@ 0x34
 800460c:	e003      	b.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004612:	f001 b902 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004616:	f001 b900 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800461a:	4b28      	ldr	r3, [pc, #160]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800461c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004620:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004624:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004628:	2b00      	cmp	r3, #0
 800462a:	d104      	bne.n	8004636 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800462c:	f7fe f924 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 8004630:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004632:	f001 b8f2 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8004636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004638:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800463c:	d108      	bne.n	8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800463e:	f107 0308 	add.w	r3, r7, #8
 8004642:	4618      	mov	r0, r3
 8004644:	f7fe fc32 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800464c:	f001 b8e5 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004650:	4b1a      	ldr	r3, [pc, #104]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b02      	cmp	r3, #2
 800465a:	d10d      	bne.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800465c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800465e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004662:	d109      	bne.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004664:	4b15      	ldr	r3, [pc, #84]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	08db      	lsrs	r3, r3, #3
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	4a14      	ldr	r2, [pc, #80]	@ (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8004670:	fa22 f303 	lsr.w	r3, r2, r3
 8004674:	637b      	str	r3, [r7, #52]	@ 0x34
 8004676:	e011      	b.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8004678:	4b10      	ldr	r3, [pc, #64]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004684:	d106      	bne.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8004686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004688:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800468c:	d102      	bne.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800468e:	4b0d      	ldr	r3, [pc, #52]	@ (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8004690:	637b      	str	r3, [r7, #52]	@ 0x34
 8004692:	e003      	b.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004698:	f001 b8bf 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800469c:	f001 b8bd 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80046a0:	4b06      	ldr	r3, [pc, #24]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80046a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80046a6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80046aa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80046ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10c      	bne.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80046b2:	f7fe f90d 	bl	80028d0 <HAL_RCC_GetPCLK3Freq>
 80046b6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 80046b8:	f001 b8af 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80046bc:	44020c00 	.word	0x44020c00
 80046c0:	03d09000 	.word	0x03d09000
 80046c4:	003d0900 	.word	0x003d0900
 80046c8:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80046cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046d2:	d108      	bne.n	80046e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046d4:	f107 0308 	add.w	r3, r7, #8
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fe fbe7 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80046e2:	f001 b89a 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80046e6:	4b9f      	ldr	r3, [pc, #636]	@ (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d10d      	bne.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 80046f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046f8:	d109      	bne.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80046fa:	4b9a      	ldr	r3, [pc, #616]	@ (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	08db      	lsrs	r3, r3, #3
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	4a98      	ldr	r2, [pc, #608]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8004706:	fa22 f303 	lsr.w	r3, r2, r3
 800470a:	637b      	str	r3, [r7, #52]	@ 0x34
 800470c:	e011      	b.n	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800470e:	4b95      	ldr	r3, [pc, #596]	@ (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004716:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800471a:	d106      	bne.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800471c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004722:	d102      	bne.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8004724:	4b91      	ldr	r3, [pc, #580]	@ (800496c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8004726:	637b      	str	r3, [r7, #52]	@ 0x34
 8004728:	e003      	b.n	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800472a:	2300      	movs	r3, #0
 800472c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800472e:	f001 b874 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004732:	f001 b872 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004736:	4b8b      	ldr	r3, [pc, #556]	@ (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004738:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800473c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004740:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8004742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004744:	2b00      	cmp	r3, #0
 8004746:	d104      	bne.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004748:	f7fe f8c2 	bl	80028d0 <HAL_RCC_GetPCLK3Freq>
 800474c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800474e:	f001 b864 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8004752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004754:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004758:	d108      	bne.n	800476c <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800475a:	f107 0308 	add.w	r3, r7, #8
 800475e:	4618      	mov	r0, r3
 8004760:	f7fe fba4 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004768:	f001 b857 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800476c:	4b7d      	ldr	r3, [pc, #500]	@ (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b02      	cmp	r3, #2
 8004776:	d10d      	bne.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8004778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800477e:	d109      	bne.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004780:	4b78      	ldr	r3, [pc, #480]	@ (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	08db      	lsrs	r3, r3, #3
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	4a77      	ldr	r2, [pc, #476]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800478c:	fa22 f303 	lsr.w	r3, r2, r3
 8004790:	637b      	str	r3, [r7, #52]	@ 0x34
 8004792:	e011      	b.n	80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8004794:	4b73      	ldr	r3, [pc, #460]	@ (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800479c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047a0:	d106      	bne.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 80047a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80047a8:	d102      	bne.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 80047aa:	4b70      	ldr	r3, [pc, #448]	@ (800496c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80047ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ae:	e003      	b.n	80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047b4:	f001 b831 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80047b8:	f001 b82f 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80047bc:	4b69      	ldr	r3, [pc, #420]	@ (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80047be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80047c2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80047c6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80047c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d104      	bne.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80047ce:	f7fe f853 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 80047d2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80047d4:	f001 b821 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 80047d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047de:	d108      	bne.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047e0:	f107 0308 	add.w	r3, r7, #8
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fe fb61 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047ee:	f001 b814 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80047f2:	4b5c      	ldr	r3, [pc, #368]	@ (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d10e      	bne.n	800481c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 80047fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004800:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004804:	d10a      	bne.n	800481c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004806:	4b57      	ldr	r3, [pc, #348]	@ (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	08db      	lsrs	r3, r3, #3
 800480c:	f003 0303 	and.w	r3, r3, #3
 8004810:	4a55      	ldr	r2, [pc, #340]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8004812:	fa22 f303 	lsr.w	r3, r2, r3
 8004816:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004818:	f000 bfff 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004820:	f000 bffb 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004824:	4b4f      	ldr	r3, [pc, #316]	@ (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004826:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800482a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800482e:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004832:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004836:	d056      	beq.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8004838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800483e:	f200 808b 	bhi.w	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8004842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004848:	d03e      	beq.n	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800484a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004850:	f200 8082 	bhi.w	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8004854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004856:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800485a:	d027      	beq.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800485c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004862:	d879      	bhi.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8004864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004866:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800486a:	d017      	beq.n	800489c <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800486c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004872:	d871      	bhi.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8004874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004876:	2b00      	cmp	r3, #0
 8004878:	d004      	beq.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800487a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004880:	d004      	beq.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8004882:	e069      	b.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004884:	f7fe f824 	bl	80028d0 <HAL_RCC_GetPCLK3Freq>
 8004888:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800488a:	e068      	b.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800488c:	f107 0314 	add.w	r3, r7, #20
 8004890:	4618      	mov	r0, r3
 8004892:	f7fe f99f 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800489a:	e060      	b.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800489c:	f107 0308 	add.w	r3, r7, #8
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fe fb03 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80048aa:	e058      	b.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80048ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80048ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d103      	bne.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 80048ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048be:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80048c0:	e04d      	b.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80048c2:	2300      	movs	r3, #0
 80048c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80048c6:	e04a      	b.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80048c8:	4b26      	ldr	r3, [pc, #152]	@ (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80048ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048d6:	d103      	bne.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 80048d8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80048dc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80048de:	e03e      	b.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80048e4:	e03b      	b.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80048e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80048e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80048ec:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80048f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80048f2:	4b1c      	ldr	r3, [pc, #112]	@ (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d10c      	bne.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 80048fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004900:	2b00      	cmp	r3, #0
 8004902:	d109      	bne.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004904:	4b17      	ldr	r3, [pc, #92]	@ (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	08db      	lsrs	r3, r3, #3
 800490a:	f003 0303 	and.w	r3, r3, #3
 800490e:	4a16      	ldr	r2, [pc, #88]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8004910:	fa22 f303 	lsr.w	r3, r2, r3
 8004914:	637b      	str	r3, [r7, #52]	@ 0x34
 8004916:	e01e      	b.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004918:	4b12      	ldr	r3, [pc, #72]	@ (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004920:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004924:	d106      	bne.n	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8004926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800492c:	d102      	bne.n	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800492e:	4b0f      	ldr	r3, [pc, #60]	@ (800496c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8004930:	637b      	str	r3, [r7, #52]	@ 0x34
 8004932:	e010      	b.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004934:	4b0b      	ldr	r3, [pc, #44]	@ (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800493c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004940:	d106      	bne.n	8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8004942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004944:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004948:	d102      	bne.n	8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800494a:	4b09      	ldr	r3, [pc, #36]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800494c:	637b      	str	r3, [r7, #52]	@ 0x34
 800494e:	e002      	b.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004950:	2300      	movs	r3, #0
 8004952:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004954:	e003      	b.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8004956:	e002      	b.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800495c:	bf00      	nop
          }
        }
        break;
 800495e:	f000 bf5c 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004962:	bf00      	nop
 8004964:	44020c00 	.word	0x44020c00
 8004968:	03d09000 	.word	0x03d09000
 800496c:	003d0900 	.word	0x003d0900
 8004970:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004974:	4b9e      	ldr	r3, [pc, #632]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004976:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800497a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800497e:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004982:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004986:	d056      	beq.n	8004a36 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8004988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800498e:	f200 808b 	bhi.w	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8004992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004994:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004998:	d03e      	beq.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800499a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049a0:	f200 8082 	bhi.w	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80049a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049aa:	d027      	beq.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 80049ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049b2:	d879      	bhi.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80049b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049ba:	d017      	beq.n	80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 80049bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049c2:	d871      	bhi.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80049c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d004      	beq.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 80049ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049d0:	d004      	beq.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 80049d2:	e069      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80049d4:	f7fd ff50 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 80049d8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80049da:	e068      	b.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049dc:	f107 0314 	add.w	r3, r7, #20
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7fe f8f7 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80049ea:	e060      	b.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049ec:	f107 0308 	add.w	r3, r7, #8
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fe fa5b 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80049fa:	e058      	b.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80049fc:	4b7c      	ldr	r3, [pc, #496]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80049fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d103      	bne.n	8004a12 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8004a0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a0e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004a10:	e04d      	b.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8004a12:	2300      	movs	r3, #0
 8004a14:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004a16:	e04a      	b.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004a18:	4b75      	ldr	r3, [pc, #468]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004a1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a26:	d103      	bne.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8004a28:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004a2c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004a2e:	e03e      	b.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004a34:	e03b      	b.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004a36:	4b6e      	ldr	r3, [pc, #440]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004a38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a3c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004a40:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a42:	4b6b      	ldr	r3, [pc, #428]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d10c      	bne.n	8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8004a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d109      	bne.n	8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a54:	4b66      	ldr	r3, [pc, #408]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	08db      	lsrs	r3, r3, #3
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	4a65      	ldr	r2, [pc, #404]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
 8004a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a66:	e01e      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a68:	4b61      	ldr	r3, [pc, #388]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a74:	d106      	bne.n	8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8004a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a7c:	d102      	bne.n	8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004a7e:	4b5e      	ldr	r3, [pc, #376]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8004a80:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a82:	e010      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a84:	4b5a      	ldr	r3, [pc, #360]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a90:	d106      	bne.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8004a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a98:	d102      	bne.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004a9a:	4b58      	ldr	r3, [pc, #352]	@ (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8004a9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a9e:	e002      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004aa4:	e003      	b.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8004aa6:	e002      	b.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004aac:	bf00      	nop
          }
        }
        break;
 8004aae:	f000 beb4 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8004ab2:	4b4f      	ldr	r3, [pc, #316]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004ab4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004ab8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004abc:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ac4:	d056      	beq.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004acc:	f200 808b 	bhi.w	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ad6:	d03e      	beq.n	8004b56 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ada:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ade:	f200 8082 	bhi.w	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ae8:	d027      	beq.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8004aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004af0:	d879      	bhi.n	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8004af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004af8:	d017      	beq.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8004afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b00:	d871      	bhi.n	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8004b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d004      	beq.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8004b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b0e:	d004      	beq.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8004b10:	e069      	b.n	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004b12:	f7fd fedd 	bl	80028d0 <HAL_RCC_GetPCLK3Freq>
 8004b16:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8004b18:	e068      	b.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b1a:	f107 0314 	add.w	r3, r7, #20
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fe f858 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004b28:	e060      	b.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b2a:	f107 0308 	add.w	r3, r7, #8
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fe f9bc 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004b38:	e058      	b.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004b3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d103      	bne.n	8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8004b48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b4c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004b4e:	e04d      	b.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004b54:	e04a      	b.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004b56:	4b26      	ldr	r3, [pc, #152]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004b58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b64:	d103      	bne.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8004b66:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004b6a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004b6c:	e03e      	b.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004b72:	e03b      	b.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004b74:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004b76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b7a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b80:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d10c      	bne.n	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8004b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d109      	bne.n	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b92:	4b17      	ldr	r3, [pc, #92]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	08db      	lsrs	r3, r3, #3
 8004b98:	f003 0303 	and.w	r3, r3, #3
 8004b9c:	4a15      	ldr	r2, [pc, #84]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8004b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ba4:	e01e      	b.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ba6:	4b12      	ldr	r3, [pc, #72]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bb2:	d106      	bne.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8004bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bba:	d102      	bne.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8004bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bc0:	e010      	b.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bce:	d106      	bne.n	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8004bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bd6:	d102      	bne.n	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004bd8:	4b08      	ldr	r3, [pc, #32]	@ (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8004bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bdc:	e002      	b.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004bde:	2300      	movs	r3, #0
 8004be0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004be2:	e003      	b.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8004be4:	e002      	b.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004bea:	bf00      	nop
          }
        }
        break;
 8004bec:	f000 be15 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004bf0:	44020c00 	.word	0x44020c00
 8004bf4:	03d09000 	.word	0x03d09000
 8004bf8:	003d0900 	.word	0x003d0900
 8004bfc:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8004c00:	4b9e      	ldr	r3, [pc, #632]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004c02:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004c06:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8004c0a:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004c12:	d056      	beq.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8004c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c16:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004c1a:	f200 808b 	bhi.w	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c24:	d03e      	beq.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8004c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c2c:	f200 8082 	bhi.w	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8004c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c32:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c36:	d027      	beq.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8004c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c3e:	d879      	bhi.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8004c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c46:	d017      	beq.n	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8004c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c4e:	d871      	bhi.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8004c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d004      	beq.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8004c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c5c:	d004      	beq.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8004c5e:	e069      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004c60:	f7fd fe36 	bl	80028d0 <HAL_RCC_GetPCLK3Freq>
 8004c64:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8004c66:	e068      	b.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c68:	f107 0314 	add.w	r3, r7, #20
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fd ffb1 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004c76:	e060      	b.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c78:	f107 0308 	add.w	r3, r7, #8
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fe f915 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004c86:	e058      	b.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c88:	4b7c      	ldr	r3, [pc, #496]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004c8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d103      	bne.n	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8004c96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c9a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004c9c:	e04d      	b.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004ca2:	e04a      	b.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004ca4:	4b75      	ldr	r3, [pc, #468]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004ca6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004caa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cb2:	d103      	bne.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8004cb4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004cb8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004cba:	e03e      	b.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004cc0:	e03b      	b.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004cc2:	4b6e      	ldr	r3, [pc, #440]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004cc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cc8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004cce:	4b6b      	ldr	r3, [pc, #428]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d10c      	bne.n	8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8004cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d109      	bne.n	8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ce0:	4b66      	ldr	r3, [pc, #408]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	08db      	lsrs	r3, r3, #3
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	4a65      	ldr	r2, [pc, #404]	@ (8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8004cec:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cf2:	e01e      	b.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004cf4:	4b61      	ldr	r3, [pc, #388]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d00:	d106      	bne.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8004d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d08:	d102      	bne.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004d0a:	4b5e      	ldr	r3, [pc, #376]	@ (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8004d0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d0e:	e010      	b.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d10:	4b5a      	ldr	r3, [pc, #360]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d1c:	d106      	bne.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8004d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d24:	d102      	bne.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004d26:	4b58      	ldr	r3, [pc, #352]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8004d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d2a:	e002      	b.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004d30:	e003      	b.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8004d32:	e002      	b.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004d38:	bf00      	nop
          }
        }
        break;
 8004d3a:	f000 bd6e 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8004d3e:	4b4f      	ldr	r3, [pc, #316]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004d40:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004d44:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004d48:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004d50:	d056      	beq.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8004d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d54:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004d58:	f200 808b 	bhi.w	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d62:	d03e      	beq.n	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8004d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d6a:	f200 8082 	bhi.w	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d70:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d74:	d027      	beq.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8004d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d78:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d7c:	d879      	bhi.n	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d84:	d017      	beq.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8004d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d8c:	d871      	bhi.n	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d004      	beq.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8004d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d9a:	d004      	beq.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8004d9c:	e069      	b.n	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004d9e:	f7fd fd97 	bl	80028d0 <HAL_RCC_GetPCLK3Freq>
 8004da2:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8004da4:	e068      	b.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004da6:	f107 0314 	add.w	r3, r7, #20
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fd ff12 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004db4:	e060      	b.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004db6:	f107 0308 	add.w	r3, r7, #8
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fe f876 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004dc4:	e058      	b.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004dc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d103      	bne.n	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8004dd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dd8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004dda:	e04d      	b.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004de0:	e04a      	b.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004de2:	4b26      	ldr	r3, [pc, #152]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004de8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004df0:	d103      	bne.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8004df2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004df6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004df8:	e03e      	b.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004dfe:	e03b      	b.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004e00:	4b1e      	ldr	r3, [pc, #120]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004e02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e06:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d10c      	bne.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8004e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d109      	bne.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e1e:	4b17      	ldr	r3, [pc, #92]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	08db      	lsrs	r3, r3, #3
 8004e24:	f003 0303 	and.w	r3, r3, #3
 8004e28:	4a15      	ldr	r2, [pc, #84]	@ (8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8004e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e30:	e01e      	b.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e32:	4b12      	ldr	r3, [pc, #72]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e3e:	d106      	bne.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8004e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e46:	d102      	bne.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004e48:	4b0e      	ldr	r3, [pc, #56]	@ (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8004e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e4c:	e010      	b.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e5a:	d106      	bne.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8004e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e62:	d102      	bne.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004e64:	4b08      	ldr	r3, [pc, #32]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8004e66:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e68:	e002      	b.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004e6e:	e003      	b.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8004e70:	e002      	b.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004e76:	bf00      	nop
          }
        }
        break;
 8004e78:	f000 bccf 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004e7c:	44020c00 	.word	0x44020c00
 8004e80:	03d09000 	.word	0x03d09000
 8004e84:	003d0900 	.word	0x003d0900
 8004e88:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8004e8c:	4b9e      	ldr	r3, [pc, #632]	@ (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004e8e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004e92:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8004e96:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e9e:	d056      	beq.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ea6:	f200 808b 	bhi.w	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eb0:	d03e      	beq.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eb8:	f200 8082 	bhi.w	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ebe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004ec2:	d027      	beq.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004eca:	d879      	bhi.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ece:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ed2:	d017      	beq.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004eda:	d871      	bhi.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8004edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d004      	beq.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ee8:	d004      	beq.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8004eea:	e069      	b.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004eec:	f7fd fcf0 	bl	80028d0 <HAL_RCC_GetPCLK3Freq>
 8004ef0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8004ef2:	e068      	b.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ef4:	f107 0314 	add.w	r3, r7, #20
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fd fe6b 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004f02:	e060      	b.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f04:	f107 0308 	add.w	r3, r7, #8
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fd ffcf 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004f12:	e058      	b.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f14:	4b7c      	ldr	r3, [pc, #496]	@ (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004f16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d103      	bne.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8004f22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f26:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004f28:	e04d      	b.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004f2e:	e04a      	b.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004f30:	4b75      	ldr	r3, [pc, #468]	@ (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004f32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f3e:	d103      	bne.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8004f40:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004f44:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004f46:	e03e      	b.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004f4c:	e03b      	b.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004f4e:	4b6e      	ldr	r3, [pc, #440]	@ (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f54:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004f58:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f5a:	4b6b      	ldr	r3, [pc, #428]	@ (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d10c      	bne.n	8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8004f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d109      	bne.n	8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f6c:	4b66      	ldr	r3, [pc, #408]	@ (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	08db      	lsrs	r3, r3, #3
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	4a65      	ldr	r2, [pc, #404]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8004f78:	fa22 f303 	lsr.w	r3, r2, r3
 8004f7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f7e:	e01e      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f80:	4b61      	ldr	r3, [pc, #388]	@ (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f8c:	d106      	bne.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8004f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f94:	d102      	bne.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004f96:	4b5e      	ldr	r3, [pc, #376]	@ (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8004f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f9a:	e010      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f9c:	4b5a      	ldr	r3, [pc, #360]	@ (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fa8:	d106      	bne.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8004faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fb0:	d102      	bne.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004fb2:	4b58      	ldr	r3, [pc, #352]	@ (8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8004fb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fb6:	e002      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004fbc:	e003      	b.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8004fbe:	e002      	b.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004fc4:	bf00      	nop
          }
        }
        break;
 8004fc6:	f000 bc28 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004fca:	4b4f      	ldr	r3, [pc, #316]	@ (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004fcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fd4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8004fd6:	4b4c      	ldr	r3, [pc, #304]	@ (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fe2:	d106      	bne.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d103      	bne.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8004fea:	4b4a      	ldr	r3, [pc, #296]	@ (8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8004fec:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8004fee:	f000 bc14 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ff8:	d108      	bne.n	800500c <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ffa:	f107 0320 	add.w	r3, r7, #32
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fd fc7c 	bl	80028fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005008:	f000 bc07 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800500c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005012:	d107      	bne.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005014:	f107 0314 	add.w	r3, r7, #20
 8005018:	4618      	mov	r0, r3
 800501a:	f7fd fddb 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005022:	e3fa      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8005024:	2300      	movs	r3, #0
 8005026:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005028:	e3f7      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800502a:	4b37      	ldr	r3, [pc, #220]	@ (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800502c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8005036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005038:	2b04      	cmp	r3, #4
 800503a:	d861      	bhi.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800503c:	a201      	add	r2, pc, #4	@ (adr r2, 8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800503e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005042:	bf00      	nop
 8005044:	08005059 	.word	0x08005059
 8005048:	08005069 	.word	0x08005069
 800504c:	08005079 	.word	0x08005079
 8005050:	08005089 	.word	0x08005089
 8005054:	0800508f 	.word	0x0800508f
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005058:	f107 0320 	add.w	r3, r7, #32
 800505c:	4618      	mov	r0, r3
 800505e:	f7fd fc4d 	bl	80028fc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005064:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005066:	e04e      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005068:	f107 0314 	add.w	r3, r7, #20
 800506c:	4618      	mov	r0, r3
 800506e:	f7fd fdb1 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005076:	e046      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005078:	f107 0308 	add.w	r3, r7, #8
 800507c:	4618      	mov	r0, r3
 800507e:	f7fd ff15 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005086:	e03e      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005088:	4b23      	ldr	r3, [pc, #140]	@ (8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800508a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800508c:	e03b      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800508e:	4b1e      	ldr	r3, [pc, #120]	@ (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8005090:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005094:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005098:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800509a:	4b1b      	ldr	r3, [pc, #108]	@ (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d10c      	bne.n	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 80050a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d109      	bne.n	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050ac:	4b16      	ldr	r3, [pc, #88]	@ (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	08db      	lsrs	r3, r3, #3
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	4a15      	ldr	r2, [pc, #84]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80050b8:	fa22 f303 	lsr.w	r3, r2, r3
 80050bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80050be:	e01e      	b.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050c0:	4b11      	ldr	r3, [pc, #68]	@ (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050cc:	d106      	bne.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 80050ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050d4:	d102      	bne.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80050d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80050d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80050da:	e010      	b.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050e8:	d106      	bne.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 80050ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050f0:	d102      	bne.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80050f2:	4b08      	ldr	r3, [pc, #32]	@ (8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80050f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80050f6:	e002      	b.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80050fc:	e003      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 80050fe:	e002      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8005100:	2300      	movs	r3, #0
 8005102:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005104:	bf00      	nop
          }
        }
        break;
 8005106:	e388      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005108:	44020c00 	.word	0x44020c00
 800510c:	03d09000 	.word	0x03d09000
 8005110:	003d0900 	.word	0x003d0900
 8005114:	007a1200 	.word	0x007a1200
 8005118:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800511c:	4ba9      	ldr	r3, [pc, #676]	@ (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800511e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005122:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005126:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8005128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512a:	2b20      	cmp	r3, #32
 800512c:	f200 809a 	bhi.w	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8005130:	a201      	add	r2, pc, #4	@ (adr r2, 8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8005132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005136:	bf00      	nop
 8005138:	080051bd 	.word	0x080051bd
 800513c:	08005265 	.word	0x08005265
 8005140:	08005265 	.word	0x08005265
 8005144:	08005265 	.word	0x08005265
 8005148:	08005265 	.word	0x08005265
 800514c:	08005265 	.word	0x08005265
 8005150:	08005265 	.word	0x08005265
 8005154:	08005265 	.word	0x08005265
 8005158:	080051cd 	.word	0x080051cd
 800515c:	08005265 	.word	0x08005265
 8005160:	08005265 	.word	0x08005265
 8005164:	08005265 	.word	0x08005265
 8005168:	08005265 	.word	0x08005265
 800516c:	08005265 	.word	0x08005265
 8005170:	08005265 	.word	0x08005265
 8005174:	08005265 	.word	0x08005265
 8005178:	080051dd 	.word	0x080051dd
 800517c:	08005265 	.word	0x08005265
 8005180:	08005265 	.word	0x08005265
 8005184:	08005265 	.word	0x08005265
 8005188:	08005265 	.word	0x08005265
 800518c:	08005265 	.word	0x08005265
 8005190:	08005265 	.word	0x08005265
 8005194:	08005265 	.word	0x08005265
 8005198:	080051ed 	.word	0x080051ed
 800519c:	08005265 	.word	0x08005265
 80051a0:	08005265 	.word	0x08005265
 80051a4:	08005265 	.word	0x08005265
 80051a8:	08005265 	.word	0x08005265
 80051ac:	08005265 	.word	0x08005265
 80051b0:	08005265 	.word	0x08005265
 80051b4:	08005265 	.word	0x08005265
 80051b8:	080051f3 	.word	0x080051f3
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051bc:	f107 0320 	add.w	r3, r7, #32
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fd fb9b 	bl	80028fc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80051ca:	e04e      	b.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051cc:	f107 0314 	add.w	r3, r7, #20
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fd fcff 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80051da:	e046      	b.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051dc:	f107 0308 	add.w	r3, r7, #8
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fd fe63 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80051ea:	e03e      	b.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80051ec:	4b76      	ldr	r3, [pc, #472]	@ (80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80051ee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80051f0:	e03b      	b.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80051f2:	4b74      	ldr	r3, [pc, #464]	@ (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80051f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051f8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80051fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051fe:	4b71      	ldr	r3, [pc, #452]	@ (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b02      	cmp	r3, #2
 8005208:	d10c      	bne.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800520a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800520c:	2b00      	cmp	r3, #0
 800520e:	d109      	bne.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005210:	4b6c      	ldr	r3, [pc, #432]	@ (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	08db      	lsrs	r3, r3, #3
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	4a6c      	ldr	r2, [pc, #432]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800521c:	fa22 f303 	lsr.w	r3, r2, r3
 8005220:	637b      	str	r3, [r7, #52]	@ 0x34
 8005222:	e01e      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005224:	4b67      	ldr	r3, [pc, #412]	@ (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800522c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005230:	d106      	bne.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8005232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005238:	d102      	bne.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800523a:	4b65      	ldr	r3, [pc, #404]	@ (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800523c:	637b      	str	r3, [r7, #52]	@ 0x34
 800523e:	e010      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005240:	4b60      	ldr	r3, [pc, #384]	@ (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005248:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800524c:	d106      	bne.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800524e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005250:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005254:	d102      	bne.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005256:	4b5f      	ldr	r3, [pc, #380]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8005258:	637b      	str	r3, [r7, #52]	@ 0x34
 800525a:	e002      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800525c:	2300      	movs	r3, #0
 800525e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005260:	e003      	b.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8005262:	e002      	b.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8005264:	2300      	movs	r3, #0
 8005266:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005268:	bf00      	nop
          }
        }
        break;
 800526a:	e2d6      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800526c:	4b55      	ldr	r3, [pc, #340]	@ (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800526e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005272:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005276:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8005278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800527e:	d031      	beq.n	80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8005280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005286:	d866      	bhi.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8005288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528a:	2bc0      	cmp	r3, #192	@ 0xc0
 800528c:	d027      	beq.n	80052de <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800528e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005290:	2bc0      	cmp	r3, #192	@ 0xc0
 8005292:	d860      	bhi.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8005294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005296:	2b80      	cmp	r3, #128	@ 0x80
 8005298:	d019      	beq.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800529a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529c:	2b80      	cmp	r3, #128	@ 0x80
 800529e:	d85a      	bhi.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80052a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 80052a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a8:	2b40      	cmp	r3, #64	@ 0x40
 80052aa:	d008      	beq.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 80052ac:	e053      	b.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052ae:	f107 0320 	add.w	r3, r7, #32
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fd fb22 	bl	80028fc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80052b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80052bc:	e04e      	b.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052be:	f107 0314 	add.w	r3, r7, #20
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fd fc86 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80052cc:	e046      	b.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052ce:	f107 0308 	add.w	r3, r7, #8
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fd fdea 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80052dc:	e03e      	b.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80052de:	4b3a      	ldr	r3, [pc, #232]	@ (80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80052e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80052e2:	e03b      	b.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80052e4:	4b37      	ldr	r3, [pc, #220]	@ (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80052e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052ea:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80052ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052f0:	4b34      	ldr	r3, [pc, #208]	@ (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d10c      	bne.n	8005316 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 80052fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d109      	bne.n	8005316 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005302:	4b30      	ldr	r3, [pc, #192]	@ (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	08db      	lsrs	r3, r3, #3
 8005308:	f003 0303 	and.w	r3, r3, #3
 800530c:	4a2f      	ldr	r2, [pc, #188]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800530e:	fa22 f303 	lsr.w	r3, r2, r3
 8005312:	637b      	str	r3, [r7, #52]	@ 0x34
 8005314:	e01e      	b.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005316:	4b2b      	ldr	r3, [pc, #172]	@ (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800531e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005322:	d106      	bne.n	8005332 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8005324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800532a:	d102      	bne.n	8005332 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800532c:	4b28      	ldr	r3, [pc, #160]	@ (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800532e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005330:	e010      	b.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005332:	4b24      	ldr	r3, [pc, #144]	@ (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800533a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800533e:	d106      	bne.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8005340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005342:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005346:	d102      	bne.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005348:	4b22      	ldr	r3, [pc, #136]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800534a:	637b      	str	r3, [r7, #52]	@ 0x34
 800534c:	e002      	b.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800534e:	2300      	movs	r3, #0
 8005350:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005352:	e003      	b.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8005354:	e002      	b.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8005356:	2300      	movs	r3, #0
 8005358:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800535a:	bf00      	nop
          }
        }
        break;
 800535c:	e25d      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800535e:	4b19      	ldr	r3, [pc, #100]	@ (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005364:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8005368:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800536a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536c:	2b00      	cmp	r3, #0
 800536e:	d103      	bne.n	8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005370:	f7fd fa98 	bl	80028a4 <HAL_RCC_GetPCLK2Freq>
 8005374:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8005376:	e250      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8005378:	4b12      	ldr	r3, [pc, #72]	@ (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005380:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005384:	d10b      	bne.n	800539e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8005386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800538c:	d107      	bne.n	800539e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800538e:	f107 0314 	add.w	r3, r7, #20
 8005392:	4618      	mov	r0, r3
 8005394:	f7fd fc1e 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	637b      	str	r3, [r7, #52]	@ 0x34
 800539c:	e04f      	b.n	800543e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800539e:	4b09      	ldr	r3, [pc, #36]	@ (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053aa:	d115      	bne.n	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 80053ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053b2:	d111      	bne.n	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053b4:	f107 0308 	add.w	r3, r7, #8
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7fd fd77 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80053c2:	e03c      	b.n	800543e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 80053c4:	44020c00 	.word	0x44020c00
 80053c8:	00bb8000 	.word	0x00bb8000
 80053cc:	03d09000 	.word	0x03d09000
 80053d0:	003d0900 	.word	0x003d0900
 80053d4:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80053d8:	4b94      	ldr	r3, [pc, #592]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d10d      	bne.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 80053e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80053ea:	d109      	bne.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80053ec:	4b8f      	ldr	r3, [pc, #572]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	08db      	lsrs	r3, r3, #3
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	4a8e      	ldr	r2, [pc, #568]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80053f8:	fa22 f303 	lsr.w	r3, r2, r3
 80053fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80053fe:	e01e      	b.n	800543e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8005400:	4b8a      	ldr	r3, [pc, #552]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800540c:	d106      	bne.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800540e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005410:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005414:	d102      	bne.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8005416:	4b87      	ldr	r3, [pc, #540]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8005418:	637b      	str	r3, [r7, #52]	@ 0x34
 800541a:	e010      	b.n	800543e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800541c:	4b83      	ldr	r3, [pc, #524]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005424:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005428:	d106      	bne.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800542a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005430:	d102      	bne.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8005432:	4b81      	ldr	r3, [pc, #516]	@ (8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8005434:	637b      	str	r3, [r7, #52]	@ 0x34
 8005436:	e002      	b.n	800543e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800543c:	e1ed      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800543e:	e1ec      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8005440:	4b7a      	ldr	r3, [pc, #488]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005446:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800544a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800544c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544e:	2b00      	cmp	r3, #0
 8005450:	d103      	bne.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005452:	f7fd fa3d 	bl	80028d0 <HAL_RCC_GetPCLK3Freq>
 8005456:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8005458:	e1df      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800545a:	4b74      	ldr	r3, [pc, #464]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005462:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005466:	d10b      	bne.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8005468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800546e:	d107      	bne.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005470:	f107 0314 	add.w	r3, r7, #20
 8005474:	4618      	mov	r0, r3
 8005476:	f7fd fbad 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	637b      	str	r3, [r7, #52]	@ 0x34
 800547e:	e045      	b.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8005480:	4b6a      	ldr	r3, [pc, #424]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005488:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800548c:	d10b      	bne.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800548e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005490:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005494:	d107      	bne.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005496:	f107 0308 	add.w	r3, r7, #8
 800549a:	4618      	mov	r0, r3
 800549c:	f7fd fd06 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80054a4:	e032      	b.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 80054a6:	4b61      	ldr	r3, [pc, #388]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d10d      	bne.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 80054b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80054b8:	d109      	bne.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80054ba:	4b5c      	ldr	r3, [pc, #368]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	08db      	lsrs	r3, r3, #3
 80054c0:	f003 0303 	and.w	r3, r3, #3
 80054c4:	4a5a      	ldr	r2, [pc, #360]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80054c6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80054cc:	e01e      	b.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 80054ce:	4b57      	ldr	r3, [pc, #348]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054da:	d106      	bne.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 80054dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054e2:	d102      	bne.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 80054e4:	4b53      	ldr	r3, [pc, #332]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80054e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80054e8:	e010      	b.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 80054ea:	4b50      	ldr	r3, [pc, #320]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054f6:	d106      	bne.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 80054f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80054fe:	d102      	bne.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8005500:	4b4d      	ldr	r3, [pc, #308]	@ (8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8005502:	637b      	str	r3, [r7, #52]	@ 0x34
 8005504:	e002      	b.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800550a:	e186      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800550c:	e185      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800550e:	4b47      	ldr	r3, [pc, #284]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005514:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8005518:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800551a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551c:	2b00      	cmp	r3, #0
 800551e:	d103      	bne.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005520:	f7fd f9c0 	bl	80028a4 <HAL_RCC_GetPCLK2Freq>
 8005524:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8005526:	e178      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8005528:	4b40      	ldr	r3, [pc, #256]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005530:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005534:	d10b      	bne.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8005536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800553c:	d107      	bne.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800553e:	f107 0314 	add.w	r3, r7, #20
 8005542:	4618      	mov	r0, r3
 8005544:	f7fd fb46 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	637b      	str	r3, [r7, #52]	@ 0x34
 800554c:	e045      	b.n	80055da <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800554e:	4b37      	ldr	r3, [pc, #220]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005556:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800555a:	d10b      	bne.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800555c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005562:	d107      	bne.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005564:	f107 0308 	add.w	r3, r7, #8
 8005568:	4618      	mov	r0, r3
 800556a:	f7fd fc9f 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	637b      	str	r3, [r7, #52]	@ 0x34
 8005572:	e032      	b.n	80055da <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8005574:	4b2d      	ldr	r3, [pc, #180]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b02      	cmp	r3, #2
 800557e:	d10d      	bne.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8005580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005582:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005586:	d109      	bne.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005588:	4b28      	ldr	r3, [pc, #160]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	08db      	lsrs	r3, r3, #3
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	4a27      	ldr	r2, [pc, #156]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8005594:	fa22 f303 	lsr.w	r3, r2, r3
 8005598:	637b      	str	r3, [r7, #52]	@ 0x34
 800559a:	e01e      	b.n	80055da <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800559c:	4b23      	ldr	r3, [pc, #140]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055a8:	d106      	bne.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 80055aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055b0:	d102      	bne.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 80055b2:	4b20      	ldr	r3, [pc, #128]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80055b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80055b6:	e010      	b.n	80055da <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 80055b8:	4b1c      	ldr	r3, [pc, #112]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055c4:	d106      	bne.n	80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 80055c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80055cc:	d102      	bne.n	80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 80055ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80055d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80055d2:	e002      	b.n	80055da <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 80055d4:	2300      	movs	r3, #0
 80055d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80055d8:	e11f      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80055da:	e11e      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80055dc:	4b13      	ldr	r3, [pc, #76]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80055de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80055e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ea:	2b03      	cmp	r3, #3
 80055ec:	d85f      	bhi.n	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 80055ee:	a201      	add	r2, pc, #4	@ (adr r2, 80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 80055f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f4:	08005605 	.word	0x08005605
 80055f8:	0800560d 	.word	0x0800560d
 80055fc:	0800561d 	.word	0x0800561d
 8005600:	0800563d 	.word	0x0800563d
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8005604:	f7fd f91c 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 8005608:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800560a:	e053      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800560c:	f107 0320 	add.w	r3, r7, #32
 8005610:	4618      	mov	r0, r3
 8005612:	f7fd f973 	bl	80028fc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005618:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800561a:	e04b      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800561c:	f107 0314 	add.w	r3, r7, #20
 8005620:	4618      	mov	r0, r3
 8005622:	f7fd fad7 	bl	8002bd4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800562a:	e043      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800562c:	44020c00 	.word	0x44020c00
 8005630:	03d09000 	.word	0x03d09000
 8005634:	003d0900 	.word	0x003d0900
 8005638:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800563c:	4b79      	ldr	r3, [pc, #484]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800563e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005642:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005646:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005648:	4b76      	ldr	r3, [pc, #472]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b02      	cmp	r3, #2
 8005652:	d10c      	bne.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8005654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d109      	bne.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800565a:	4b72      	ldr	r3, [pc, #456]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	08db      	lsrs	r3, r3, #3
 8005660:	f003 0303 	and.w	r3, r3, #3
 8005664:	4a70      	ldr	r2, [pc, #448]	@ (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8005666:	fa22 f303 	lsr.w	r3, r2, r3
 800566a:	637b      	str	r3, [r7, #52]	@ 0x34
 800566c:	e01e      	b.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800566e:	4b6d      	ldr	r3, [pc, #436]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005676:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800567a:	d106      	bne.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800567c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800567e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005682:	d102      	bne.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005684:	4b69      	ldr	r3, [pc, #420]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8005686:	637b      	str	r3, [r7, #52]	@ 0x34
 8005688:	e010      	b.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800568a:	4b66      	ldr	r3, [pc, #408]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005692:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005696:	d106      	bne.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8005698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800569e:	d102      	bne.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80056a0:	4b63      	ldr	r3, [pc, #396]	@ (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 80056a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80056a4:	e002      	b.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80056aa:	e003      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 80056ac:	e002      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80056b2:	bf00      	nop
          }
        }
        break;
 80056b4:	e0b1      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80056b6:	4b5b      	ldr	r3, [pc, #364]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80056b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80056bc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80056c0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80056c2:	4b58      	ldr	r3, [pc, #352]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80056c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d106      	bne.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 80056d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d103      	bne.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 80056d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056da:	637b      	str	r3, [r7, #52]	@ 0x34
 80056dc:	e01f      	b.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80056de:	4b51      	ldr	r3, [pc, #324]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80056e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056ec:	d106      	bne.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 80056ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f0:	2b40      	cmp	r3, #64	@ 0x40
 80056f2:	d103      	bne.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 80056f4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80056f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80056fa:	e010      	b.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80056fc:	4b49      	ldr	r3, [pc, #292]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005708:	d106      	bne.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800570a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570c:	2b80      	cmp	r3, #128	@ 0x80
 800570e:	d103      	bne.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8005710:	f248 0312 	movw	r3, #32786	@ 0x8012
 8005714:	637b      	str	r3, [r7, #52]	@ 0x34
 8005716:	e002      	b.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800571c:	e07d      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800571e:	e07c      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005720:	4b40      	ldr	r3, [pc, #256]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005722:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005726:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800572a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800572c:	4b3d      	ldr	r3, [pc, #244]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005734:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005738:	d105      	bne.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800573a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573c:	2b00      	cmp	r3, #0
 800573e:	d102      	bne.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8005740:	4b3c      	ldr	r3, [pc, #240]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8005742:	637b      	str	r3, [r7, #52]	@ 0x34
 8005744:	e031      	b.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8005746:	4b37      	ldr	r3, [pc, #220]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800574e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005752:	d10a      	bne.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8005754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005756:	2b10      	cmp	r3, #16
 8005758:	d107      	bne.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800575a:	f107 0320 	add.w	r3, r7, #32
 800575e:	4618      	mov	r0, r3
 8005760:	f7fd f8cc 	bl	80028fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	637b      	str	r3, [r7, #52]	@ 0x34
 8005768:	e01f      	b.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800576a:	4b2e      	ldr	r3, [pc, #184]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800576c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b02      	cmp	r3, #2
 8005776:	d106      	bne.n	8005786 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8005778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577a:	2b20      	cmp	r3, #32
 800577c:	d103      	bne.n	8005786 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800577e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005782:	637b      	str	r3, [r7, #52]	@ 0x34
 8005784:	e011      	b.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8005786:	4b27      	ldr	r3, [pc, #156]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800578c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005790:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005794:	d106      	bne.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8005796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005798:	2b30      	cmp	r3, #48	@ 0x30
 800579a:	d103      	bne.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800579c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80057a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80057a2:	e002      	b.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80057a8:	e037      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80057aa:	e036      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80057ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80057ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057b2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80057b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80057b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ba:	2b10      	cmp	r3, #16
 80057bc:	d107      	bne.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057be:	f107 0320 	add.w	r3, r7, #32
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fd f89a 	bl	80028fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ca:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80057cc:	e025      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80057ce:	4b15      	ldr	r3, [pc, #84]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057da:	d10a      	bne.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 80057dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057de:	2b20      	cmp	r3, #32
 80057e0:	d107      	bne.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057e2:	f107 0308 	add.w	r3, r7, #8
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fd fb60 	bl	8002eac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80057f0:	e00f      	b.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80057f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057fe:	d105      	bne.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8005800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005802:	2b30      	cmp	r3, #48	@ 0x30
 8005804:	d102      	bne.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8005806:	4b0b      	ldr	r3, [pc, #44]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8005808:	637b      	str	r3, [r7, #52]	@ 0x34
 800580a:	e002      	b.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8005810:	e003      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005812:	e002      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8005814:	2300      	movs	r3, #0
 8005816:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005818:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800581a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800581c:	4618      	mov	r0, r3
 800581e:	373c      	adds	r7, #60	@ 0x3c
 8005820:	46bd      	mov	sp, r7
 8005822:	bd90      	pop	{r4, r7, pc}
 8005824:	44020c00 	.word	0x44020c00
 8005828:	03d09000 	.word	0x03d09000
 800582c:	003d0900 	.word	0x003d0900
 8005830:	007a1200 	.word	0x007a1200
 8005834:	02dc6c00 	.word	0x02dc6c00

08005838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e049      	b.n	80058de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d106      	bne.n	8005864 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7fb f968 	bl	8000b34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3304      	adds	r3, #4
 8005874:	4619      	mov	r1, r3
 8005876:	4610      	mov	r0, r2
 8005878:	f000 fc28 	bl	80060cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b082      	sub	sp, #8
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e049      	b.n	800598c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d106      	bne.n	8005912 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f841 	bl	8005994 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2202      	movs	r2, #2
 8005916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	3304      	adds	r3, #4
 8005922:	4619      	mov	r1, r3
 8005924:	4610      	mov	r0, r2
 8005926:	f000 fbd1 	bl	80060cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d109      	bne.n	80059cc <HAL_TIM_PWM_Start+0x24>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	bf14      	ite	ne
 80059c4:	2301      	movne	r3, #1
 80059c6:	2300      	moveq	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	e03c      	b.n	8005a46 <HAL_TIM_PWM_Start+0x9e>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d109      	bne.n	80059e6 <HAL_TIM_PWM_Start+0x3e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b01      	cmp	r3, #1
 80059dc:	bf14      	ite	ne
 80059de:	2301      	movne	r3, #1
 80059e0:	2300      	moveq	r3, #0
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	e02f      	b.n	8005a46 <HAL_TIM_PWM_Start+0x9e>
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d109      	bne.n	8005a00 <HAL_TIM_PWM_Start+0x58>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	bf14      	ite	ne
 80059f8:	2301      	movne	r3, #1
 80059fa:	2300      	moveq	r3, #0
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	e022      	b.n	8005a46 <HAL_TIM_PWM_Start+0x9e>
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	2b0c      	cmp	r3, #12
 8005a04:	d109      	bne.n	8005a1a <HAL_TIM_PWM_Start+0x72>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	bf14      	ite	ne
 8005a12:	2301      	movne	r3, #1
 8005a14:	2300      	moveq	r3, #0
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	e015      	b.n	8005a46 <HAL_TIM_PWM_Start+0x9e>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b10      	cmp	r3, #16
 8005a1e:	d109      	bne.n	8005a34 <HAL_TIM_PWM_Start+0x8c>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	bf14      	ite	ne
 8005a2c:	2301      	movne	r3, #1
 8005a2e:	2300      	moveq	r3, #0
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	e008      	b.n	8005a46 <HAL_TIM_PWM_Start+0x9e>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	bf14      	ite	ne
 8005a40:	2301      	movne	r3, #1
 8005a42:	2300      	moveq	r3, #0
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e0e2      	b.n	8005c14 <HAL_TIM_PWM_Start+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d104      	bne.n	8005a5e <HAL_TIM_PWM_Start+0xb6>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a5c:	e023      	b.n	8005aa6 <HAL_TIM_PWM_Start+0xfe>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b04      	cmp	r3, #4
 8005a62:	d104      	bne.n	8005a6e <HAL_TIM_PWM_Start+0xc6>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a6c:	e01b      	b.n	8005aa6 <HAL_TIM_PWM_Start+0xfe>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d104      	bne.n	8005a7e <HAL_TIM_PWM_Start+0xd6>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a7c:	e013      	b.n	8005aa6 <HAL_TIM_PWM_Start+0xfe>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b0c      	cmp	r3, #12
 8005a82:	d104      	bne.n	8005a8e <HAL_TIM_PWM_Start+0xe6>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a8c:	e00b      	b.n	8005aa6 <HAL_TIM_PWM_Start+0xfe>
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b10      	cmp	r3, #16
 8005a92:	d104      	bne.n	8005a9e <HAL_TIM_PWM_Start+0xf6>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a9c:	e003      	b.n	8005aa6 <HAL_TIM_PWM_Start+0xfe>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	6839      	ldr	r1, [r7, #0]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f001 f8a8 	bl	8006c04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a58      	ldr	r2, [pc, #352]	@ (8005c1c <HAL_TIM_PWM_Start+0x274>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d02c      	beq.n	8005b18 <HAL_TIM_PWM_Start+0x170>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a57      	ldr	r2, [pc, #348]	@ (8005c20 <HAL_TIM_PWM_Start+0x278>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d027      	beq.n	8005b18 <HAL_TIM_PWM_Start+0x170>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a55      	ldr	r2, [pc, #340]	@ (8005c24 <HAL_TIM_PWM_Start+0x27c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d022      	beq.n	8005b18 <HAL_TIM_PWM_Start+0x170>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a54      	ldr	r2, [pc, #336]	@ (8005c28 <HAL_TIM_PWM_Start+0x280>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d01d      	beq.n	8005b18 <HAL_TIM_PWM_Start+0x170>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a52      	ldr	r2, [pc, #328]	@ (8005c2c <HAL_TIM_PWM_Start+0x284>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d018      	beq.n	8005b18 <HAL_TIM_PWM_Start+0x170>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a51      	ldr	r2, [pc, #324]	@ (8005c30 <HAL_TIM_PWM_Start+0x288>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d013      	beq.n	8005b18 <HAL_TIM_PWM_Start+0x170>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a4f      	ldr	r2, [pc, #316]	@ (8005c34 <HAL_TIM_PWM_Start+0x28c>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d00e      	beq.n	8005b18 <HAL_TIM_PWM_Start+0x170>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a4e      	ldr	r2, [pc, #312]	@ (8005c38 <HAL_TIM_PWM_Start+0x290>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d009      	beq.n	8005b18 <HAL_TIM_PWM_Start+0x170>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a4c      	ldr	r2, [pc, #304]	@ (8005c3c <HAL_TIM_PWM_Start+0x294>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d004      	beq.n	8005b18 <HAL_TIM_PWM_Start+0x170>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a4b      	ldr	r2, [pc, #300]	@ (8005c40 <HAL_TIM_PWM_Start+0x298>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d101      	bne.n	8005b1c <HAL_TIM_PWM_Start+0x174>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e000      	b.n	8005b1e <HAL_TIM_PWM_Start+0x176>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d007      	beq.n	8005b32 <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b30:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a39      	ldr	r2, [pc, #228]	@ (8005c1c <HAL_TIM_PWM_Start+0x274>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d04a      	beq.n	8005bd2 <HAL_TIM_PWM_Start+0x22a>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a37      	ldr	r2, [pc, #220]	@ (8005c20 <HAL_TIM_PWM_Start+0x278>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d045      	beq.n	8005bd2 <HAL_TIM_PWM_Start+0x22a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b4e:	d040      	beq.n	8005bd2 <HAL_TIM_PWM_Start+0x22a>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b58:	d03b      	beq.n	8005bd2 <HAL_TIM_PWM_Start+0x22a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a39      	ldr	r2, [pc, #228]	@ (8005c44 <HAL_TIM_PWM_Start+0x29c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d036      	beq.n	8005bd2 <HAL_TIM_PWM_Start+0x22a>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a37      	ldr	r2, [pc, #220]	@ (8005c48 <HAL_TIM_PWM_Start+0x2a0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d031      	beq.n	8005bd2 <HAL_TIM_PWM_Start+0x22a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a36      	ldr	r2, [pc, #216]	@ (8005c4c <HAL_TIM_PWM_Start+0x2a4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d02c      	beq.n	8005bd2 <HAL_TIM_PWM_Start+0x22a>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a34      	ldr	r2, [pc, #208]	@ (8005c50 <HAL_TIM_PWM_Start+0x2a8>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d027      	beq.n	8005bd2 <HAL_TIM_PWM_Start+0x22a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a33      	ldr	r2, [pc, #204]	@ (8005c54 <HAL_TIM_PWM_Start+0x2ac>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d022      	beq.n	8005bd2 <HAL_TIM_PWM_Start+0x22a>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a31      	ldr	r2, [pc, #196]	@ (8005c58 <HAL_TIM_PWM_Start+0x2b0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d01d      	beq.n	8005bd2 <HAL_TIM_PWM_Start+0x22a>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a22      	ldr	r2, [pc, #136]	@ (8005c24 <HAL_TIM_PWM_Start+0x27c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d018      	beq.n	8005bd2 <HAL_TIM_PWM_Start+0x22a>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a20      	ldr	r2, [pc, #128]	@ (8005c28 <HAL_TIM_PWM_Start+0x280>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d013      	beq.n	8005bd2 <HAL_TIM_PWM_Start+0x22a>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a2b      	ldr	r2, [pc, #172]	@ (8005c5c <HAL_TIM_PWM_Start+0x2b4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d00e      	beq.n	8005bd2 <HAL_TIM_PWM_Start+0x22a>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a29      	ldr	r2, [pc, #164]	@ (8005c60 <HAL_TIM_PWM_Start+0x2b8>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d009      	beq.n	8005bd2 <HAL_TIM_PWM_Start+0x22a>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a1a      	ldr	r2, [pc, #104]	@ (8005c2c <HAL_TIM_PWM_Start+0x284>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d004      	beq.n	8005bd2 <HAL_TIM_PWM_Start+0x22a>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a18      	ldr	r2, [pc, #96]	@ (8005c30 <HAL_TIM_PWM_Start+0x288>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d115      	bne.n	8005bfe <HAL_TIM_PWM_Start+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	4b22      	ldr	r3, [pc, #136]	@ (8005c64 <HAL_TIM_PWM_Start+0x2bc>)
 8005bda:	4013      	ands	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2b06      	cmp	r3, #6
 8005be2:	d015      	beq.n	8005c10 <HAL_TIM_PWM_Start+0x268>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bea:	d011      	beq.n	8005c10 <HAL_TIM_PWM_Start+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0201 	orr.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bfc:	e008      	b.n	8005c10 <HAL_TIM_PWM_Start+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0201 	orr.w	r2, r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	e000      	b.n	8005c12 <HAL_TIM_PWM_Start+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c10:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	40012c00 	.word	0x40012c00
 8005c20:	50012c00 	.word	0x50012c00
 8005c24:	40013400 	.word	0x40013400
 8005c28:	50013400 	.word	0x50013400
 8005c2c:	40014000 	.word	0x40014000
 8005c30:	50014000 	.word	0x50014000
 8005c34:	40014400 	.word	0x40014400
 8005c38:	50014400 	.word	0x50014400
 8005c3c:	40014800 	.word	0x40014800
 8005c40:	50014800 	.word	0x50014800
 8005c44:	40000400 	.word	0x40000400
 8005c48:	50000400 	.word	0x50000400
 8005c4c:	40000800 	.word	0x40000800
 8005c50:	50000800 	.word	0x50000800
 8005c54:	40000c00 	.word	0x40000c00
 8005c58:	50000c00 	.word	0x50000c00
 8005c5c:	40001800 	.word	0x40001800
 8005c60:	50001800 	.word	0x50001800
 8005c64:	00010007 	.word	0x00010007

08005c68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d101      	bne.n	8005c86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c82:	2302      	movs	r3, #2
 8005c84:	e0ff      	b.n	8005e86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b14      	cmp	r3, #20
 8005c92:	f200 80f0 	bhi.w	8005e76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c96:	a201      	add	r2, pc, #4	@ (adr r2, 8005c9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9c:	08005cf1 	.word	0x08005cf1
 8005ca0:	08005e77 	.word	0x08005e77
 8005ca4:	08005e77 	.word	0x08005e77
 8005ca8:	08005e77 	.word	0x08005e77
 8005cac:	08005d31 	.word	0x08005d31
 8005cb0:	08005e77 	.word	0x08005e77
 8005cb4:	08005e77 	.word	0x08005e77
 8005cb8:	08005e77 	.word	0x08005e77
 8005cbc:	08005d73 	.word	0x08005d73
 8005cc0:	08005e77 	.word	0x08005e77
 8005cc4:	08005e77 	.word	0x08005e77
 8005cc8:	08005e77 	.word	0x08005e77
 8005ccc:	08005db3 	.word	0x08005db3
 8005cd0:	08005e77 	.word	0x08005e77
 8005cd4:	08005e77 	.word	0x08005e77
 8005cd8:	08005e77 	.word	0x08005e77
 8005cdc:	08005df5 	.word	0x08005df5
 8005ce0:	08005e77 	.word	0x08005e77
 8005ce4:	08005e77 	.word	0x08005e77
 8005ce8:	08005e77 	.word	0x08005e77
 8005cec:	08005e35 	.word	0x08005e35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68b9      	ldr	r1, [r7, #8]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 fb12 	bl	8006320 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699a      	ldr	r2, [r3, #24]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0208 	orr.w	r2, r2, #8
 8005d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	699a      	ldr	r2, [r3, #24]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0204 	bic.w	r2, r2, #4
 8005d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6999      	ldr	r1, [r3, #24]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	691a      	ldr	r2, [r3, #16]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	619a      	str	r2, [r3, #24]
      break;
 8005d2e:	e0a5      	b.n	8005e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68b9      	ldr	r1, [r7, #8]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 fbb4 	bl	80064a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699a      	ldr	r2, [r3, #24]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	699a      	ldr	r2, [r3, #24]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6999      	ldr	r1, [r3, #24]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	021a      	lsls	r2, r3, #8
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	619a      	str	r2, [r3, #24]
      break;
 8005d70:	e084      	b.n	8005e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 fc43 	bl	8006604 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69da      	ldr	r2, [r3, #28]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f042 0208 	orr.w	r2, r2, #8
 8005d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69da      	ldr	r2, [r3, #28]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 0204 	bic.w	r2, r2, #4
 8005d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69d9      	ldr	r1, [r3, #28]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	691a      	ldr	r2, [r3, #16]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	61da      	str	r2, [r3, #28]
      break;
 8005db0:	e064      	b.n	8005e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68b9      	ldr	r1, [r7, #8]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 fcd1 	bl	8006760 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69da      	ldr	r2, [r3, #28]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69da      	ldr	r2, [r3, #28]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69d9      	ldr	r1, [r3, #28]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	021a      	lsls	r2, r3, #8
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	61da      	str	r2, [r3, #28]
      break;
 8005df2:	e043      	b.n	8005e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68b9      	ldr	r1, [r7, #8]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 fd60 	bl	80068c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0208 	orr.w	r2, r2, #8
 8005e0e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0204 	bic.w	r2, r2, #4
 8005e1e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	691a      	ldr	r2, [r3, #16]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005e32:	e023      	b.n	8005e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68b9      	ldr	r1, [r7, #8]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 fdc2 	bl	80069c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e4e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e5e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	021a      	lsls	r2, r3, #8
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005e74:	e002      	b.n	8005e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	75fb      	strb	r3, [r7, #23]
      break;
 8005e7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3718      	adds	r7, #24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop

08005e90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d101      	bne.n	8005eac <HAL_TIM_ConfigClockSource+0x1c>
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	e0fe      	b.n	80060aa <HAL_TIM_ConfigClockSource+0x21a>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005eca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ed6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ee8:	f000 80c9 	beq.w	800607e <HAL_TIM_ConfigClockSource+0x1ee>
 8005eec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ef0:	f200 80ce 	bhi.w	8006090 <HAL_TIM_ConfigClockSource+0x200>
 8005ef4:	4a6f      	ldr	r2, [pc, #444]	@ (80060b4 <HAL_TIM_ConfigClockSource+0x224>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	f000 80c1 	beq.w	800607e <HAL_TIM_ConfigClockSource+0x1ee>
 8005efc:	4a6d      	ldr	r2, [pc, #436]	@ (80060b4 <HAL_TIM_ConfigClockSource+0x224>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	f200 80c6 	bhi.w	8006090 <HAL_TIM_ConfigClockSource+0x200>
 8005f04:	4a6c      	ldr	r2, [pc, #432]	@ (80060b8 <HAL_TIM_ConfigClockSource+0x228>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	f000 80b9 	beq.w	800607e <HAL_TIM_ConfigClockSource+0x1ee>
 8005f0c:	4a6a      	ldr	r2, [pc, #424]	@ (80060b8 <HAL_TIM_ConfigClockSource+0x228>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	f200 80be 	bhi.w	8006090 <HAL_TIM_ConfigClockSource+0x200>
 8005f14:	4a69      	ldr	r2, [pc, #420]	@ (80060bc <HAL_TIM_ConfigClockSource+0x22c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	f000 80b1 	beq.w	800607e <HAL_TIM_ConfigClockSource+0x1ee>
 8005f1c:	4a67      	ldr	r2, [pc, #412]	@ (80060bc <HAL_TIM_ConfigClockSource+0x22c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	f200 80b6 	bhi.w	8006090 <HAL_TIM_ConfigClockSource+0x200>
 8005f24:	4a66      	ldr	r2, [pc, #408]	@ (80060c0 <HAL_TIM_ConfigClockSource+0x230>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	f000 80a9 	beq.w	800607e <HAL_TIM_ConfigClockSource+0x1ee>
 8005f2c:	4a64      	ldr	r2, [pc, #400]	@ (80060c0 <HAL_TIM_ConfigClockSource+0x230>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	f200 80ae 	bhi.w	8006090 <HAL_TIM_ConfigClockSource+0x200>
 8005f34:	4a63      	ldr	r2, [pc, #396]	@ (80060c4 <HAL_TIM_ConfigClockSource+0x234>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	f000 80a1 	beq.w	800607e <HAL_TIM_ConfigClockSource+0x1ee>
 8005f3c:	4a61      	ldr	r2, [pc, #388]	@ (80060c4 <HAL_TIM_ConfigClockSource+0x234>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	f200 80a6 	bhi.w	8006090 <HAL_TIM_ConfigClockSource+0x200>
 8005f44:	4a60      	ldr	r2, [pc, #384]	@ (80060c8 <HAL_TIM_ConfigClockSource+0x238>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	f000 8099 	beq.w	800607e <HAL_TIM_ConfigClockSource+0x1ee>
 8005f4c:	4a5e      	ldr	r2, [pc, #376]	@ (80060c8 <HAL_TIM_ConfigClockSource+0x238>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	f200 809e 	bhi.w	8006090 <HAL_TIM_ConfigClockSource+0x200>
 8005f54:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f58:	f000 8091 	beq.w	800607e <HAL_TIM_ConfigClockSource+0x1ee>
 8005f5c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f60:	f200 8096 	bhi.w	8006090 <HAL_TIM_ConfigClockSource+0x200>
 8005f64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f68:	f000 8089 	beq.w	800607e <HAL_TIM_ConfigClockSource+0x1ee>
 8005f6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f70:	f200 808e 	bhi.w	8006090 <HAL_TIM_ConfigClockSource+0x200>
 8005f74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f78:	d03e      	beq.n	8005ff8 <HAL_TIM_ConfigClockSource+0x168>
 8005f7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f7e:	f200 8087 	bhi.w	8006090 <HAL_TIM_ConfigClockSource+0x200>
 8005f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f86:	f000 8086 	beq.w	8006096 <HAL_TIM_ConfigClockSource+0x206>
 8005f8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f8e:	d87f      	bhi.n	8006090 <HAL_TIM_ConfigClockSource+0x200>
 8005f90:	2b70      	cmp	r3, #112	@ 0x70
 8005f92:	d01a      	beq.n	8005fca <HAL_TIM_ConfigClockSource+0x13a>
 8005f94:	2b70      	cmp	r3, #112	@ 0x70
 8005f96:	d87b      	bhi.n	8006090 <HAL_TIM_ConfigClockSource+0x200>
 8005f98:	2b60      	cmp	r3, #96	@ 0x60
 8005f9a:	d050      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x1ae>
 8005f9c:	2b60      	cmp	r3, #96	@ 0x60
 8005f9e:	d877      	bhi.n	8006090 <HAL_TIM_ConfigClockSource+0x200>
 8005fa0:	2b50      	cmp	r3, #80	@ 0x50
 8005fa2:	d03c      	beq.n	800601e <HAL_TIM_ConfigClockSource+0x18e>
 8005fa4:	2b50      	cmp	r3, #80	@ 0x50
 8005fa6:	d873      	bhi.n	8006090 <HAL_TIM_ConfigClockSource+0x200>
 8005fa8:	2b40      	cmp	r3, #64	@ 0x40
 8005faa:	d058      	beq.n	800605e <HAL_TIM_ConfigClockSource+0x1ce>
 8005fac:	2b40      	cmp	r3, #64	@ 0x40
 8005fae:	d86f      	bhi.n	8006090 <HAL_TIM_ConfigClockSource+0x200>
 8005fb0:	2b30      	cmp	r3, #48	@ 0x30
 8005fb2:	d064      	beq.n	800607e <HAL_TIM_ConfigClockSource+0x1ee>
 8005fb4:	2b30      	cmp	r3, #48	@ 0x30
 8005fb6:	d86b      	bhi.n	8006090 <HAL_TIM_ConfigClockSource+0x200>
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	d060      	beq.n	800607e <HAL_TIM_ConfigClockSource+0x1ee>
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	d867      	bhi.n	8006090 <HAL_TIM_ConfigClockSource+0x200>
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d05c      	beq.n	800607e <HAL_TIM_ConfigClockSource+0x1ee>
 8005fc4:	2b10      	cmp	r3, #16
 8005fc6:	d05a      	beq.n	800607e <HAL_TIM_ConfigClockSource+0x1ee>
 8005fc8:	e062      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fda:	f000 fdf3 	bl	8006bc4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	609a      	str	r2, [r3, #8]
      break;
 8005ff6:	e04f      	b.n	8006098 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006008:	f000 fddc 	bl	8006bc4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689a      	ldr	r2, [r3, #8]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800601a:	609a      	str	r2, [r3, #8]
      break;
 800601c:	e03c      	b.n	8006098 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800602a:	461a      	mov	r2, r3
 800602c:	f000 fd4e 	bl	8006acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2150      	movs	r1, #80	@ 0x50
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fda7 	bl	8006b8a <TIM_ITRx_SetConfig>
      break;
 800603c:	e02c      	b.n	8006098 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800604a:	461a      	mov	r2, r3
 800604c:	f000 fd6d 	bl	8006b2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2160      	movs	r1, #96	@ 0x60
 8006056:	4618      	mov	r0, r3
 8006058:	f000 fd97 	bl	8006b8a <TIM_ITRx_SetConfig>
      break;
 800605c:	e01c      	b.n	8006098 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800606a:	461a      	mov	r2, r3
 800606c:	f000 fd2e 	bl	8006acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2140      	movs	r1, #64	@ 0x40
 8006076:	4618      	mov	r0, r3
 8006078:	f000 fd87 	bl	8006b8a <TIM_ITRx_SetConfig>
      break;
 800607c:	e00c      	b.n	8006098 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4619      	mov	r1, r3
 8006088:	4610      	mov	r0, r2
 800608a:	f000 fd7e 	bl	8006b8a <TIM_ITRx_SetConfig>
      break;
 800608e:	e003      	b.n	8006098 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	73fb      	strb	r3, [r7, #15]
      break;
 8006094:	e000      	b.n	8006098 <HAL_TIM_ConfigClockSource+0x208>
      break;
 8006096:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	00100070 	.word	0x00100070
 80060b8:	00100060 	.word	0x00100060
 80060bc:	00100050 	.word	0x00100050
 80060c0:	00100040 	.word	0x00100040
 80060c4:	00100030 	.word	0x00100030
 80060c8:	00100020 	.word	0x00100020

080060cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a7a      	ldr	r2, [pc, #488]	@ (80062c8 <TIM_Base_SetConfig+0x1fc>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d02b      	beq.n	800613c <TIM_Base_SetConfig+0x70>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a79      	ldr	r2, [pc, #484]	@ (80062cc <TIM_Base_SetConfig+0x200>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d027      	beq.n	800613c <TIM_Base_SetConfig+0x70>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060f2:	d023      	beq.n	800613c <TIM_Base_SetConfig+0x70>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060fa:	d01f      	beq.n	800613c <TIM_Base_SetConfig+0x70>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a74      	ldr	r2, [pc, #464]	@ (80062d0 <TIM_Base_SetConfig+0x204>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d01b      	beq.n	800613c <TIM_Base_SetConfig+0x70>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a73      	ldr	r2, [pc, #460]	@ (80062d4 <TIM_Base_SetConfig+0x208>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d017      	beq.n	800613c <TIM_Base_SetConfig+0x70>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a72      	ldr	r2, [pc, #456]	@ (80062d8 <TIM_Base_SetConfig+0x20c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d013      	beq.n	800613c <TIM_Base_SetConfig+0x70>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a71      	ldr	r2, [pc, #452]	@ (80062dc <TIM_Base_SetConfig+0x210>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d00f      	beq.n	800613c <TIM_Base_SetConfig+0x70>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a70      	ldr	r2, [pc, #448]	@ (80062e0 <TIM_Base_SetConfig+0x214>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d00b      	beq.n	800613c <TIM_Base_SetConfig+0x70>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a6f      	ldr	r2, [pc, #444]	@ (80062e4 <TIM_Base_SetConfig+0x218>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d007      	beq.n	800613c <TIM_Base_SetConfig+0x70>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a6e      	ldr	r2, [pc, #440]	@ (80062e8 <TIM_Base_SetConfig+0x21c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d003      	beq.n	800613c <TIM_Base_SetConfig+0x70>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a6d      	ldr	r2, [pc, #436]	@ (80062ec <TIM_Base_SetConfig+0x220>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d108      	bne.n	800614e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a5d      	ldr	r2, [pc, #372]	@ (80062c8 <TIM_Base_SetConfig+0x1fc>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d05b      	beq.n	800620e <TIM_Base_SetConfig+0x142>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a5c      	ldr	r2, [pc, #368]	@ (80062cc <TIM_Base_SetConfig+0x200>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d057      	beq.n	800620e <TIM_Base_SetConfig+0x142>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006164:	d053      	beq.n	800620e <TIM_Base_SetConfig+0x142>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800616c:	d04f      	beq.n	800620e <TIM_Base_SetConfig+0x142>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a57      	ldr	r2, [pc, #348]	@ (80062d0 <TIM_Base_SetConfig+0x204>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d04b      	beq.n	800620e <TIM_Base_SetConfig+0x142>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a56      	ldr	r2, [pc, #344]	@ (80062d4 <TIM_Base_SetConfig+0x208>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d047      	beq.n	800620e <TIM_Base_SetConfig+0x142>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a55      	ldr	r2, [pc, #340]	@ (80062d8 <TIM_Base_SetConfig+0x20c>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d043      	beq.n	800620e <TIM_Base_SetConfig+0x142>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a54      	ldr	r2, [pc, #336]	@ (80062dc <TIM_Base_SetConfig+0x210>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d03f      	beq.n	800620e <TIM_Base_SetConfig+0x142>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a53      	ldr	r2, [pc, #332]	@ (80062e0 <TIM_Base_SetConfig+0x214>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d03b      	beq.n	800620e <TIM_Base_SetConfig+0x142>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a52      	ldr	r2, [pc, #328]	@ (80062e4 <TIM_Base_SetConfig+0x218>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d037      	beq.n	800620e <TIM_Base_SetConfig+0x142>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a51      	ldr	r2, [pc, #324]	@ (80062e8 <TIM_Base_SetConfig+0x21c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d033      	beq.n	800620e <TIM_Base_SetConfig+0x142>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a50      	ldr	r2, [pc, #320]	@ (80062ec <TIM_Base_SetConfig+0x220>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d02f      	beq.n	800620e <TIM_Base_SetConfig+0x142>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a4f      	ldr	r2, [pc, #316]	@ (80062f0 <TIM_Base_SetConfig+0x224>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d02b      	beq.n	800620e <TIM_Base_SetConfig+0x142>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a4e      	ldr	r2, [pc, #312]	@ (80062f4 <TIM_Base_SetConfig+0x228>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d027      	beq.n	800620e <TIM_Base_SetConfig+0x142>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a4d      	ldr	r2, [pc, #308]	@ (80062f8 <TIM_Base_SetConfig+0x22c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d023      	beq.n	800620e <TIM_Base_SetConfig+0x142>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a4c      	ldr	r2, [pc, #304]	@ (80062fc <TIM_Base_SetConfig+0x230>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d01f      	beq.n	800620e <TIM_Base_SetConfig+0x142>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a4b      	ldr	r2, [pc, #300]	@ (8006300 <TIM_Base_SetConfig+0x234>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d01b      	beq.n	800620e <TIM_Base_SetConfig+0x142>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a4a      	ldr	r2, [pc, #296]	@ (8006304 <TIM_Base_SetConfig+0x238>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d017      	beq.n	800620e <TIM_Base_SetConfig+0x142>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a49      	ldr	r2, [pc, #292]	@ (8006308 <TIM_Base_SetConfig+0x23c>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d013      	beq.n	800620e <TIM_Base_SetConfig+0x142>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a48      	ldr	r2, [pc, #288]	@ (800630c <TIM_Base_SetConfig+0x240>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d00f      	beq.n	800620e <TIM_Base_SetConfig+0x142>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a47      	ldr	r2, [pc, #284]	@ (8006310 <TIM_Base_SetConfig+0x244>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d00b      	beq.n	800620e <TIM_Base_SetConfig+0x142>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a46      	ldr	r2, [pc, #280]	@ (8006314 <TIM_Base_SetConfig+0x248>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d007      	beq.n	800620e <TIM_Base_SetConfig+0x142>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a45      	ldr	r2, [pc, #276]	@ (8006318 <TIM_Base_SetConfig+0x24c>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d003      	beq.n	800620e <TIM_Base_SetConfig+0x142>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a44      	ldr	r2, [pc, #272]	@ (800631c <TIM_Base_SetConfig+0x250>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d108      	bne.n	8006220 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4313      	orrs	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	4313      	orrs	r3, r2
 800622c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a20      	ldr	r2, [pc, #128]	@ (80062c8 <TIM_Base_SetConfig+0x1fc>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d023      	beq.n	8006294 <TIM_Base_SetConfig+0x1c8>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a1f      	ldr	r2, [pc, #124]	@ (80062cc <TIM_Base_SetConfig+0x200>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d01f      	beq.n	8006294 <TIM_Base_SetConfig+0x1c8>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a24      	ldr	r2, [pc, #144]	@ (80062e8 <TIM_Base_SetConfig+0x21c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d01b      	beq.n	8006294 <TIM_Base_SetConfig+0x1c8>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a23      	ldr	r2, [pc, #140]	@ (80062ec <TIM_Base_SetConfig+0x220>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d017      	beq.n	8006294 <TIM_Base_SetConfig+0x1c8>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a28      	ldr	r2, [pc, #160]	@ (8006308 <TIM_Base_SetConfig+0x23c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d013      	beq.n	8006294 <TIM_Base_SetConfig+0x1c8>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a27      	ldr	r2, [pc, #156]	@ (800630c <TIM_Base_SetConfig+0x240>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d00f      	beq.n	8006294 <TIM_Base_SetConfig+0x1c8>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a26      	ldr	r2, [pc, #152]	@ (8006310 <TIM_Base_SetConfig+0x244>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00b      	beq.n	8006294 <TIM_Base_SetConfig+0x1c8>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a25      	ldr	r2, [pc, #148]	@ (8006314 <TIM_Base_SetConfig+0x248>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d007      	beq.n	8006294 <TIM_Base_SetConfig+0x1c8>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a24      	ldr	r2, [pc, #144]	@ (8006318 <TIM_Base_SetConfig+0x24c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d003      	beq.n	8006294 <TIM_Base_SetConfig+0x1c8>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a23      	ldr	r2, [pc, #140]	@ (800631c <TIM_Base_SetConfig+0x250>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d103      	bne.n	800629c <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	691a      	ldr	r2, [r3, #16]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d105      	bne.n	80062ba <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	f023 0201 	bic.w	r2, r3, #1
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	611a      	str	r2, [r3, #16]
  }
}
 80062ba:	bf00      	nop
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	40012c00 	.word	0x40012c00
 80062cc:	50012c00 	.word	0x50012c00
 80062d0:	40000400 	.word	0x40000400
 80062d4:	50000400 	.word	0x50000400
 80062d8:	40000800 	.word	0x40000800
 80062dc:	50000800 	.word	0x50000800
 80062e0:	40000c00 	.word	0x40000c00
 80062e4:	50000c00 	.word	0x50000c00
 80062e8:	40013400 	.word	0x40013400
 80062ec:	50013400 	.word	0x50013400
 80062f0:	40001800 	.word	0x40001800
 80062f4:	50001800 	.word	0x50001800
 80062f8:	40001c00 	.word	0x40001c00
 80062fc:	50001c00 	.word	0x50001c00
 8006300:	40002000 	.word	0x40002000
 8006304:	50002000 	.word	0x50002000
 8006308:	40014000 	.word	0x40014000
 800630c:	50014000 	.word	0x50014000
 8006310:	40014400 	.word	0x40014400
 8006314:	50014400 	.word	0x50014400
 8006318:	40014800 	.word	0x40014800
 800631c:	50014800 	.word	0x50014800

08006320 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	f023 0201 	bic.w	r2, r3, #1
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800634e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f023 0303 	bic.w	r3, r3, #3
 800635a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f023 0302 	bic.w	r3, r3, #2
 800636c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a40      	ldr	r2, [pc, #256]	@ (800647c <TIM_OC1_SetConfig+0x15c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d023      	beq.n	80063c8 <TIM_OC1_SetConfig+0xa8>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a3f      	ldr	r2, [pc, #252]	@ (8006480 <TIM_OC1_SetConfig+0x160>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d01f      	beq.n	80063c8 <TIM_OC1_SetConfig+0xa8>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a3e      	ldr	r2, [pc, #248]	@ (8006484 <TIM_OC1_SetConfig+0x164>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d01b      	beq.n	80063c8 <TIM_OC1_SetConfig+0xa8>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a3d      	ldr	r2, [pc, #244]	@ (8006488 <TIM_OC1_SetConfig+0x168>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d017      	beq.n	80063c8 <TIM_OC1_SetConfig+0xa8>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a3c      	ldr	r2, [pc, #240]	@ (800648c <TIM_OC1_SetConfig+0x16c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d013      	beq.n	80063c8 <TIM_OC1_SetConfig+0xa8>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a3b      	ldr	r2, [pc, #236]	@ (8006490 <TIM_OC1_SetConfig+0x170>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d00f      	beq.n	80063c8 <TIM_OC1_SetConfig+0xa8>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a3a      	ldr	r2, [pc, #232]	@ (8006494 <TIM_OC1_SetConfig+0x174>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d00b      	beq.n	80063c8 <TIM_OC1_SetConfig+0xa8>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a39      	ldr	r2, [pc, #228]	@ (8006498 <TIM_OC1_SetConfig+0x178>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d007      	beq.n	80063c8 <TIM_OC1_SetConfig+0xa8>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a38      	ldr	r2, [pc, #224]	@ (800649c <TIM_OC1_SetConfig+0x17c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d003      	beq.n	80063c8 <TIM_OC1_SetConfig+0xa8>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a37      	ldr	r2, [pc, #220]	@ (80064a0 <TIM_OC1_SetConfig+0x180>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d10c      	bne.n	80063e2 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f023 0308 	bic.w	r3, r3, #8
 80063ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f023 0304 	bic.w	r3, r3, #4
 80063e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a25      	ldr	r2, [pc, #148]	@ (800647c <TIM_OC1_SetConfig+0x15c>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d023      	beq.n	8006432 <TIM_OC1_SetConfig+0x112>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a24      	ldr	r2, [pc, #144]	@ (8006480 <TIM_OC1_SetConfig+0x160>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d01f      	beq.n	8006432 <TIM_OC1_SetConfig+0x112>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a23      	ldr	r2, [pc, #140]	@ (8006484 <TIM_OC1_SetConfig+0x164>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d01b      	beq.n	8006432 <TIM_OC1_SetConfig+0x112>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a22      	ldr	r2, [pc, #136]	@ (8006488 <TIM_OC1_SetConfig+0x168>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d017      	beq.n	8006432 <TIM_OC1_SetConfig+0x112>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a21      	ldr	r2, [pc, #132]	@ (800648c <TIM_OC1_SetConfig+0x16c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d013      	beq.n	8006432 <TIM_OC1_SetConfig+0x112>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a20      	ldr	r2, [pc, #128]	@ (8006490 <TIM_OC1_SetConfig+0x170>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00f      	beq.n	8006432 <TIM_OC1_SetConfig+0x112>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a1f      	ldr	r2, [pc, #124]	@ (8006494 <TIM_OC1_SetConfig+0x174>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d00b      	beq.n	8006432 <TIM_OC1_SetConfig+0x112>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a1e      	ldr	r2, [pc, #120]	@ (8006498 <TIM_OC1_SetConfig+0x178>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d007      	beq.n	8006432 <TIM_OC1_SetConfig+0x112>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a1d      	ldr	r2, [pc, #116]	@ (800649c <TIM_OC1_SetConfig+0x17c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d003      	beq.n	8006432 <TIM_OC1_SetConfig+0x112>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a1c      	ldr	r2, [pc, #112]	@ (80064a0 <TIM_OC1_SetConfig+0x180>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d111      	bne.n	8006456 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	4313      	orrs	r3, r2
 800644a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	4313      	orrs	r3, r2
 8006454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	621a      	str	r2, [r3, #32]
}
 8006470:	bf00      	nop
 8006472:	371c      	adds	r7, #28
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	40012c00 	.word	0x40012c00
 8006480:	50012c00 	.word	0x50012c00
 8006484:	40013400 	.word	0x40013400
 8006488:	50013400 	.word	0x50013400
 800648c:	40014000 	.word	0x40014000
 8006490:	50014000 	.word	0x50014000
 8006494:	40014400 	.word	0x40014400
 8006498:	50014400 	.word	0x50014400
 800649c:	40014800 	.word	0x40014800
 80064a0:	50014800 	.word	0x50014800

080064a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	f023 0210 	bic.w	r2, r3, #16
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	021b      	lsls	r3, r3, #8
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f023 0320 	bic.w	r3, r3, #32
 80064f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	011b      	lsls	r3, r3, #4
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a36      	ldr	r2, [pc, #216]	@ (80065dc <TIM_OC2_SetConfig+0x138>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d00b      	beq.n	8006520 <TIM_OC2_SetConfig+0x7c>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a35      	ldr	r2, [pc, #212]	@ (80065e0 <TIM_OC2_SetConfig+0x13c>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d007      	beq.n	8006520 <TIM_OC2_SetConfig+0x7c>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a34      	ldr	r2, [pc, #208]	@ (80065e4 <TIM_OC2_SetConfig+0x140>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d003      	beq.n	8006520 <TIM_OC2_SetConfig+0x7c>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a33      	ldr	r2, [pc, #204]	@ (80065e8 <TIM_OC2_SetConfig+0x144>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d10d      	bne.n	800653c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	011b      	lsls	r3, r3, #4
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	4313      	orrs	r3, r2
 8006532:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800653a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a27      	ldr	r2, [pc, #156]	@ (80065dc <TIM_OC2_SetConfig+0x138>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d023      	beq.n	800658c <TIM_OC2_SetConfig+0xe8>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a26      	ldr	r2, [pc, #152]	@ (80065e0 <TIM_OC2_SetConfig+0x13c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d01f      	beq.n	800658c <TIM_OC2_SetConfig+0xe8>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a25      	ldr	r2, [pc, #148]	@ (80065e4 <TIM_OC2_SetConfig+0x140>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d01b      	beq.n	800658c <TIM_OC2_SetConfig+0xe8>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a24      	ldr	r2, [pc, #144]	@ (80065e8 <TIM_OC2_SetConfig+0x144>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d017      	beq.n	800658c <TIM_OC2_SetConfig+0xe8>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a23      	ldr	r2, [pc, #140]	@ (80065ec <TIM_OC2_SetConfig+0x148>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d013      	beq.n	800658c <TIM_OC2_SetConfig+0xe8>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a22      	ldr	r2, [pc, #136]	@ (80065f0 <TIM_OC2_SetConfig+0x14c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d00f      	beq.n	800658c <TIM_OC2_SetConfig+0xe8>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a21      	ldr	r2, [pc, #132]	@ (80065f4 <TIM_OC2_SetConfig+0x150>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d00b      	beq.n	800658c <TIM_OC2_SetConfig+0xe8>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a20      	ldr	r2, [pc, #128]	@ (80065f8 <TIM_OC2_SetConfig+0x154>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d007      	beq.n	800658c <TIM_OC2_SetConfig+0xe8>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a1f      	ldr	r2, [pc, #124]	@ (80065fc <TIM_OC2_SetConfig+0x158>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d003      	beq.n	800658c <TIM_OC2_SetConfig+0xe8>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a1e      	ldr	r2, [pc, #120]	@ (8006600 <TIM_OC2_SetConfig+0x15c>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d113      	bne.n	80065b4 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006592:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800659a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	621a      	str	r2, [r3, #32]
}
 80065ce:	bf00      	nop
 80065d0:	371c      	adds	r7, #28
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	40012c00 	.word	0x40012c00
 80065e0:	50012c00 	.word	0x50012c00
 80065e4:	40013400 	.word	0x40013400
 80065e8:	50013400 	.word	0x50013400
 80065ec:	40014000 	.word	0x40014000
 80065f0:	50014000 	.word	0x50014000
 80065f4:	40014400 	.word	0x40014400
 80065f8:	50014400 	.word	0x50014400
 80065fc:	40014800 	.word	0x40014800
 8006600:	50014800 	.word	0x50014800

08006604 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006604:	b480      	push	{r7}
 8006606:	b087      	sub	sp, #28
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 0303 	bic.w	r3, r3, #3
 800663e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	4313      	orrs	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	021b      	lsls	r3, r3, #8
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	4313      	orrs	r3, r2
 800665c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a35      	ldr	r2, [pc, #212]	@ (8006738 <TIM_OC3_SetConfig+0x134>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d00b      	beq.n	800667e <TIM_OC3_SetConfig+0x7a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a34      	ldr	r2, [pc, #208]	@ (800673c <TIM_OC3_SetConfig+0x138>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d007      	beq.n	800667e <TIM_OC3_SetConfig+0x7a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a33      	ldr	r2, [pc, #204]	@ (8006740 <TIM_OC3_SetConfig+0x13c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d003      	beq.n	800667e <TIM_OC3_SetConfig+0x7a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a32      	ldr	r2, [pc, #200]	@ (8006744 <TIM_OC3_SetConfig+0x140>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d10d      	bne.n	800669a <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006684:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	021b      	lsls	r3, r3, #8
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	4313      	orrs	r3, r2
 8006690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006698:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a26      	ldr	r2, [pc, #152]	@ (8006738 <TIM_OC3_SetConfig+0x134>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d023      	beq.n	80066ea <TIM_OC3_SetConfig+0xe6>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a25      	ldr	r2, [pc, #148]	@ (800673c <TIM_OC3_SetConfig+0x138>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d01f      	beq.n	80066ea <TIM_OC3_SetConfig+0xe6>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a24      	ldr	r2, [pc, #144]	@ (8006740 <TIM_OC3_SetConfig+0x13c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d01b      	beq.n	80066ea <TIM_OC3_SetConfig+0xe6>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a23      	ldr	r2, [pc, #140]	@ (8006744 <TIM_OC3_SetConfig+0x140>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d017      	beq.n	80066ea <TIM_OC3_SetConfig+0xe6>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a22      	ldr	r2, [pc, #136]	@ (8006748 <TIM_OC3_SetConfig+0x144>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d013      	beq.n	80066ea <TIM_OC3_SetConfig+0xe6>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a21      	ldr	r2, [pc, #132]	@ (800674c <TIM_OC3_SetConfig+0x148>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d00f      	beq.n	80066ea <TIM_OC3_SetConfig+0xe6>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a20      	ldr	r2, [pc, #128]	@ (8006750 <TIM_OC3_SetConfig+0x14c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d00b      	beq.n	80066ea <TIM_OC3_SetConfig+0xe6>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006754 <TIM_OC3_SetConfig+0x150>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d007      	beq.n	80066ea <TIM_OC3_SetConfig+0xe6>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a1e      	ldr	r2, [pc, #120]	@ (8006758 <TIM_OC3_SetConfig+0x154>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d003      	beq.n	80066ea <TIM_OC3_SetConfig+0xe6>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a1d      	ldr	r2, [pc, #116]	@ (800675c <TIM_OC3_SetConfig+0x158>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d113      	bne.n	8006712 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	4313      	orrs	r3, r2
 8006704:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	011b      	lsls	r3, r3, #4
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	4313      	orrs	r3, r2
 8006710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	685a      	ldr	r2, [r3, #4]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	621a      	str	r2, [r3, #32]
}
 800672c:	bf00      	nop
 800672e:	371c      	adds	r7, #28
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	40012c00 	.word	0x40012c00
 800673c:	50012c00 	.word	0x50012c00
 8006740:	40013400 	.word	0x40013400
 8006744:	50013400 	.word	0x50013400
 8006748:	40014000 	.word	0x40014000
 800674c:	50014000 	.word	0x50014000
 8006750:	40014400 	.word	0x40014400
 8006754:	50014400 	.word	0x50014400
 8006758:	40014800 	.word	0x40014800
 800675c:	50014800 	.word	0x50014800

08006760 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800678e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800679a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	021b      	lsls	r3, r3, #8
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	031b      	lsls	r3, r3, #12
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a36      	ldr	r2, [pc, #216]	@ (8006898 <TIM_OC4_SetConfig+0x138>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d00b      	beq.n	80067dc <TIM_OC4_SetConfig+0x7c>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a35      	ldr	r2, [pc, #212]	@ (800689c <TIM_OC4_SetConfig+0x13c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d007      	beq.n	80067dc <TIM_OC4_SetConfig+0x7c>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a34      	ldr	r2, [pc, #208]	@ (80068a0 <TIM_OC4_SetConfig+0x140>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d003      	beq.n	80067dc <TIM_OC4_SetConfig+0x7c>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a33      	ldr	r2, [pc, #204]	@ (80068a4 <TIM_OC4_SetConfig+0x144>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d10d      	bne.n	80067f8 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80067e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	031b      	lsls	r3, r3, #12
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a27      	ldr	r2, [pc, #156]	@ (8006898 <TIM_OC4_SetConfig+0x138>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d023      	beq.n	8006848 <TIM_OC4_SetConfig+0xe8>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a26      	ldr	r2, [pc, #152]	@ (800689c <TIM_OC4_SetConfig+0x13c>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d01f      	beq.n	8006848 <TIM_OC4_SetConfig+0xe8>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a25      	ldr	r2, [pc, #148]	@ (80068a0 <TIM_OC4_SetConfig+0x140>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d01b      	beq.n	8006848 <TIM_OC4_SetConfig+0xe8>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a24      	ldr	r2, [pc, #144]	@ (80068a4 <TIM_OC4_SetConfig+0x144>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d017      	beq.n	8006848 <TIM_OC4_SetConfig+0xe8>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a23      	ldr	r2, [pc, #140]	@ (80068a8 <TIM_OC4_SetConfig+0x148>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d013      	beq.n	8006848 <TIM_OC4_SetConfig+0xe8>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a22      	ldr	r2, [pc, #136]	@ (80068ac <TIM_OC4_SetConfig+0x14c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d00f      	beq.n	8006848 <TIM_OC4_SetConfig+0xe8>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a21      	ldr	r2, [pc, #132]	@ (80068b0 <TIM_OC4_SetConfig+0x150>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d00b      	beq.n	8006848 <TIM_OC4_SetConfig+0xe8>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a20      	ldr	r2, [pc, #128]	@ (80068b4 <TIM_OC4_SetConfig+0x154>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d007      	beq.n	8006848 <TIM_OC4_SetConfig+0xe8>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a1f      	ldr	r2, [pc, #124]	@ (80068b8 <TIM_OC4_SetConfig+0x158>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d003      	beq.n	8006848 <TIM_OC4_SetConfig+0xe8>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a1e      	ldr	r2, [pc, #120]	@ (80068bc <TIM_OC4_SetConfig+0x15c>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d113      	bne.n	8006870 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800684e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006856:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	019b      	lsls	r3, r3, #6
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	4313      	orrs	r3, r2
 8006862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	019b      	lsls	r3, r3, #6
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	4313      	orrs	r3, r2
 800686e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	621a      	str	r2, [r3, #32]
}
 800688a:	bf00      	nop
 800688c:	371c      	adds	r7, #28
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	40012c00 	.word	0x40012c00
 800689c:	50012c00 	.word	0x50012c00
 80068a0:	40013400 	.word	0x40013400
 80068a4:	50013400 	.word	0x50013400
 80068a8:	40014000 	.word	0x40014000
 80068ac:	50014000 	.word	0x50014000
 80068b0:	40014400 	.word	0x40014400
 80068b4:	50014400 	.word	0x50014400
 80068b8:	40014800 	.word	0x40014800
 80068bc:	50014800 	.word	0x50014800

080068c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006904:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	041b      	lsls	r3, r3, #16
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	4313      	orrs	r3, r2
 8006910:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a21      	ldr	r2, [pc, #132]	@ (800699c <TIM_OC5_SetConfig+0xdc>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d023      	beq.n	8006962 <TIM_OC5_SetConfig+0xa2>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a20      	ldr	r2, [pc, #128]	@ (80069a0 <TIM_OC5_SetConfig+0xe0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d01f      	beq.n	8006962 <TIM_OC5_SetConfig+0xa2>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a1f      	ldr	r2, [pc, #124]	@ (80069a4 <TIM_OC5_SetConfig+0xe4>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d01b      	beq.n	8006962 <TIM_OC5_SetConfig+0xa2>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a1e      	ldr	r2, [pc, #120]	@ (80069a8 <TIM_OC5_SetConfig+0xe8>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d017      	beq.n	8006962 <TIM_OC5_SetConfig+0xa2>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a1d      	ldr	r2, [pc, #116]	@ (80069ac <TIM_OC5_SetConfig+0xec>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d013      	beq.n	8006962 <TIM_OC5_SetConfig+0xa2>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a1c      	ldr	r2, [pc, #112]	@ (80069b0 <TIM_OC5_SetConfig+0xf0>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d00f      	beq.n	8006962 <TIM_OC5_SetConfig+0xa2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a1b      	ldr	r2, [pc, #108]	@ (80069b4 <TIM_OC5_SetConfig+0xf4>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d00b      	beq.n	8006962 <TIM_OC5_SetConfig+0xa2>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a1a      	ldr	r2, [pc, #104]	@ (80069b8 <TIM_OC5_SetConfig+0xf8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d007      	beq.n	8006962 <TIM_OC5_SetConfig+0xa2>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a19      	ldr	r2, [pc, #100]	@ (80069bc <TIM_OC5_SetConfig+0xfc>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d003      	beq.n	8006962 <TIM_OC5_SetConfig+0xa2>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a18      	ldr	r2, [pc, #96]	@ (80069c0 <TIM_OC5_SetConfig+0x100>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d109      	bne.n	8006976 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006968:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	021b      	lsls	r3, r3, #8
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	4313      	orrs	r3, r2
 8006974:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	621a      	str	r2, [r3, #32]
}
 8006990:	bf00      	nop
 8006992:	371c      	adds	r7, #28
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	40012c00 	.word	0x40012c00
 80069a0:	50012c00 	.word	0x50012c00
 80069a4:	40013400 	.word	0x40013400
 80069a8:	50013400 	.word	0x50013400
 80069ac:	40014000 	.word	0x40014000
 80069b0:	50014000 	.word	0x50014000
 80069b4:	40014400 	.word	0x40014400
 80069b8:	50014400 	.word	0x50014400
 80069bc:	40014800 	.word	0x40014800
 80069c0:	50014800 	.word	0x50014800

080069c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b087      	sub	sp, #28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	021b      	lsls	r3, r3, #8
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	051b      	lsls	r3, r3, #20
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a22      	ldr	r2, [pc, #136]	@ (8006aa4 <TIM_OC6_SetConfig+0xe0>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d023      	beq.n	8006a68 <TIM_OC6_SetConfig+0xa4>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a21      	ldr	r2, [pc, #132]	@ (8006aa8 <TIM_OC6_SetConfig+0xe4>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d01f      	beq.n	8006a68 <TIM_OC6_SetConfig+0xa4>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a20      	ldr	r2, [pc, #128]	@ (8006aac <TIM_OC6_SetConfig+0xe8>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d01b      	beq.n	8006a68 <TIM_OC6_SetConfig+0xa4>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a1f      	ldr	r2, [pc, #124]	@ (8006ab0 <TIM_OC6_SetConfig+0xec>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d017      	beq.n	8006a68 <TIM_OC6_SetConfig+0xa4>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8006ab4 <TIM_OC6_SetConfig+0xf0>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d013      	beq.n	8006a68 <TIM_OC6_SetConfig+0xa4>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a1d      	ldr	r2, [pc, #116]	@ (8006ab8 <TIM_OC6_SetConfig+0xf4>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d00f      	beq.n	8006a68 <TIM_OC6_SetConfig+0xa4>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8006abc <TIM_OC6_SetConfig+0xf8>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d00b      	beq.n	8006a68 <TIM_OC6_SetConfig+0xa4>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a1b      	ldr	r2, [pc, #108]	@ (8006ac0 <TIM_OC6_SetConfig+0xfc>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d007      	beq.n	8006a68 <TIM_OC6_SetConfig+0xa4>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a1a      	ldr	r2, [pc, #104]	@ (8006ac4 <TIM_OC6_SetConfig+0x100>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d003      	beq.n	8006a68 <TIM_OC6_SetConfig+0xa4>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a19      	ldr	r2, [pc, #100]	@ (8006ac8 <TIM_OC6_SetConfig+0x104>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d109      	bne.n	8006a7c <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	029b      	lsls	r3, r3, #10
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	685a      	ldr	r2, [r3, #4]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	621a      	str	r2, [r3, #32]
}
 8006a96:	bf00      	nop
 8006a98:	371c      	adds	r7, #28
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	40012c00 	.word	0x40012c00
 8006aa8:	50012c00 	.word	0x50012c00
 8006aac:	40013400 	.word	0x40013400
 8006ab0:	50013400 	.word	0x50013400
 8006ab4:	40014000 	.word	0x40014000
 8006ab8:	50014000 	.word	0x50014000
 8006abc:	40014400 	.word	0x40014400
 8006ac0:	50014400 	.word	0x50014400
 8006ac4:	40014800 	.word	0x40014800
 8006ac8:	50014800 	.word	0x50014800

08006acc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b087      	sub	sp, #28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	f023 0201 	bic.w	r2, r3, #1
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	011b      	lsls	r3, r3, #4
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f023 030a 	bic.w	r3, r3, #10
 8006b08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	621a      	str	r2, [r3, #32]
}
 8006b1e:	bf00      	nop
 8006b20:	371c      	adds	r7, #28
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b087      	sub	sp, #28
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	60f8      	str	r0, [r7, #12]
 8006b32:	60b9      	str	r1, [r7, #8]
 8006b34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6a1b      	ldr	r3, [r3, #32]
 8006b40:	f023 0210 	bic.w	r2, r3, #16
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	031b      	lsls	r3, r3, #12
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	011b      	lsls	r3, r3, #4
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	621a      	str	r2, [r3, #32]
}
 8006b7e:	bf00      	nop
 8006b80:	371c      	adds	r7, #28
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr

08006b8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b085      	sub	sp, #20
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006ba0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ba4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	f043 0307 	orr.w	r3, r3, #7
 8006bb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	609a      	str	r2, [r3, #8]
}
 8006bb8:	bf00      	nop
 8006bba:	3714      	adds	r7, #20
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
 8006bd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	021a      	lsls	r2, r3, #8
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	431a      	orrs	r2, r3
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	609a      	str	r2, [r3, #8]
}
 8006bf8:	bf00      	nop
 8006bfa:	371c      	adds	r7, #28
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f003 031f 	and.w	r3, r3, #31
 8006c16:	2201      	movs	r2, #1
 8006c18:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6a1a      	ldr	r2, [r3, #32]
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	43db      	mvns	r3, r3
 8006c26:	401a      	ands	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6a1a      	ldr	r2, [r3, #32]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f003 031f 	and.w	r3, r3, #31
 8006c36:	6879      	ldr	r1, [r7, #4]
 8006c38:	fa01 f303 	lsl.w	r3, r1, r3
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	621a      	str	r2, [r3, #32]
}
 8006c42:	bf00      	nop
 8006c44:	371c      	adds	r7, #28
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
	...

08006c50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d101      	bne.n	8006c68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c64:	2302      	movs	r3, #2
 8006c66:	e0a1      	b.n	8006dac <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2202      	movs	r2, #2
 8006c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a4a      	ldr	r2, [pc, #296]	@ (8006db8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d00e      	beq.n	8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a49      	ldr	r2, [pc, #292]	@ (8006dbc <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d009      	beq.n	8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a47      	ldr	r2, [pc, #284]	@ (8006dc0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d004      	beq.n	8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a46      	ldr	r2, [pc, #280]	@ (8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d108      	bne.n	8006cc2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006cb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006cc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ccc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a34      	ldr	r2, [pc, #208]	@ (8006db8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d04a      	beq.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a33      	ldr	r2, [pc, #204]	@ (8006dbc <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d045      	beq.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cfc:	d040      	beq.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d06:	d03b      	beq.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a2e      	ldr	r2, [pc, #184]	@ (8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d036      	beq.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a2d      	ldr	r2, [pc, #180]	@ (8006dcc <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d031      	beq.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a2b      	ldr	r2, [pc, #172]	@ (8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d02c      	beq.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a2a      	ldr	r2, [pc, #168]	@ (8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d027      	beq.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a28      	ldr	r2, [pc, #160]	@ (8006dd8 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d022      	beq.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a27      	ldr	r2, [pc, #156]	@ (8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d01d      	beq.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a1d      	ldr	r2, [pc, #116]	@ (8006dc0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d018      	beq.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a1c      	ldr	r2, [pc, #112]	@ (8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d013      	beq.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a20      	ldr	r2, [pc, #128]	@ (8006de0 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d00e      	beq.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a1f      	ldr	r2, [pc, #124]	@ (8006de4 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d009      	beq.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a1d      	ldr	r2, [pc, #116]	@ (8006de8 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d004      	beq.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8006dec <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d10c      	bne.n	8006d9a <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3714      	adds	r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr
 8006db8:	40012c00 	.word	0x40012c00
 8006dbc:	50012c00 	.word	0x50012c00
 8006dc0:	40013400 	.word	0x40013400
 8006dc4:	50013400 	.word	0x50013400
 8006dc8:	40000400 	.word	0x40000400
 8006dcc:	50000400 	.word	0x50000400
 8006dd0:	40000800 	.word	0x40000800
 8006dd4:	50000800 	.word	0x50000800
 8006dd8:	40000c00 	.word	0x40000c00
 8006ddc:	50000c00 	.word	0x50000c00
 8006de0:	40001800 	.word	0x40001800
 8006de4:	50001800 	.word	0x50001800
 8006de8:	40014000 	.word	0x40014000
 8006dec:	50014000 	.word	0x50014000

08006df0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d101      	bne.n	8006e0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e08:	2302      	movs	r3, #2
 8006e0a:	e07d      	b.n	8006f08 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	041b      	lsls	r3, r3, #16
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a1e      	ldr	r2, [pc, #120]	@ (8006f14 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d00e      	beq.n	8006ebc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a1d      	ldr	r2, [pc, #116]	@ (8006f18 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d009      	beq.n	8006ebc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a1b      	ldr	r2, [pc, #108]	@ (8006f1c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d004      	beq.n	8006ebc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a1a      	ldr	r2, [pc, #104]	@ (8006f20 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d11c      	bne.n	8006ef6 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec6:	051b      	lsls	r3, r3, #20
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3714      	adds	r7, #20
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	40012c00 	.word	0x40012c00
 8006f18:	50012c00 	.word	0x50012c00
 8006f1c:	40013400 	.word	0x40013400
 8006f20:	50013400 	.word	0x50013400

08006f24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e042      	b.n	8006fbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d106      	bne.n	8006f4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f83b 	bl	8006fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2224      	movs	r2, #36	@ 0x24
 8006f52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 0201 	bic.w	r2, r2, #1
 8006f64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fa20 	bl	80073b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f82f 	bl	8006fd8 <UART_SetConfig>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d101      	bne.n	8006f84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e01b      	b.n	8006fbc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689a      	ldr	r2, [r3, #8]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f042 0201 	orr.w	r2, r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fa9f 	bl	80074f8 <UART_CheckIdleState>
 8006fba:	4603      	mov	r3, r0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fdc:	b094      	sub	sp, #80	@ 0x50
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	4b78      	ldr	r3, [pc, #480]	@ (80071d0 <UART_SetConfig+0x1f8>)
 8006fee:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff2:	689a      	ldr	r2, [r3, #8]
 8006ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	431a      	orrs	r2, r3
 8007000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	4313      	orrs	r3, r2
 8007006:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4971      	ldr	r1, [pc, #452]	@ (80071d4 <UART_SetConfig+0x1fc>)
 8007010:	4019      	ands	r1, r3
 8007012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007018:	430b      	orrs	r3, r1
 800701a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800701c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007028:	68d9      	ldr	r1, [r3, #12]
 800702a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	ea40 0301 	orr.w	r3, r0, r1
 8007032:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800703a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	4b64      	ldr	r3, [pc, #400]	@ (80071d0 <UART_SetConfig+0x1f8>)
 8007040:	429a      	cmp	r2, r3
 8007042:	d009      	beq.n	8007058 <UART_SetConfig+0x80>
 8007044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	4b63      	ldr	r3, [pc, #396]	@ (80071d8 <UART_SetConfig+0x200>)
 800704a:	429a      	cmp	r2, r3
 800704c:	d004      	beq.n	8007058 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800704e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007050:	6a1a      	ldr	r2, [r3, #32]
 8007052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007054:	4313      	orrs	r3, r2
 8007056:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8007062:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8007066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800706c:	430b      	orrs	r3, r1
 800706e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007076:	f023 000f 	bic.w	r0, r3, #15
 800707a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800707e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	ea40 0301 	orr.w	r3, r0, r1
 8007086:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	4b53      	ldr	r3, [pc, #332]	@ (80071dc <UART_SetConfig+0x204>)
 800708e:	429a      	cmp	r2, r3
 8007090:	d102      	bne.n	8007098 <UART_SetConfig+0xc0>
 8007092:	2301      	movs	r3, #1
 8007094:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007096:	e066      	b.n	8007166 <UART_SetConfig+0x18e>
 8007098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	4b50      	ldr	r3, [pc, #320]	@ (80071e0 <UART_SetConfig+0x208>)
 800709e:	429a      	cmp	r2, r3
 80070a0:	d102      	bne.n	80070a8 <UART_SetConfig+0xd0>
 80070a2:	2302      	movs	r3, #2
 80070a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070a6:	e05e      	b.n	8007166 <UART_SetConfig+0x18e>
 80070a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	4b4d      	ldr	r3, [pc, #308]	@ (80071e4 <UART_SetConfig+0x20c>)
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d102      	bne.n	80070b8 <UART_SetConfig+0xe0>
 80070b2:	2304      	movs	r3, #4
 80070b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070b6:	e056      	b.n	8007166 <UART_SetConfig+0x18e>
 80070b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	4b4a      	ldr	r3, [pc, #296]	@ (80071e8 <UART_SetConfig+0x210>)
 80070be:	429a      	cmp	r2, r3
 80070c0:	d102      	bne.n	80070c8 <UART_SetConfig+0xf0>
 80070c2:	2308      	movs	r3, #8
 80070c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070c6:	e04e      	b.n	8007166 <UART_SetConfig+0x18e>
 80070c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	4b47      	ldr	r3, [pc, #284]	@ (80071ec <UART_SetConfig+0x214>)
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d102      	bne.n	80070d8 <UART_SetConfig+0x100>
 80070d2:	2310      	movs	r3, #16
 80070d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070d6:	e046      	b.n	8007166 <UART_SetConfig+0x18e>
 80070d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	4b44      	ldr	r3, [pc, #272]	@ (80071f0 <UART_SetConfig+0x218>)
 80070de:	429a      	cmp	r2, r3
 80070e0:	d102      	bne.n	80070e8 <UART_SetConfig+0x110>
 80070e2:	2320      	movs	r3, #32
 80070e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070e6:	e03e      	b.n	8007166 <UART_SetConfig+0x18e>
 80070e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	4b41      	ldr	r3, [pc, #260]	@ (80071f4 <UART_SetConfig+0x21c>)
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d102      	bne.n	80070f8 <UART_SetConfig+0x120>
 80070f2:	2340      	movs	r3, #64	@ 0x40
 80070f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070f6:	e036      	b.n	8007166 <UART_SetConfig+0x18e>
 80070f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	4b3e      	ldr	r3, [pc, #248]	@ (80071f8 <UART_SetConfig+0x220>)
 80070fe:	429a      	cmp	r2, r3
 8007100:	d102      	bne.n	8007108 <UART_SetConfig+0x130>
 8007102:	2380      	movs	r3, #128	@ 0x80
 8007104:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007106:	e02e      	b.n	8007166 <UART_SetConfig+0x18e>
 8007108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	4b3b      	ldr	r3, [pc, #236]	@ (80071fc <UART_SetConfig+0x224>)
 800710e:	429a      	cmp	r2, r3
 8007110:	d103      	bne.n	800711a <UART_SetConfig+0x142>
 8007112:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007116:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007118:	e025      	b.n	8007166 <UART_SetConfig+0x18e>
 800711a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	4b38      	ldr	r3, [pc, #224]	@ (8007200 <UART_SetConfig+0x228>)
 8007120:	429a      	cmp	r2, r3
 8007122:	d103      	bne.n	800712c <UART_SetConfig+0x154>
 8007124:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007128:	64bb      	str	r3, [r7, #72]	@ 0x48
 800712a:	e01c      	b.n	8007166 <UART_SetConfig+0x18e>
 800712c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	4b34      	ldr	r3, [pc, #208]	@ (8007204 <UART_SetConfig+0x22c>)
 8007132:	429a      	cmp	r2, r3
 8007134:	d103      	bne.n	800713e <UART_SetConfig+0x166>
 8007136:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800713a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800713c:	e013      	b.n	8007166 <UART_SetConfig+0x18e>
 800713e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	4b31      	ldr	r3, [pc, #196]	@ (8007208 <UART_SetConfig+0x230>)
 8007144:	429a      	cmp	r2, r3
 8007146:	d103      	bne.n	8007150 <UART_SetConfig+0x178>
 8007148:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800714c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800714e:	e00a      	b.n	8007166 <UART_SetConfig+0x18e>
 8007150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	4b1e      	ldr	r3, [pc, #120]	@ (80071d0 <UART_SetConfig+0x1f8>)
 8007156:	429a      	cmp	r2, r3
 8007158:	d103      	bne.n	8007162 <UART_SetConfig+0x18a>
 800715a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800715e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007160:	e001      	b.n	8007166 <UART_SetConfig+0x18e>
 8007162:	2300      	movs	r3, #0
 8007164:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	4b19      	ldr	r3, [pc, #100]	@ (80071d0 <UART_SetConfig+0x1f8>)
 800716c:	429a      	cmp	r2, r3
 800716e:	d005      	beq.n	800717c <UART_SetConfig+0x1a4>
 8007170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	4b18      	ldr	r3, [pc, #96]	@ (80071d8 <UART_SetConfig+0x200>)
 8007176:	429a      	cmp	r2, r3
 8007178:	f040 8094 	bne.w	80072a4 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800717c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800717e:	2200      	movs	r2, #0
 8007180:	623b      	str	r3, [r7, #32]
 8007182:	627a      	str	r2, [r7, #36]	@ 0x24
 8007184:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007188:	f7fb fffc 	bl	8003184 <HAL_RCCEx_GetPeriphCLKFreq>
 800718c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800718e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 80f7 	beq.w	8007384 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800719a:	4a1c      	ldr	r2, [pc, #112]	@ (800720c <UART_SetConfig+0x234>)
 800719c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071a0:	461a      	mov	r2, r3
 80071a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80071a8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ac:	685a      	ldr	r2, [r3, #4]
 80071ae:	4613      	mov	r3, r2
 80071b0:	005b      	lsls	r3, r3, #1
 80071b2:	4413      	add	r3, r2
 80071b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d305      	bcc.n	80071c6 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d924      	bls.n	8007210 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80071cc:	e069      	b.n	80072a2 <UART_SetConfig+0x2ca>
 80071ce:	bf00      	nop
 80071d0:	44002400 	.word	0x44002400
 80071d4:	cfff69f3 	.word	0xcfff69f3
 80071d8:	54002400 	.word	0x54002400
 80071dc:	40013800 	.word	0x40013800
 80071e0:	40004400 	.word	0x40004400
 80071e4:	40004800 	.word	0x40004800
 80071e8:	40004c00 	.word	0x40004c00
 80071ec:	40005000 	.word	0x40005000
 80071f0:	40006400 	.word	0x40006400
 80071f4:	40007800 	.word	0x40007800
 80071f8:	40007c00 	.word	0x40007c00
 80071fc:	40008000 	.word	0x40008000
 8007200:	40006800 	.word	0x40006800
 8007204:	40006c00 	.word	0x40006c00
 8007208:	40008400 	.word	0x40008400
 800720c:	08007888 	.word	0x08007888
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007210:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007212:	2200      	movs	r2, #0
 8007214:	61bb      	str	r3, [r7, #24]
 8007216:	61fa      	str	r2, [r7, #28]
 8007218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800721a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721c:	4a64      	ldr	r2, [pc, #400]	@ (80073b0 <UART_SetConfig+0x3d8>)
 800721e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007222:	b29b      	uxth	r3, r3
 8007224:	2200      	movs	r2, #0
 8007226:	613b      	str	r3, [r7, #16]
 8007228:	617a      	str	r2, [r7, #20]
 800722a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800722e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007232:	f7f9 f82b 	bl	800028c <__aeabi_uldivmod>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	4610      	mov	r0, r2
 800723c:	4619      	mov	r1, r3
 800723e:	f04f 0200 	mov.w	r2, #0
 8007242:	f04f 0300 	mov.w	r3, #0
 8007246:	020b      	lsls	r3, r1, #8
 8007248:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800724c:	0202      	lsls	r2, r0, #8
 800724e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007250:	6849      	ldr	r1, [r1, #4]
 8007252:	0849      	lsrs	r1, r1, #1
 8007254:	2000      	movs	r0, #0
 8007256:	460c      	mov	r4, r1
 8007258:	4605      	mov	r5, r0
 800725a:	eb12 0804 	adds.w	r8, r2, r4
 800725e:	eb43 0905 	adc.w	r9, r3, r5
 8007262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	60bb      	str	r3, [r7, #8]
 800726a:	60fa      	str	r2, [r7, #12]
 800726c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007270:	4640      	mov	r0, r8
 8007272:	4649      	mov	r1, r9
 8007274:	f7f9 f80a 	bl	800028c <__aeabi_uldivmod>
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	4613      	mov	r3, r2
 800727e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007282:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007286:	d308      	bcc.n	800729a <UART_SetConfig+0x2c2>
 8007288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800728a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800728e:	d204      	bcs.n	800729a <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8007290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007296:	60da      	str	r2, [r3, #12]
 8007298:	e003      	b.n	80072a2 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80072a0:	e070      	b.n	8007384 <UART_SetConfig+0x3ac>
 80072a2:	e06f      	b.n	8007384 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072ac:	d13c      	bne.n	8007328 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80072ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072b0:	2200      	movs	r2, #0
 80072b2:	603b      	str	r3, [r7, #0]
 80072b4:	607a      	str	r2, [r7, #4]
 80072b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072ba:	f7fb ff63 	bl	8003184 <HAL_RCCEx_GetPeriphCLKFreq>
 80072be:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d05e      	beq.n	8007384 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ca:	4a39      	ldr	r2, [pc, #228]	@ (80073b0 <UART_SetConfig+0x3d8>)
 80072cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072d0:	461a      	mov	r2, r3
 80072d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80072d8:	005a      	lsls	r2, r3, #1
 80072da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	085b      	lsrs	r3, r3, #1
 80072e0:	441a      	add	r2, r3
 80072e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072ee:	2b0f      	cmp	r3, #15
 80072f0:	d916      	bls.n	8007320 <UART_SetConfig+0x348>
 80072f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072f8:	d212      	bcs.n	8007320 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	f023 030f 	bic.w	r3, r3, #15
 8007302:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007306:	085b      	lsrs	r3, r3, #1
 8007308:	b29b      	uxth	r3, r3
 800730a:	f003 0307 	and.w	r3, r3, #7
 800730e:	b29a      	uxth	r2, r3
 8007310:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007312:	4313      	orrs	r3, r2
 8007314:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8007316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800731c:	60da      	str	r2, [r3, #12]
 800731e:	e031      	b.n	8007384 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007326:	e02d      	b.n	8007384 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007328:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800732a:	2200      	movs	r2, #0
 800732c:	469a      	mov	sl, r3
 800732e:	4693      	mov	fp, r2
 8007330:	4650      	mov	r0, sl
 8007332:	4659      	mov	r1, fp
 8007334:	f7fb ff26 	bl	8003184 <HAL_RCCEx_GetPeriphCLKFreq>
 8007338:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800733a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800733c:	2b00      	cmp	r3, #0
 800733e:	d021      	beq.n	8007384 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007344:	4a1a      	ldr	r2, [pc, #104]	@ (80073b0 <UART_SetConfig+0x3d8>)
 8007346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800734a:	461a      	mov	r2, r3
 800734c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800734e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	085b      	lsrs	r3, r3, #1
 8007358:	441a      	add	r2, r3
 800735a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007362:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007366:	2b0f      	cmp	r3, #15
 8007368:	d909      	bls.n	800737e <UART_SetConfig+0x3a6>
 800736a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800736c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007370:	d205      	bcs.n	800737e <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007374:	b29a      	uxth	r2, r3
 8007376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	60da      	str	r2, [r3, #12]
 800737c:	e002      	b.n	8007384 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007386:	2201      	movs	r2, #1
 8007388:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800738c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800738e:	2201      	movs	r2, #1
 8007390:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007396:	2200      	movs	r2, #0
 8007398:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800739a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800739c:	2200      	movs	r2, #0
 800739e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80073a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3750      	adds	r7, #80	@ 0x50
 80073a8:	46bd      	mov	sp, r7
 80073aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073ae:	bf00      	nop
 80073b0:	08007888 	.word	0x08007888

080073b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c0:	f003 0308 	and.w	r3, r3, #8
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00a      	beq.n	80073de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00a      	beq.n	8007400 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	430a      	orrs	r2, r1
 80073fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00a      	beq.n	8007422 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007426:	f003 0304 	and.w	r3, r3, #4
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00a      	beq.n	8007444 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	430a      	orrs	r2, r1
 8007442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007448:	f003 0310 	and.w	r3, r3, #16
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00a      	beq.n	8007466 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800746a:	f003 0320 	and.w	r3, r3, #32
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00a      	beq.n	8007488 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	430a      	orrs	r2, r1
 8007486:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800748c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007490:	2b00      	cmp	r3, #0
 8007492:	d01a      	beq.n	80074ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074b2:	d10a      	bne.n	80074ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00a      	beq.n	80074ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	430a      	orrs	r2, r1
 80074ea:	605a      	str	r2, [r3, #4]
  }
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b098      	sub	sp, #96	@ 0x60
 80074fc:	af02      	add	r7, sp, #8
 80074fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007508:	f7f9 fed4 	bl	80012b4 <HAL_GetTick>
 800750c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0308 	and.w	r3, r3, #8
 8007518:	2b08      	cmp	r3, #8
 800751a:	d12f      	bne.n	800757c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800751c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007524:	2200      	movs	r2, #0
 8007526:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f88e 	bl	800764c <UART_WaitOnFlagUntilTimeout>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d022      	beq.n	800757c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800753e:	e853 3f00 	ldrex	r3, [r3]
 8007542:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007546:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800754a:	653b      	str	r3, [r7, #80]	@ 0x50
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	461a      	mov	r2, r3
 8007552:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007554:	647b      	str	r3, [r7, #68]	@ 0x44
 8007556:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007558:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800755a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800755c:	e841 2300 	strex	r3, r2, [r1]
 8007560:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1e6      	bne.n	8007536 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2220      	movs	r2, #32
 800756c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e063      	b.n	8007644 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0304 	and.w	r3, r3, #4
 8007586:	2b04      	cmp	r3, #4
 8007588:	d149      	bne.n	800761e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800758a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007592:	2200      	movs	r2, #0
 8007594:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f857 	bl	800764c <UART_WaitOnFlagUntilTimeout>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d03c      	beq.n	800761e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ac:	e853 3f00 	ldrex	r3, [r3]
 80075b0:	623b      	str	r3, [r7, #32]
   return(result);
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	461a      	mov	r2, r3
 80075c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80075c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1e6      	bne.n	80075a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3308      	adds	r3, #8
 80075dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	e853 3f00 	ldrex	r3, [r3]
 80075e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f023 0301 	bic.w	r3, r3, #1
 80075ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	3308      	adds	r3, #8
 80075f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075f6:	61fa      	str	r2, [r7, #28]
 80075f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fa:	69b9      	ldr	r1, [r7, #24]
 80075fc:	69fa      	ldr	r2, [r7, #28]
 80075fe:	e841 2300 	strex	r3, r2, [r1]
 8007602:	617b      	str	r3, [r7, #20]
   return(result);
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1e5      	bne.n	80075d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2220      	movs	r2, #32
 800760e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e012      	b.n	8007644 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2220      	movs	r2, #32
 8007622:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2220      	movs	r2, #32
 800762a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3758      	adds	r7, #88	@ 0x58
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	603b      	str	r3, [r7, #0]
 8007658:	4613      	mov	r3, r2
 800765a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800765c:	e04f      	b.n	80076fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007664:	d04b      	beq.n	80076fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007666:	f7f9 fe25 	bl	80012b4 <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	429a      	cmp	r2, r3
 8007674:	d302      	bcc.n	800767c <UART_WaitOnFlagUntilTimeout+0x30>
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e04e      	b.n	800771e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0304 	and.w	r3, r3, #4
 800768a:	2b00      	cmp	r3, #0
 800768c:	d037      	beq.n	80076fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2b80      	cmp	r3, #128	@ 0x80
 8007692:	d034      	beq.n	80076fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b40      	cmp	r3, #64	@ 0x40
 8007698:	d031      	beq.n	80076fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	69db      	ldr	r3, [r3, #28]
 80076a0:	f003 0308 	and.w	r3, r3, #8
 80076a4:	2b08      	cmp	r3, #8
 80076a6:	d110      	bne.n	80076ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2208      	movs	r2, #8
 80076ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f000 f838 	bl	8007726 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2208      	movs	r2, #8
 80076ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e029      	b.n	800771e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076d8:	d111      	bne.n	80076fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80076e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 f81e 	bl	8007726 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2220      	movs	r2, #32
 80076ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e00f      	b.n	800771e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	69da      	ldr	r2, [r3, #28]
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	4013      	ands	r3, r2
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	429a      	cmp	r2, r3
 800770c:	bf0c      	ite	eq
 800770e:	2301      	moveq	r3, #1
 8007710:	2300      	movne	r3, #0
 8007712:	b2db      	uxtb	r3, r3
 8007714:	461a      	mov	r2, r3
 8007716:	79fb      	ldrb	r3, [r7, #7]
 8007718:	429a      	cmp	r2, r3
 800771a:	d0a0      	beq.n	800765e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007726:	b480      	push	{r7}
 8007728:	b095      	sub	sp, #84	@ 0x54
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800773c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007742:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800774c:	643b      	str	r3, [r7, #64]	@ 0x40
 800774e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007752:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800775a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e6      	bne.n	800772e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3308      	adds	r3, #8
 8007766:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	6a3b      	ldr	r3, [r7, #32]
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007776:	f023 0301 	bic.w	r3, r3, #1
 800777a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	3308      	adds	r3, #8
 8007782:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007784:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007786:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007788:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800778a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800778c:	e841 2300 	strex	r3, r2, [r1]
 8007790:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1e3      	bne.n	8007760 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800779c:	2b01      	cmp	r3, #1
 800779e:	d118      	bne.n	80077d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	e853 3f00 	ldrex	r3, [r3]
 80077ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	f023 0310 	bic.w	r3, r3, #16
 80077b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077be:	61bb      	str	r3, [r7, #24]
 80077c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c2:	6979      	ldr	r1, [r7, #20]
 80077c4:	69ba      	ldr	r2, [r7, #24]
 80077c6:	e841 2300 	strex	r3, r2, [r1]
 80077ca:	613b      	str	r3, [r7, #16]
   return(result);
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1e6      	bne.n	80077a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2220      	movs	r2, #32
 80077d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80077e6:	bf00      	nop
 80077e8:	3754      	adds	r7, #84	@ 0x54
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <memset>:
 80077f2:	4402      	add	r2, r0
 80077f4:	4603      	mov	r3, r0
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d100      	bne.n	80077fc <memset+0xa>
 80077fa:	4770      	bx	lr
 80077fc:	f803 1b01 	strb.w	r1, [r3], #1
 8007800:	e7f9      	b.n	80077f6 <memset+0x4>
	...

08007804 <__libc_init_array>:
 8007804:	b570      	push	{r4, r5, r6, lr}
 8007806:	4d0d      	ldr	r5, [pc, #52]	@ (800783c <__libc_init_array+0x38>)
 8007808:	2600      	movs	r6, #0
 800780a:	4c0d      	ldr	r4, [pc, #52]	@ (8007840 <__libc_init_array+0x3c>)
 800780c:	1b64      	subs	r4, r4, r5
 800780e:	10a4      	asrs	r4, r4, #2
 8007810:	42a6      	cmp	r6, r4
 8007812:	d109      	bne.n	8007828 <__libc_init_array+0x24>
 8007814:	4d0b      	ldr	r5, [pc, #44]	@ (8007844 <__libc_init_array+0x40>)
 8007816:	2600      	movs	r6, #0
 8007818:	4c0b      	ldr	r4, [pc, #44]	@ (8007848 <__libc_init_array+0x44>)
 800781a:	f000 f817 	bl	800784c <_init>
 800781e:	1b64      	subs	r4, r4, r5
 8007820:	10a4      	asrs	r4, r4, #2
 8007822:	42a6      	cmp	r6, r4
 8007824:	d105      	bne.n	8007832 <__libc_init_array+0x2e>
 8007826:	bd70      	pop	{r4, r5, r6, pc}
 8007828:	f855 3b04 	ldr.w	r3, [r5], #4
 800782c:	3601      	adds	r6, #1
 800782e:	4798      	blx	r3
 8007830:	e7ee      	b.n	8007810 <__libc_init_array+0xc>
 8007832:	f855 3b04 	ldr.w	r3, [r5], #4
 8007836:	3601      	adds	r6, #1
 8007838:	4798      	blx	r3
 800783a:	e7f2      	b.n	8007822 <__libc_init_array+0x1e>
 800783c:	080078a8 	.word	0x080078a8
 8007840:	080078a8 	.word	0x080078a8
 8007844:	080078a8 	.word	0x080078a8
 8007848:	080078ac 	.word	0x080078ac

0800784c <_init>:
 800784c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784e:	bf00      	nop
 8007850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007852:	bc08      	pop	{r3}
 8007854:	469e      	mov	lr, r3
 8007856:	4770      	bx	lr

08007858 <_fini>:
 8007858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785a:	bf00      	nop
 800785c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800785e:	bc08      	pop	{r3}
 8007860:	469e      	mov	lr, r3
 8007862:	4770      	bx	lr
