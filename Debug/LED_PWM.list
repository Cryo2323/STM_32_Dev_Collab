
LED_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007608  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08007854  08007854  00008854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007890  08007890  00009028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007890  08007890  00008890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007898  08007898  00009028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007898  08007898  00008898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800789c  0800789c  0000889c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  080078a0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000028  080078c8  00009028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  080078c8  0000914c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00009028  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148a5  00000000  00000000  0000905e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a3  00000000  00000000  0001d903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  0001fca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dad  00000000  00000000  00020e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031e0e  00000000  00000000  00021bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bf6  00000000  00000000  000539eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00142cbe  00000000  00000000  000695e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ac29f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b28  00000000  00000000  001ac2e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001b0e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000028 	.word	0x20000028
 8000268:	00000000 	.word	0x00000000
 800026c:	0800783c 	.word	0x0800783c

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	2000002c 	.word	0x2000002c
 8000288:	0800783c 	.word	0x0800783c

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b9b0 	b.w	8000604 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	4688      	mov	r8, r1
 80002c4:	4604      	mov	r4, r0
 80002c6:	468e      	mov	lr, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14a      	bne.n	8000362 <__udivmoddi4+0xa6>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	4617      	mov	r7, r2
 80002d0:	d95f      	bls.n	8000392 <__udivmoddi4+0xd6>
 80002d2:	fab2 f682 	clz	r6, r2
 80002d6:	b14e      	cbz	r6, 80002ec <__udivmoddi4+0x30>
 80002d8:	f1c6 0320 	rsb	r3, r6, #32
 80002dc:	fa01 fe06 	lsl.w	lr, r1, r6
 80002e0:	40b7      	lsls	r7, r6
 80002e2:	40b4      	lsls	r4, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	ea43 0e0e 	orr.w	lr, r3, lr
 80002ec:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f0:	fa1f fc87 	uxth.w	ip, r7
 80002f4:	0c23      	lsrs	r3, r4, #16
 80002f6:	fbbe f1f8 	udiv	r1, lr, r8
 80002fa:	fb08 ee11 	mls	lr, r8, r1, lr
 80002fe:	fb01 f20c 	mul.w	r2, r1, ip
 8000302:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x5e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x5c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 8154 	bhi.w	80005c0 <__udivmoddi4+0x304>
 8000318:	4601      	mov	r1, r0
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	b2a2      	uxth	r2, r4
 800031e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000322:	fb08 3310 	mls	r3, r8, r0, r3
 8000326:	fb00 fc0c 	mul.w	ip, r0, ip
 800032a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800032e:	4594      	cmp	ip, r2
 8000330:	d90b      	bls.n	800034a <__udivmoddi4+0x8e>
 8000332:	18ba      	adds	r2, r7, r2
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	bf2c      	ite	cs
 800033a:	2401      	movcs	r4, #1
 800033c:	2400      	movcc	r4, #0
 800033e:	4594      	cmp	ip, r2
 8000340:	d902      	bls.n	8000348 <__udivmoddi4+0x8c>
 8000342:	2c00      	cmp	r4, #0
 8000344:	f000 813f 	beq.w	80005c6 <__udivmoddi4+0x30a>
 8000348:	4618      	mov	r0, r3
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	eba2 020c 	sub.w	r2, r2, ip
 8000352:	2100      	movs	r1, #0
 8000354:	b11d      	cbz	r5, 800035e <__udivmoddi4+0xa2>
 8000356:	40f2      	lsrs	r2, r6
 8000358:	2300      	movs	r3, #0
 800035a:	e9c5 2300 	strd	r2, r3, [r5]
 800035e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000362:	428b      	cmp	r3, r1
 8000364:	d905      	bls.n	8000372 <__udivmoddi4+0xb6>
 8000366:	b10d      	cbz	r5, 800036c <__udivmoddi4+0xb0>
 8000368:	e9c5 0100 	strd	r0, r1, [r5]
 800036c:	2100      	movs	r1, #0
 800036e:	4608      	mov	r0, r1
 8000370:	e7f5      	b.n	800035e <__udivmoddi4+0xa2>
 8000372:	fab3 f183 	clz	r1, r3
 8000376:	2900      	cmp	r1, #0
 8000378:	d14e      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037a:	4543      	cmp	r3, r8
 800037c:	f0c0 8112 	bcc.w	80005a4 <__udivmoddi4+0x2e8>
 8000380:	4282      	cmp	r2, r0
 8000382:	f240 810f 	bls.w	80005a4 <__udivmoddi4+0x2e8>
 8000386:	4608      	mov	r0, r1
 8000388:	2d00      	cmp	r5, #0
 800038a:	d0e8      	beq.n	800035e <__udivmoddi4+0xa2>
 800038c:	e9c5 4e00 	strd	r4, lr, [r5]
 8000390:	e7e5      	b.n	800035e <__udivmoddi4+0xa2>
 8000392:	2a00      	cmp	r2, #0
 8000394:	f000 80ac 	beq.w	80004f0 <__udivmoddi4+0x234>
 8000398:	fab2 f682 	clz	r6, r2
 800039c:	2e00      	cmp	r6, #0
 800039e:	f040 80bb 	bne.w	8000518 <__udivmoddi4+0x25c>
 80003a2:	1a8b      	subs	r3, r1, r2
 80003a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003a8:	b2bc      	uxth	r4, r7
 80003aa:	2101      	movs	r1, #1
 80003ac:	0c02      	lsrs	r2, r0, #16
 80003ae:	b280      	uxth	r0, r0
 80003b0:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003bc:	fb04 f20c 	mul.w	r2, r4, ip
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d90e      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c4:	18fb      	adds	r3, r7, r3
 80003c6:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80ec 	beq.w	80005b8 <__udivmoddi4+0x2fc>
 80003e0:	46c4      	mov	ip, r8
 80003e2:	1a9b      	subs	r3, r3, r2
 80003e4:	fbb3 f8fe 	udiv	r8, r3, lr
 80003e8:	fb0e 3318 	mls	r3, lr, r8, r3
 80003ec:	fb04 f408 	mul.w	r4, r4, r8
 80003f0:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003f4:	4294      	cmp	r4, r2
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x154>
 80003f8:	18ba      	adds	r2, r7, r2
 80003fa:	f108 33ff 	add.w	r3, r8, #4294967295
 80003fe:	bf2c      	ite	cs
 8000400:	2001      	movcs	r0, #1
 8000402:	2000      	movcc	r0, #0
 8000404:	4294      	cmp	r4, r2
 8000406:	d902      	bls.n	800040e <__udivmoddi4+0x152>
 8000408:	2800      	cmp	r0, #0
 800040a:	f000 80d1 	beq.w	80005b0 <__udivmoddi4+0x2f4>
 800040e:	4698      	mov	r8, r3
 8000410:	1b12      	subs	r2, r2, r4
 8000412:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa08 f401 	lsl.w	r4, r8, r1
 8000422:	fa00 f901 	lsl.w	r9, r0, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	fa28 f806 	lsr.w	r8, r8, r6
 800042e:	408a      	lsls	r2, r1
 8000430:	431f      	orrs	r7, r3
 8000432:	fa20 f306 	lsr.w	r3, r0, r6
 8000436:	0c38      	lsrs	r0, r7, #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa1f fc87 	uxth.w	ip, r7
 800043e:	0c1c      	lsrs	r4, r3, #16
 8000440:	fbb8 fef0 	udiv	lr, r8, r0
 8000444:	fb00 881e 	mls	r8, r0, lr, r8
 8000448:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800044c:	fb0e f80c 	mul.w	r8, lr, ip
 8000450:	45a0      	cmp	r8, r4
 8000452:	d90e      	bls.n	8000472 <__udivmoddi4+0x1b6>
 8000454:	193c      	adds	r4, r7, r4
 8000456:	f10e 3aff 	add.w	sl, lr, #4294967295
 800045a:	bf2c      	ite	cs
 800045c:	f04f 0b01 	movcs.w	fp, #1
 8000460:	f04f 0b00 	movcc.w	fp, #0
 8000464:	45a0      	cmp	r8, r4
 8000466:	d903      	bls.n	8000470 <__udivmoddi4+0x1b4>
 8000468:	f1bb 0f00 	cmp.w	fp, #0
 800046c:	f000 80b8 	beq.w	80005e0 <__udivmoddi4+0x324>
 8000470:	46d6      	mov	lr, sl
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fa1f f883 	uxth.w	r8, r3
 800047a:	fbb4 f3f0 	udiv	r3, r4, r0
 800047e:	fb00 4413 	mls	r4, r0, r3, r4
 8000482:	fb03 fc0c 	mul.w	ip, r3, ip
 8000486:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800048a:	45a4      	cmp	ip, r4
 800048c:	d90e      	bls.n	80004ac <__udivmoddi4+0x1f0>
 800048e:	193c      	adds	r4, r7, r4
 8000490:	f103 30ff 	add.w	r0, r3, #4294967295
 8000494:	bf2c      	ite	cs
 8000496:	f04f 0801 	movcs.w	r8, #1
 800049a:	f04f 0800 	movcc.w	r8, #0
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d903      	bls.n	80004aa <__udivmoddi4+0x1ee>
 80004a2:	f1b8 0f00 	cmp.w	r8, #0
 80004a6:	f000 809f 	beq.w	80005e8 <__udivmoddi4+0x32c>
 80004aa:	4603      	mov	r3, r0
 80004ac:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b0:	eba4 040c 	sub.w	r4, r4, ip
 80004b4:	fba0 ec02 	umull	lr, ip, r0, r2
 80004b8:	4564      	cmp	r4, ip
 80004ba:	4673      	mov	r3, lr
 80004bc:	46e0      	mov	r8, ip
 80004be:	d302      	bcc.n	80004c6 <__udivmoddi4+0x20a>
 80004c0:	d107      	bne.n	80004d2 <__udivmoddi4+0x216>
 80004c2:	45f1      	cmp	r9, lr
 80004c4:	d205      	bcs.n	80004d2 <__udivmoddi4+0x216>
 80004c6:	ebbe 0302 	subs.w	r3, lr, r2
 80004ca:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ce:	3801      	subs	r0, #1
 80004d0:	46e0      	mov	r8, ip
 80004d2:	b15d      	cbz	r5, 80004ec <__udivmoddi4+0x230>
 80004d4:	ebb9 0203 	subs.w	r2, r9, r3
 80004d8:	eb64 0408 	sbc.w	r4, r4, r8
 80004dc:	fa04 f606 	lsl.w	r6, r4, r6
 80004e0:	fa22 f301 	lsr.w	r3, r2, r1
 80004e4:	40cc      	lsrs	r4, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	e9c5 6400 	strd	r6, r4, [r5]
 80004ec:	2100      	movs	r1, #0
 80004ee:	e736      	b.n	800035e <__udivmoddi4+0xa2>
 80004f0:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f4:	0c01      	lsrs	r1, r0, #16
 80004f6:	4614      	mov	r4, r2
 80004f8:	b280      	uxth	r0, r0
 80004fa:	4696      	mov	lr, r2
 80004fc:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000500:	2620      	movs	r6, #32
 8000502:	4690      	mov	r8, r2
 8000504:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000508:	4610      	mov	r0, r2
 800050a:	fbb1 f1f2 	udiv	r1, r1, r2
 800050e:	eba3 0308 	sub.w	r3, r3, r8
 8000512:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000516:	e74b      	b.n	80003b0 <__udivmoddi4+0xf4>
 8000518:	40b7      	lsls	r7, r6
 800051a:	f1c6 0320 	rsb	r3, r6, #32
 800051e:	fa01 f206 	lsl.w	r2, r1, r6
 8000522:	fa21 f803 	lsr.w	r8, r1, r3
 8000526:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800052a:	fa20 f303 	lsr.w	r3, r0, r3
 800052e:	b2bc      	uxth	r4, r7
 8000530:	40b0      	lsls	r0, r6
 8000532:	4313      	orrs	r3, r2
 8000534:	0c02      	lsrs	r2, r0, #16
 8000536:	0c19      	lsrs	r1, r3, #16
 8000538:	b280      	uxth	r0, r0
 800053a:	fbb8 f9fe 	udiv	r9, r8, lr
 800053e:	fb0e 8819 	mls	r8, lr, r9, r8
 8000542:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000546:	fb09 f804 	mul.w	r8, r9, r4
 800054a:	4588      	cmp	r8, r1
 800054c:	d951      	bls.n	80005f2 <__udivmoddi4+0x336>
 800054e:	1879      	adds	r1, r7, r1
 8000550:	f109 3cff 	add.w	ip, r9, #4294967295
 8000554:	bf2c      	ite	cs
 8000556:	f04f 0a01 	movcs.w	sl, #1
 800055a:	f04f 0a00 	movcc.w	sl, #0
 800055e:	4588      	cmp	r8, r1
 8000560:	d902      	bls.n	8000568 <__udivmoddi4+0x2ac>
 8000562:	f1ba 0f00 	cmp.w	sl, #0
 8000566:	d031      	beq.n	80005cc <__udivmoddi4+0x310>
 8000568:	eba1 0108 	sub.w	r1, r1, r8
 800056c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000570:	fb09 f804 	mul.w	r8, r9, r4
 8000574:	fb0e 1119 	mls	r1, lr, r9, r1
 8000578:	b29b      	uxth	r3, r3
 800057a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800057e:	4543      	cmp	r3, r8
 8000580:	d235      	bcs.n	80005ee <__udivmoddi4+0x332>
 8000582:	18fb      	adds	r3, r7, r3
 8000584:	f109 31ff 	add.w	r1, r9, #4294967295
 8000588:	bf2c      	ite	cs
 800058a:	f04f 0a01 	movcs.w	sl, #1
 800058e:	f04f 0a00 	movcc.w	sl, #0
 8000592:	4543      	cmp	r3, r8
 8000594:	d2bb      	bcs.n	800050e <__udivmoddi4+0x252>
 8000596:	f1ba 0f00 	cmp.w	sl, #0
 800059a:	d1b8      	bne.n	800050e <__udivmoddi4+0x252>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e7b4      	b.n	800050e <__udivmoddi4+0x252>
 80005a4:	1a84      	subs	r4, r0, r2
 80005a6:	eb68 0203 	sbc.w	r2, r8, r3
 80005aa:	2001      	movs	r0, #1
 80005ac:	4696      	mov	lr, r2
 80005ae:	e6eb      	b.n	8000388 <__udivmoddi4+0xcc>
 80005b0:	443a      	add	r2, r7
 80005b2:	f1a8 0802 	sub.w	r8, r8, #2
 80005b6:	e72b      	b.n	8000410 <__udivmoddi4+0x154>
 80005b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80005bc:	443b      	add	r3, r7
 80005be:	e710      	b.n	80003e2 <__udivmoddi4+0x126>
 80005c0:	3902      	subs	r1, #2
 80005c2:	443b      	add	r3, r7
 80005c4:	e6a9      	b.n	800031a <__udivmoddi4+0x5e>
 80005c6:	443a      	add	r2, r7
 80005c8:	3802      	subs	r0, #2
 80005ca:	e6be      	b.n	800034a <__udivmoddi4+0x8e>
 80005cc:	eba7 0808 	sub.w	r8, r7, r8
 80005d0:	f1a9 0c02 	sub.w	ip, r9, #2
 80005d4:	4441      	add	r1, r8
 80005d6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005da:	fb09 f804 	mul.w	r8, r9, r4
 80005de:	e7c9      	b.n	8000574 <__udivmoddi4+0x2b8>
 80005e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80005e4:	443c      	add	r4, r7
 80005e6:	e744      	b.n	8000472 <__udivmoddi4+0x1b6>
 80005e8:	3b02      	subs	r3, #2
 80005ea:	443c      	add	r4, r7
 80005ec:	e75e      	b.n	80004ac <__udivmoddi4+0x1f0>
 80005ee:	4649      	mov	r1, r9
 80005f0:	e78d      	b.n	800050e <__udivmoddi4+0x252>
 80005f2:	eba1 0108 	sub.w	r1, r1, r8
 80005f6:	46cc      	mov	ip, r9
 80005f8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fc:	fb09 f804 	mul.w	r8, r9, r4
 8000600:	e7b8      	b.n	8000574 <__udivmoddi4+0x2b8>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fd98 	bl	8001140 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f83a 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f958 	bl	80008c8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000618:	f000 f8a6 	bl	8000768 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800061c:	2100      	movs	r1, #0
 800061e:	4818      	ldr	r0, [pc, #96]	@ (8000680 <main+0x78>)
 8000620:	f005 f9ba 	bl	8005998 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000624:	2000      	movs	r0, #0
 8000626:	f000 fbb7 	bl	8000d98 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 800062a:	2001      	movs	r0, #1
 800062c:	f000 fbb4 	bl	8000d98 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000630:	2002      	movs	r0, #2
 8000632:	f000 fbb1 	bl	8000d98 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000636:	2101      	movs	r1, #1
 8000638:	2000      	movs	r0, #0
 800063a:	f000 fc23 	bl	8000e84 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800063e:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <main+0x7c>)
 8000640:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000644:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000646:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <main+0x7c>)
 8000648:	2200      	movs	r2, #0
 800064a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800064c:	4b0d      	ldr	r3, [pc, #52]	@ (8000684 <main+0x7c>)
 800064e:	2200      	movs	r2, #0
 8000650:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <main+0x7c>)
 8000654:	2200      	movs	r2, #0
 8000656:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000658:	4b0a      	ldr	r3, [pc, #40]	@ (8000684 <main+0x7c>)
 800065a:	2200      	movs	r2, #0
 800065c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800065e:	4909      	ldr	r1, [pc, #36]	@ (8000684 <main+0x7c>)
 8000660:	2000      	movs	r0, #0
 8000662:	f000 fca9 	bl	8000fb8 <BSP_COM_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <main+0x68>
  {
    Error_Handler();
 800066c:	f000 fa4e 	bl	8000b0c <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle_ramp());
 8000670:	f000 fa28 	bl	8000ac4 <duty_cycle_ramp>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b01      	ldr	r3, [pc, #4]	@ (8000680 <main+0x78>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	635a      	str	r2, [r3, #52]	@ 0x34
 800067e:	e7f7      	b.n	8000670 <main+0x68>
 8000680:	20000054 	.word	0x20000054
 8000684:	20000044 	.word	0x20000044

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b09c      	sub	sp, #112	@ 0x70
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2250      	movs	r2, #80	@ 0x50
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f007 f8a3 	bl	80077e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
 80006ac:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000760 <SystemClock_Config+0xd8>)
 80006b0:	691b      	ldr	r3, [r3, #16]
 80006b2:	4a2b      	ldr	r2, [pc, #172]	@ (8000760 <SystemClock_Config+0xd8>)
 80006b4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80006b8:	6113      	str	r3, [r2, #16]
 80006ba:	4b29      	ldr	r3, [pc, #164]	@ (8000760 <SystemClock_Config+0xd8>)
 80006bc:	691b      	ldr	r3, [r3, #16]
 80006be:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c6:	bf00      	nop
 80006c8:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <SystemClock_Config+0xd8>)
 80006ca:	695b      	ldr	r3, [r3, #20]
 80006cc:	f003 0308 	and.w	r3, r3, #8
 80006d0:	2b08      	cmp	r3, #8
 80006d2:	d1f9      	bne.n	80006c8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d4:	2301      	movs	r3, #1
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006d8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	2302      	movs	r3, #2
 80006e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80006e2:	2303      	movs	r3, #3
 80006e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e6:	2304      	movs	r3, #4
 80006e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 80006ea:	23fa      	movs	r3, #250	@ 0xfa
 80006ec:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80006fa:	2304      	movs	r3, #4
 80006fc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80006fe:	2300      	movs	r3, #0
 8000700:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	4618      	mov	r0, r3
 800070c:	f001 f974 	bl	80019f8 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000716:	f000 f9f9 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	231f      	movs	r3, #31
 800071c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2303      	movs	r3, #3
 8000720:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	2105      	movs	r1, #5
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fd95 	bl	8002268 <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000744:	f000 f9e2 	bl	8000b0c <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <SystemClock_Config+0xdc>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000750:	4a04      	ldr	r2, [pc, #16]	@ (8000764 <SystemClock_Config+0xdc>)
 8000752:	f043 0320 	orr.w	r3, r3, #32
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	bf00      	nop
 800075a:	3770      	adds	r7, #112	@ 0x70
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	44020800 	.word	0x44020800
 8000764:	40022000 	.word	0x40022000

08000768 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b09c      	sub	sp, #112	@ 0x70
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000788:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
 8000798:	615a      	str	r2, [r3, #20]
 800079a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2234      	movs	r2, #52	@ 0x34
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f007 f81d 	bl	80077e2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a8:	4b45      	ldr	r3, [pc, #276]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007aa:	4a46      	ldr	r2, [pc, #280]	@ (80008c4 <MX_TIM1_Init+0x15c>)
 80007ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007ae:	4b44      	ldr	r3, [pc, #272]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b4:	4b42      	ldr	r3, [pc, #264]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 80007ba:	4b41      	ldr	r3, [pc, #260]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007bc:	22ff      	movs	r2, #255	@ 0xff
 80007be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c0:	4b3f      	ldr	r3, [pc, #252]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c6:	4b3e      	ldr	r3, [pc, #248]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007cc:	4b3c      	ldr	r3, [pc, #240]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007ce:	2280      	movs	r2, #128	@ 0x80
 80007d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d2:	483b      	ldr	r0, [pc, #236]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007d4:	f005 f828 	bl	8005828 <HAL_TIM_Base_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80007de:	f000 f995 	bl	8000b0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007e8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007ec:	4619      	mov	r1, r3
 80007ee:	4834      	ldr	r0, [pc, #208]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007f0:	f005 fb46 	bl	8005e80 <HAL_TIM_ConfigClockSource>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007fa:	f000 f987 	bl	8000b0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007fe:	4830      	ldr	r0, [pc, #192]	@ (80008c0 <MX_TIM1_Init+0x158>)
 8000800:	f005 f869 	bl	80058d6 <HAL_TIM_PWM_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800080a:	f000 f97f 	bl	8000b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080e:	2300      	movs	r3, #0
 8000810:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000812:	2300      	movs	r3, #0
 8000814:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800081a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800081e:	4619      	mov	r1, r3
 8000820:	4827      	ldr	r0, [pc, #156]	@ (80008c0 <MX_TIM1_Init+0x158>)
 8000822:	f006 fa0d 	bl	8006c40 <HAL_TIMEx_MasterConfigSynchronization>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800082c:	f000 f96e 	bl	8000b0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000830:	2360      	movs	r3, #96	@ 0x60
 8000832:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 255;
 8000834:	23ff      	movs	r3, #255	@ 0xff
 8000836:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000838:	2300      	movs	r3, #0
 800083a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800083c:	2300      	movs	r3, #0
 800083e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000844:	2300      	movs	r3, #0
 8000846:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800084c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000850:	2200      	movs	r2, #0
 8000852:	4619      	mov	r1, r3
 8000854:	481a      	ldr	r0, [pc, #104]	@ (80008c0 <MX_TIM1_Init+0x158>)
 8000856:	f005 f9ff 	bl	8005c58 <HAL_TIM_PWM_ConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000860:	f000 f954 	bl	8000b0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000878:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800087c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800088a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800088e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	4619      	mov	r1, r3
 80008a0:	4807      	ldr	r0, [pc, #28]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80008a2:	f006 fa9d 	bl	8006de0 <HAL_TIMEx_ConfigBreakDeadTime>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80008ac:	f000 f92e 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008b0:	4803      	ldr	r0, [pc, #12]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80008b2:	f000 f959 	bl	8000b68 <HAL_TIM_MspPostInit>

}
 80008b6:	bf00      	nop
 80008b8:	3770      	adds	r7, #112	@ 0x70
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000054 	.word	0x20000054
 80008c4:	40012c00 	.word	0x40012c00

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08c      	sub	sp, #48	@ 0x30
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008de:	4b73      	ldr	r3, [pc, #460]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 80008e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008e4:	4a71      	ldr	r2, [pc, #452]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 80008e6:	f043 0310 	orr.w	r3, r3, #16
 80008ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008ee:	4b6f      	ldr	r3, [pc, #444]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 80008f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008f4:	f003 0310 	and.w	r3, r3, #16
 80008f8:	61bb      	str	r3, [r7, #24]
 80008fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fc:	4b6b      	ldr	r3, [pc, #428]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 80008fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000902:	4a6a      	ldr	r2, [pc, #424]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800090c:	4b67      	ldr	r3, [pc, #412]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 800090e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091a:	4b64      	ldr	r3, [pc, #400]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 800091c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000920:	4a62      	ldr	r2, [pc, #392]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 8000922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000926:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800092a:	4b60      	ldr	r3, [pc, #384]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 800092c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	4b5c      	ldr	r3, [pc, #368]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 800093a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800093e:	4a5b      	ldr	r2, [pc, #364]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000948:	4b58      	ldr	r3, [pc, #352]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 800094a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	4b55      	ldr	r3, [pc, #340]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 8000958:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800095c:	4a53      	ldr	r2, [pc, #332]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 800095e:	f043 0302 	orr.w	r3, r3, #2
 8000962:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000966:	4b51      	ldr	r3, [pc, #324]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 8000968:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800096c:	f003 0302 	and.w	r3, r3, #2
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000974:	4b4d      	ldr	r3, [pc, #308]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 8000976:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800097a:	4a4c      	ldr	r2, [pc, #304]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 800097c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000980:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000984:	4b49      	ldr	r3, [pc, #292]	@ (8000aac <MX_GPIO_Init+0x1e4>)
 8000986:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800098a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000992:	2332      	movs	r3, #50	@ 0x32
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099e:	2302      	movs	r3, #2
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009a2:	230b      	movs	r3, #11
 80009a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4840      	ldr	r0, [pc, #256]	@ (8000ab0 <MX_GPIO_Init+0x1e8>)
 80009ae:	f000 fe9d 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009b2:	2386      	movs	r3, #134	@ 0x86
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009be:	2302      	movs	r3, #2
 80009c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009c2:	230b      	movs	r3, #11
 80009c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4839      	ldr	r0, [pc, #228]	@ (8000ab4 <MX_GPIO_Init+0x1ec>)
 80009ce:	f000 fe8d 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80009d2:	2310      	movs	r3, #16
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d6:	2303      	movs	r3, #3
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4833      	ldr	r0, [pc, #204]	@ (8000ab4 <MX_GPIO_Init+0x1ec>)
 80009e6:	f000 fe81 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 80009ea:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f0:	2303      	movs	r3, #3
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	482e      	ldr	r0, [pc, #184]	@ (8000ab8 <MX_GPIO_Init+0x1f0>)
 8000a00:	f000 fe74 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a12:	2302      	movs	r3, #2
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a16:	230b      	movs	r3, #11
 8000a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4825      	ldr	r0, [pc, #148]	@ (8000ab8 <MX_GPIO_Init+0x1f0>)
 8000a22:	f000 fe63 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000a26:	2380      	movs	r3, #128	@ 0x80
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2a:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <MX_GPIO_Init+0x1f4>)
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4821      	ldr	r0, [pc, #132]	@ (8000ac0 <MX_GPIO_Init+0x1f8>)
 8000a3a:	f000 fe57 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000a3e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000a50:	230a      	movs	r3, #10
 8000a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4816      	ldr	r0, [pc, #88]	@ (8000ab4 <MX_GPIO_Init+0x1ec>)
 8000a5c:	f000 fe46 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8000a60:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a72:	230b      	movs	r3, #11
 8000a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4810      	ldr	r0, [pc, #64]	@ (8000ac0 <MX_GPIO_Init+0x1f8>)
 8000a7e:	f000 fe35 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000a82:	23c0      	movs	r3, #192	@ 0xc0
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a92:	2308      	movs	r3, #8
 8000a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4806      	ldr	r0, [pc, #24]	@ (8000ab8 <MX_GPIO_Init+0x1f0>)
 8000a9e:	f000 fe25 	bl	80016ec <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3730      	adds	r7, #48	@ 0x30
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	44020c00 	.word	0x44020c00
 8000ab0:	42020800 	.word	0x42020800
 8000ab4:	42020000 	.word	0x42020000
 8000ab8:	42020400 	.word	0x42020400
 8000abc:	10110000 	.word	0x10110000
 8000ac0:	42021800 	.word	0x42021800

08000ac4 <duty_cycle_ramp>:

/* USER CODE BEGIN 4 */
uint8_t duty_cycle_ramp(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	static uint8_t pwm = 0;
	static uint32_t last_time = 0;

	if (pwm <= 255) {
		if (HAL_GetTick() - last_time > 100)
 8000ac8:	f000 fbec 	bl	80012a4 <HAL_GetTick>
 8000acc:	4602      	mov	r2, r0
 8000ace:	4b0d      	ldr	r3, [pc, #52]	@ (8000b04 <duty_cycle_ramp+0x40>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	2b64      	cmp	r3, #100	@ 0x64
 8000ad6:	d910      	bls.n	8000afa <duty_cycle_ramp+0x36>
		{
			pwm = (pwm + 1 > 255) ? 255 : (pwm + 1);
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <duty_cycle_ramp+0x44>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2bff      	cmp	r3, #255	@ 0xff
 8000ade:	d004      	beq.n	8000aea <duty_cycle_ramp+0x26>
 8000ae0:	4b09      	ldr	r3, [pc, #36]	@ (8000b08 <duty_cycle_ramp+0x44>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	e000      	b.n	8000aec <duty_cycle_ramp+0x28>
 8000aea:	23ff      	movs	r3, #255	@ 0xff
 8000aec:	4a06      	ldr	r2, [pc, #24]	@ (8000b08 <duty_cycle_ramp+0x44>)
 8000aee:	7013      	strb	r3, [r2, #0]
			last_time = HAL_GetTick();
 8000af0:	f000 fbd8 	bl	80012a4 <HAL_GetTick>
 8000af4:	4603      	mov	r3, r0
 8000af6:	4a03      	ldr	r2, [pc, #12]	@ (8000b04 <duty_cycle_ramp+0x40>)
 8000af8:	6013      	str	r3, [r2, #0]

		}
	}
	return pwm;
 8000afa:	4b03      	ldr	r3, [pc, #12]	@ (8000b08 <duty_cycle_ramp+0x44>)
 8000afc:	781b      	ldrb	r3, [r3, #0]

}
 8000afe:	4618      	mov	r0, r3
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200000a0 	.word	0x200000a0
 8000b08:	200000a4 	.word	0x200000a4

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <Error_Handler+0x8>

08000b18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END MspInit 0 */

  /* System interrupt init*/

  /* Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b1c:	f000 ff5c 	bl	80019d8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0b      	ldr	r2, [pc, #44]	@ (8000b60 <HAL_TIM_Base_MspInit+0x3c>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d10e      	bne.n	8000b54 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b36:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <HAL_TIM_Base_MspInit+0x40>)
 8000b38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000b3c:	4a09      	ldr	r2, [pc, #36]	@ (8000b64 <HAL_TIM_Base_MspInit+0x40>)
 8000b3e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b42:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000b46:	4b07      	ldr	r3, [pc, #28]	@ (8000b64 <HAL_TIM_Base_MspInit+0x40>)
 8000b48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000b4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	40012c00 	.word	0x40012c00
 8000b64:	44020c00 	.word	0x44020c00

08000b68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a13      	ldr	r2, [pc, #76]	@ (8000bd4 <HAL_TIM_MspPostInit+0x6c>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d11f      	bne.n	8000bca <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b8a:	4b13      	ldr	r3, [pc, #76]	@ (8000bd8 <HAL_TIM_MspPostInit+0x70>)
 8000b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b90:	4a11      	ldr	r2, [pc, #68]	@ (8000bd8 <HAL_TIM_MspPostInit+0x70>)
 8000b92:	f043 0310 	orr.w	r3, r3, #16
 8000b96:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <HAL_TIM_MspPostInit+0x70>)
 8000b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ba0:	f003 0310 	and.w	r3, r3, #16
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ba8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <HAL_TIM_MspPostInit+0x74>)
 8000bc6:	f000 fd91 	bl	80016ec <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bca:	bf00      	nop
 8000bcc:	3720      	adds	r7, #32
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40012c00 	.word	0x40012c00
 8000bd8:	44020c00 	.word	0x44020c00
 8000bdc:	42021000 	.word	0x42021000

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <NMI_Handler+0x4>

08000be8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c36:	f000 fb21 	bl	800127c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000c42:	2000      	movs	r0, #0
 8000c44:	f000 f996 	bl	8000f74 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c52:	4b35      	ldr	r3, [pc, #212]	@ (8000d28 <SystemInit+0xdc>)
 8000c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c58:	4a33      	ldr	r2, [pc, #204]	@ (8000d28 <SystemInit+0xdc>)
 8000c5a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c5e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000c62:	4b32      	ldr	r3, [pc, #200]	@ (8000d2c <SystemInit+0xe0>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000c68:	4b30      	ldr	r3, [pc, #192]	@ (8000d2c <SystemInit+0xe0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d2c <SystemInit+0xe0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000c74:	4b2d      	ldr	r3, [pc, #180]	@ (8000d2c <SystemInit+0xe0>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	492c      	ldr	r1, [pc, #176]	@ (8000d2c <SystemInit+0xe0>)
 8000c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d30 <SystemInit+0xe4>)
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000c80:	4b2a      	ldr	r3, [pc, #168]	@ (8000d2c <SystemInit+0xe0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000c86:	4b29      	ldr	r3, [pc, #164]	@ (8000d2c <SystemInit+0xe0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000c8c:	4b27      	ldr	r3, [pc, #156]	@ (8000d2c <SystemInit+0xe0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000c92:	4b26      	ldr	r3, [pc, #152]	@ (8000d2c <SystemInit+0xe0>)
 8000c94:	4a27      	ldr	r2, [pc, #156]	@ (8000d34 <SystemInit+0xe8>)
 8000c96:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000c98:	4b24      	ldr	r3, [pc, #144]	@ (8000d2c <SystemInit+0xe0>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000c9e:	4b23      	ldr	r3, [pc, #140]	@ (8000d2c <SystemInit+0xe0>)
 8000ca0:	4a24      	ldr	r2, [pc, #144]	@ (8000d34 <SystemInit+0xe8>)
 8000ca2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000ca4:	4b21      	ldr	r3, [pc, #132]	@ (8000d2c <SystemInit+0xe0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000caa:	4b20      	ldr	r3, [pc, #128]	@ (8000d2c <SystemInit+0xe0>)
 8000cac:	4a21      	ldr	r2, [pc, #132]	@ (8000d34 <SystemInit+0xe8>)
 8000cae:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d2c <SystemInit+0xe0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <SystemInit+0xe0>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a1c      	ldr	r2, [pc, #112]	@ (8000d2c <SystemInit+0xe0>)
 8000cbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cc0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d2c <SystemInit+0xe0>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cc8:	4b17      	ldr	r3, [pc, #92]	@ (8000d28 <SystemInit+0xdc>)
 8000cca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000cce:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000cd0:	4b19      	ldr	r3, [pc, #100]	@ (8000d38 <SystemInit+0xec>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000cd8:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000ce0:	d003      	beq.n	8000cea <SystemInit+0x9e>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000ce8:	d117      	bne.n	8000d1a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000cea:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <SystemInit+0xec>)
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d005      	beq.n	8000d02 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <SystemInit+0xec>)
 8000cf8:	4a10      	ldr	r2, [pc, #64]	@ (8000d3c <SystemInit+0xf0>)
 8000cfa:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <SystemInit+0xec>)
 8000cfe:	4a10      	ldr	r2, [pc, #64]	@ (8000d40 <SystemInit+0xf4>)
 8000d00:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000d02:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <SystemInit+0xec>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	4a0c      	ldr	r2, [pc, #48]	@ (8000d38 <SystemInit+0xec>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <SystemInit+0xec>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	4a09      	ldr	r2, [pc, #36]	@ (8000d38 <SystemInit+0xec>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	61d3      	str	r3, [r2, #28]
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00
 8000d2c:	44020c00 	.word	0x44020c00
 8000d30:	eae2eae3 	.word	0xeae2eae3
 8000d34:	01010280 	.word	0x01010280
 8000d38:	40022000 	.word	0x40022000
 8000d3c:	08192a3b 	.word	0x08192a3b
 8000d40:	4c5d6e7f 	.word	0x4c5d6e7f

08000d44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d44:	480d      	ldr	r0, [pc, #52]	@ (8000d7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d46:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d48:	f7ff ff80 	bl	8000c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d4c:	480c      	ldr	r0, [pc, #48]	@ (8000d80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d4e:	490d      	ldr	r1, [pc, #52]	@ (8000d84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d50:	4a0d      	ldr	r2, [pc, #52]	@ (8000d88 <LoopForever+0xe>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a0a      	ldr	r2, [pc, #40]	@ (8000d8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d64:	4c0a      	ldr	r4, [pc, #40]	@ (8000d90 <LoopForever+0x16>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d72:	f006 fd3f 	bl	80077f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d76:	f7ff fc47 	bl	8000608 <main>

08000d7a <LoopForever>:

LoopForever:
    b LoopForever
 8000d7a:	e7fe      	b.n	8000d7a <LoopForever>
  ldr   r0, =_estack
 8000d7c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000d88:	080078a0 	.word	0x080078a0
  ldr r2, =_sbss
 8000d8c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000d90:	2000014c 	.word	0x2000014c

08000d94 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC1_IRQHandler>
	...

08000d98 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08c      	sub	sp, #48	@ 0x30
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d009      	beq.n	8000dc0 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d006      	beq.n	8000dc0 <BSP_LED_Init+0x28>
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d003      	beq.n	8000dc0 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000db8:	f06f 0301 	mvn.w	r3, #1
 8000dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000dbe:	e055      	b.n	8000e6c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d10f      	bne.n	8000de6 <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 8000dc6:	4b2c      	ldr	r3, [pc, #176]	@ (8000e78 <BSP_LED_Init+0xe0>)
 8000dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dcc:	4a2a      	ldr	r2, [pc, #168]	@ (8000e78 <BSP_LED_Init+0xe0>)
 8000dce:	f043 0320 	orr.w	r3, r3, #32
 8000dd2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dd6:	4b28      	ldr	r3, [pc, #160]	@ (8000e78 <BSP_LED_Init+0xe0>)
 8000dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ddc:	f003 0320 	and.w	r3, r3, #32
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	e021      	b.n	8000e2a <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d10f      	bne.n	8000e0c <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8000dec:	4b22      	ldr	r3, [pc, #136]	@ (8000e78 <BSP_LED_Init+0xe0>)
 8000dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000df2:	4a21      	ldr	r2, [pc, #132]	@ (8000e78 <BSP_LED_Init+0xe0>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e78 <BSP_LED_Init+0xe0>)
 8000dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	e00e      	b.n	8000e2a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e78 <BSP_LED_Init+0xe0>)
 8000e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e12:	4a19      	ldr	r2, [pc, #100]	@ (8000e78 <BSP_LED_Init+0xe0>)
 8000e14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e18:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e1c:	4b16      	ldr	r3, [pc, #88]	@ (8000e78 <BSP_LED_Init+0xe0>)
 8000e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	4a13      	ldr	r2, [pc, #76]	@ (8000e7c <BSP_LED_Init+0xe4>)
 8000e2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e32:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	4a0f      	ldr	r2, [pc, #60]	@ (8000e80 <BSP_LED_Init+0xe8>)
 8000e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e48:	f107 0218 	add.w	r2, r7, #24
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 fc4c 	bl	80016ec <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	4a0a      	ldr	r2, [pc, #40]	@ (8000e80 <BSP_LED_Init+0xe8>)
 8000e58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	4a07      	ldr	r2, [pc, #28]	@ (8000e7c <BSP_LED_Init+0xe4>)
 8000e60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e64:	2200      	movs	r2, #0
 8000e66:	4619      	mov	r1, r3
 8000e68:	f000 fd9e 	bl	80019a8 <HAL_GPIO_WritePin>
  }

  return ret;
 8000e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3730      	adds	r7, #48	@ 0x30
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	44020c00 	.word	0x44020c00
 8000e7c:	0800786c 	.word	0x0800786c
 8000e80:	20000008 	.word	0x20000008

08000e84 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	460a      	mov	r2, r1
 8000e8e:	71fb      	strb	r3, [r7, #7]
 8000e90:	4613      	mov	r3, r2
 8000e92:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000e94:	4b30      	ldr	r3, [pc, #192]	@ (8000f58 <BSP_PB_Init+0xd4>)
 8000e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e9a:	4a2f      	ldr	r2, [pc, #188]	@ (8000f58 <BSP_PB_Init+0xd4>)
 8000e9c:	f043 0304 	orr.w	r3, r3, #4
 8000ea0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f58 <BSP_PB_Init+0xd4>)
 8000ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000eb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eb6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000ec0:	79bb      	ldrb	r3, [r7, #6]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10c      	bne.n	8000ee0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	4a23      	ldr	r2, [pc, #140]	@ (8000f5c <BSP_PB_Init+0xd8>)
 8000ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed2:	f107 020c 	add.w	r2, r7, #12
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 fc07 	bl	80016ec <HAL_GPIO_Init>
 8000ede:	e036      	b.n	8000f4e <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f60 <BSP_PB_Init+0xdc>)
 8000ee2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	4a1d      	ldr	r2, [pc, #116]	@ (8000f5c <BSP_PB_Init+0xd8>)
 8000ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eec:	f107 020c 	add.w	r2, r7, #12
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 fbfa 	bl	80016ec <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000ef8:	79fa      	ldrb	r2, [r7, #7]
 8000efa:	4613      	mov	r3, r2
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	4413      	add	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4a18      	ldr	r2, [pc, #96]	@ (8000f64 <BSP_PB_Init+0xe0>)
 8000f04:	441a      	add	r2, r3
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	4917      	ldr	r1, [pc, #92]	@ (8000f68 <BSP_PB_Init+0xe4>)
 8000f0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4610      	mov	r0, r2
 8000f12:	f000 fb8f 	bl	8001634 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000f16:	79fa      	ldrb	r2, [r7, #7]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4a10      	ldr	r2, [pc, #64]	@ (8000f64 <BSP_PB_Init+0xe0>)
 8000f22:	1898      	adds	r0, r3, r2
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	4a11      	ldr	r2, [pc, #68]	@ (8000f6c <BSP_PB_Init+0xe8>)
 8000f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	f000 fb54 	bl	80015dc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000f34:	2018      	movs	r0, #24
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	4a0d      	ldr	r2, [pc, #52]	@ (8000f70 <BSP_PB_Init+0xec>)
 8000f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	4619      	mov	r1, r3
 8000f42:	f000 fa73 	bl	800142c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000f46:	2318      	movs	r3, #24
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 fa89 	bl	8001460 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3720      	adds	r7, #32
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	44020c00 	.word	0x44020c00
 8000f5c:	20000014 	.word	0x20000014
 8000f60:	10110000 	.word	0x10110000
 8000f64:	200000a8 	.word	0x200000a8
 8000f68:	08007874 	.word	0x08007874
 8000f6c:	20000018 	.word	0x20000018
 8000f70:	2000001c 	.word	0x2000001c

08000f74 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000f7e:	79fa      	ldrb	r2, [r7, #7]
 8000f80:	4613      	mov	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4a04      	ldr	r2, [pc, #16]	@ (8000f9c <BSP_PB_IRQHandler+0x28>)
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fb65 	bl	800165c <HAL_EXTI_IRQHandler>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200000a8 	.word	0x200000a8

08000fa0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000fce:	f06f 0301 	mvn.w	r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	e018      	b.n	8001008 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2294      	movs	r2, #148	@ 0x94
 8000fda:	fb02 f303 	mul.w	r3, r2, r3
 8000fde:	4a0d      	ldr	r2, [pc, #52]	@ (8001014 <BSP_COM_Init+0x5c>)
 8000fe0:	4413      	add	r3, r2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f854 	bl	8001090 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	2294      	movs	r2, #148	@ 0x94
 8000fec:	fb02 f303 	mul.w	r3, r2, r3
 8000ff0:	4a08      	ldr	r2, [pc, #32]	@ (8001014 <BSP_COM_Init+0x5c>)
 8000ff2:	4413      	add	r3, r2
 8000ff4:	6839      	ldr	r1, [r7, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f80e 	bl	8001018 <MX_USART_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001002:	f06f 0303 	mvn.w	r3, #3
 8001006:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001008:	68fb      	ldr	r3, [r7, #12]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200000b4 	.word	0x200000b4

08001018 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001022:	4b16      	ldr	r3, [pc, #88]	@ (800107c <MX_USART_Init+0x64>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	220c      	movs	r2, #12
 8001036:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	895b      	ldrh	r3, [r3, #10]
 800103c:	461a      	mov	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	891b      	ldrh	r3, [r3, #8]
 800104e:	461a      	mov	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	899b      	ldrh	r3, [r3, #12]
 8001058:	461a      	mov	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001064:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f005 ff51 	bl	8006f14 <HAL_UART_Init>
 8001072:	4603      	mov	r3, r0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000004 	.word	0x20000004

08001080 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001084:	2000      	movs	r0, #0
 8001086:	f7ff ff8b 	bl	8000fa0 <BSP_PB_Callback>
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	@ 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001098:	4b27      	ldr	r3, [pc, #156]	@ (8001138 <COM1_MspInit+0xa8>)
 800109a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800109e:	4a26      	ldr	r2, [pc, #152]	@ (8001138 <COM1_MspInit+0xa8>)
 80010a0:	f043 0308 	orr.w	r3, r3, #8
 80010a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010a8:	4b23      	ldr	r3, [pc, #140]	@ (8001138 <COM1_MspInit+0xa8>)
 80010aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80010b6:	4b20      	ldr	r3, [pc, #128]	@ (8001138 <COM1_MspInit+0xa8>)
 80010b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001138 <COM1_MspInit+0xa8>)
 80010be:	f043 0308 	orr.w	r3, r3, #8
 80010c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001138 <COM1_MspInit+0xa8>)
 80010c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80010d4:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <COM1_MspInit+0xa8>)
 80010d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80010da:	4a17      	ldr	r2, [pc, #92]	@ (8001138 <COM1_MspInit+0xa8>)
 80010dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010e0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80010e4:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <COM1_MspInit+0xa8>)
 80010e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80010ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80010f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010f6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80010fc:	2302      	movs	r3, #2
 80010fe:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001100:	2301      	movs	r3, #1
 8001102:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001104:	2307      	movs	r3, #7
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	480b      	ldr	r0, [pc, #44]	@ (800113c <COM1_MspInit+0xac>)
 8001110:	f000 faec 	bl	80016ec <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001114:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001118:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800111e:	2307      	movs	r3, #7
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	4804      	ldr	r0, [pc, #16]	@ (800113c <COM1_MspInit+0xac>)
 800112a:	f000 fadf 	bl	80016ec <HAL_GPIO_Init>
}
 800112e:	bf00      	nop
 8001130:	3728      	adds	r7, #40	@ 0x28
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	44020c00 	.word	0x44020c00
 800113c:	42020c00 	.word	0x42020c00

08001140 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001144:	2003      	movs	r0, #3
 8001146:	f000 f966 	bl	8001416 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800114a:	f001 fa45 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 800114e:	4602      	mov	r2, r0
 8001150:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <HAL_Init+0x44>)
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	f003 030f 	and.w	r3, r3, #15
 8001158:	490b      	ldr	r1, [pc, #44]	@ (8001188 <HAL_Init+0x48>)
 800115a:	5ccb      	ldrb	r3, [r1, r3]
 800115c:	fa22 f303 	lsr.w	r3, r2, r3
 8001160:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <HAL_Init+0x4c>)
 8001162:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001164:	2004      	movs	r0, #4
 8001166:	f000 f9ab 	bl	80014c0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800116a:	200f      	movs	r0, #15
 800116c:	f000 f810 	bl	8001190 <HAL_InitTick>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e002      	b.n	8001180 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800117a:	f7ff fccd 	bl	8000b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	bd80      	pop	{r7, pc}
 8001184:	44020c00 	.word	0x44020c00
 8001188:	08007854 	.word	0x08007854
 800118c:	20000000 	.word	0x20000000

08001190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800119c:	4b33      	ldr	r3, [pc, #204]	@ (800126c <HAL_InitTick+0xdc>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e05c      	b.n	8001262 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80011a8:	4b31      	ldr	r3, [pc, #196]	@ (8001270 <HAL_InitTick+0xe0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	d10c      	bne.n	80011ce <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80011b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001274 <HAL_InitTick+0xe4>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b2c      	ldr	r3, [pc, #176]	@ (800126c <HAL_InitTick+0xdc>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	e037      	b.n	800123e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80011ce:	f000 f9cf 	bl	8001570 <HAL_SYSTICK_GetCLKSourceConfig>
 80011d2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d023      	beq.n	8001222 <HAL_InitTick+0x92>
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d82d      	bhi.n	800123c <HAL_InitTick+0xac>
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_InitTick+0x5e>
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d00d      	beq.n	8001208 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80011ec:	e026      	b.n	800123c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80011ee:	4b21      	ldr	r3, [pc, #132]	@ (8001274 <HAL_InitTick+0xe4>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b1e      	ldr	r3, [pc, #120]	@ (800126c <HAL_InitTick+0xdc>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	4619      	mov	r1, r3
 80011f8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80011fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8001200:	fbb2 f3f3 	udiv	r3, r2, r3
 8001204:	60fb      	str	r3, [r7, #12]
        break;
 8001206:	e01a      	b.n	800123e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001208:	4b18      	ldr	r3, [pc, #96]	@ (800126c <HAL_InitTick+0xdc>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001212:	fbb3 f3f2 	udiv	r3, r3, r2
 8001216:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	60fb      	str	r3, [r7, #12]
        break;
 8001220:	e00d      	b.n	800123e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001222:	4b12      	ldr	r3, [pc, #72]	@ (800126c <HAL_InitTick+0xdc>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001230:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001234:	fbb2 f3f3 	udiv	r3, r2, r3
 8001238:	60fb      	str	r3, [r7, #12]
        break;
 800123a:	e000      	b.n	800123e <HAL_InitTick+0xae>
        break;
 800123c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f000 f91c 	bl	800147c <HAL_SYSTICK_Config>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e009      	b.n	8001262 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800124e:	2200      	movs	r2, #0
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	f04f 30ff 	mov.w	r0, #4294967295
 8001256:	f000 f8e9 	bl	800142c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800125a:	4a07      	ldr	r2, [pc, #28]	@ (8001278 <HAL_InitTick+0xe8>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000024 	.word	0x20000024
 8001270:	e000e010 	.word	0xe000e010
 8001274:	20000000 	.word	0x20000000
 8001278:	20000020 	.word	0x20000020

0800127c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <HAL_IncTick+0x20>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <HAL_IncTick+0x24>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4413      	add	r3, r2
 800128c:	4a04      	ldr	r2, [pc, #16]	@ (80012a0 <HAL_IncTick+0x24>)
 800128e:	6013      	str	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20000024 	.word	0x20000024
 80012a0:	20000148 	.word	0x20000148

080012a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return uwTick;
 80012a8:	4b03      	ldr	r3, [pc, #12]	@ (80012b8 <HAL_GetTick+0x14>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000148 	.word	0x20000148

080012bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ee:	4a04      	ldr	r2, [pc, #16]	@ (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	60d3      	str	r3, [r2, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b04      	ldr	r3, [pc, #16]	@ (800131c <__NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800132a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132e:	2b00      	cmp	r3, #0
 8001330:	db0b      	blt.n	800134a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	f003 021f 	and.w	r2, r3, #31
 8001338:	4907      	ldr	r1, [pc, #28]	@ (8001358 <__NVIC_EnableIRQ+0x38>)
 800133a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800133e:	095b      	lsrs	r3, r3, #5
 8001340:	2001      	movs	r0, #1
 8001342:	fa00 f202 	lsl.w	r2, r0, r2
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000e100 	.word	0xe000e100

0800135c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001368:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136c:	2b00      	cmp	r3, #0
 800136e:	db0a      	blt.n	8001386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	490c      	ldr	r1, [pc, #48]	@ (80013a8 <__NVIC_SetPriority+0x4c>)
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	440b      	add	r3, r1
 8001380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001384:	e00a      	b.n	800139c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4908      	ldr	r1, [pc, #32]	@ (80013ac <__NVIC_SetPriority+0x50>)
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	3b04      	subs	r3, #4
 8001394:	0112      	lsls	r2, r2, #4
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	440b      	add	r3, r1
 800139a:	761a      	strb	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	@ 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f1c3 0307 	rsb	r3, r3, #7
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	bf28      	it	cs
 80013ce:	2304      	movcs	r3, #4
 80013d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3304      	adds	r3, #4
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d902      	bls.n	80013e0 <NVIC_EncodePriority+0x30>
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3b03      	subs	r3, #3
 80013de:	e000      	b.n	80013e2 <NVIC_EncodePriority+0x32>
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	f04f 32ff 	mov.w	r2, #4294967295
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	43d9      	mvns	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	4313      	orrs	r3, r2
         );
}
 800140a:	4618      	mov	r0, r3
 800140c:	3724      	adds	r7, #36	@ 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ff4c 	bl	80012bc <__NVIC_SetPriorityGrouping>
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
 8001438:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800143a:	f7ff ff63 	bl	8001304 <__NVIC_GetPriorityGrouping>
 800143e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	68b9      	ldr	r1, [r7, #8]
 8001444:	6978      	ldr	r0, [r7, #20]
 8001446:	f7ff ffb3 	bl	80013b0 <NVIC_EncodePriority>
 800144a:	4602      	mov	r2, r0
 800144c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001450:	4611      	mov	r1, r2
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ff82 	bl	800135c <__NVIC_SetPriority>
}
 8001458:	bf00      	nop
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800146a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ff56 	bl	8001320 <__NVIC_EnableIRQ>
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800148c:	d301      	bcc.n	8001492 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800148e:	2301      	movs	r3, #1
 8001490:	e00d      	b.n	80014ae <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001492:	4a0a      	ldr	r2, [pc, #40]	@ (80014bc <HAL_SYSTICK_Config+0x40>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800149a:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <HAL_SYSTICK_Config+0x40>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_SYSTICK_Config+0x40>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a05      	ldr	r2, [pc, #20]	@ (80014bc <HAL_SYSTICK_Config+0x40>)
 80014a6:	f043 0303 	orr.w	r3, r3, #3
 80014aa:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000e010 	.word	0xe000e010

080014c0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d844      	bhi.n	8001558 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80014ce:	a201      	add	r2, pc, #4	@ (adr r2, 80014d4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80014d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d4:	080014f7 	.word	0x080014f7
 80014d8:	08001515 	.word	0x08001515
 80014dc:	08001537 	.word	0x08001537
 80014e0:	08001559 	.word	0x08001559
 80014e4:	080014e9 	.word	0x080014e9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80014e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001568 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001568 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014ee:	f043 0304 	orr.w	r3, r3, #4
 80014f2:	6013      	str	r3, [r2, #0]
      break;
 80014f4:	e031      	b.n	800155a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80014f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001568 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001568 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014fc:	f023 0304 	bic.w	r3, r3, #4
 8001500:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001502:	4b1a      	ldr	r3, [pc, #104]	@ (800156c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001504:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001508:	4a18      	ldr	r2, [pc, #96]	@ (800156c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800150a:	f023 030c 	bic.w	r3, r3, #12
 800150e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001512:	e022      	b.n	800155a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001514:	4b14      	ldr	r3, [pc, #80]	@ (8001568 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a13      	ldr	r2, [pc, #76]	@ (8001568 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800151a:	f023 0304 	bic.w	r3, r3, #4
 800151e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001522:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001526:	f023 030c 	bic.w	r3, r3, #12
 800152a:	4a10      	ldr	r2, [pc, #64]	@ (800156c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001534:	e011      	b.n	800155a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001536:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a0b      	ldr	r2, [pc, #44]	@ (8001568 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800153c:	f023 0304 	bic.w	r3, r3, #4
 8001540:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001542:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001544:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001548:	f023 030c 	bic.w	r3, r3, #12
 800154c:	4a07      	ldr	r2, [pc, #28]	@ (800156c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800154e:	f043 0308 	orr.w	r3, r3, #8
 8001552:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001556:	e000      	b.n	800155a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001558:	bf00      	nop
  }
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	e000e010 	.word	0xe000e010
 800156c:	44020c00 	.word	0x44020c00

08001570 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001576:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	2b00      	cmp	r3, #0
 8001580:	d002      	beq.n	8001588 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001582:	2304      	movs	r3, #4
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	e01e      	b.n	80015c6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001588:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800158a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	2b08      	cmp	r3, #8
 8001598:	d00f      	beq.n	80015ba <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	2b08      	cmp	r3, #8
 800159e:	d80f      	bhi.n	80015c0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d003      	beq.n	80015b4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80015ac:	e008      	b.n	80015c0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
        break;
 80015b2:	e008      	b.n	80015c6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80015b4:	2301      	movs	r3, #1
 80015b6:	607b      	str	r3, [r7, #4]
        break;
 80015b8:	e005      	b.n	80015c6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80015ba:	2302      	movs	r3, #2
 80015bc:	607b      	str	r3, [r7, #4]
        break;
 80015be:	e002      	b.n	80015c6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80015c0:	2300      	movs	r3, #0
 80015c2:	607b      	str	r3, [r7, #4]
        break;
 80015c4:	bf00      	nop
    }
  }
  return systick_source;
 80015c6:	687b      	ldr	r3, [r7, #4]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000e010 	.word	0xe000e010
 80015d8:	44020c00 	.word	0x44020c00

080015dc <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	460b      	mov	r3, r1
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80015ee:	7afb      	ldrb	r3, [r7, #11]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d011      	beq.n	8001618 <HAL_EXTI_RegisterCallback+0x3c>
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	dc13      	bgt.n	8001620 <HAL_EXTI_RegisterCallback+0x44>
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <HAL_EXTI_RegisterCallback+0x26>
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d007      	beq.n	8001610 <HAL_EXTI_RegisterCallback+0x34>
 8001600:	e00e      	b.n	8001620 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	609a      	str	r2, [r3, #8]
      break;
 800160e:	e00a      	b.n	8001626 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	605a      	str	r2, [r3, #4]
      break;
 8001616:	e006      	b.n	8001626 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	609a      	str	r2, [r3, #8]
      break;
 800161e:	e002      	b.n	8001626 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	75fb      	strb	r3, [r7, #23]
      break;
 8001624:	bf00      	nop
  }

  return status;
 8001626:	7dfb      	ldrb	r3, [r7, #23]
}
 8001628:	4618      	mov	r0, r3
 800162a:	371c      	adds	r7, #28
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e003      	b.n	8001650 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800164e:	2300      	movs	r3, #0
  }
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	0c1b      	lsrs	r3, r3, #16
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 031f 	and.w	r3, r3, #31
 8001678:	2201      	movs	r2, #1
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	015a      	lsls	r2, r3, #5
 8001684:	4b17      	ldr	r3, [pc, #92]	@ (80016e4 <HAL_EXTI_IRQHandler+0x88>)
 8001686:	4413      	add	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d009      	beq.n	80016ae <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d002      	beq.n	80016ae <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	015a      	lsls	r2, r3, #5
 80016b2:	4b0d      	ldr	r3, [pc, #52]	@ (80016e8 <HAL_EXTI_IRQHandler+0x8c>)
 80016b4:	4413      	add	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d009      	beq.n	80016dc <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d002      	beq.n	80016dc <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	4798      	blx	r3
    }
  }
}
 80016dc:	bf00      	nop
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	4402200c 	.word	0x4402200c
 80016e8:	44022010 	.word	0x44022010

080016ec <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80016fa:	e142      	b.n	8001982 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	2101      	movs	r1, #1
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	fa01 f303 	lsl.w	r3, r1, r3
 8001708:	4013      	ands	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 8134 	beq.w	800197c <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x38>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b12      	cmp	r3, #18
 8001722:	d125      	bne.n	8001770 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	08da      	lsrs	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3208      	adds	r2, #8
 800172c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001730:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	220f      	movs	r2, #15
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	4013      	ands	r3, r2
 8001746:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	f003 020f 	and.w	r2, r3, #15
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	4313      	orrs	r3, r2
 8001760:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	08da      	lsrs	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3208      	adds	r2, #8
 800176a:	6979      	ldr	r1, [r7, #20]
 800176c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	4013      	ands	r3, r2
 8001786:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0203 	and.w	r2, r3, #3
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	4313      	orrs	r3, r2
 800179c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d00b      	beq.n	80017c4 <HAL_GPIO_Init+0xd8>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d007      	beq.n	80017c4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017b8:	2b11      	cmp	r3, #17
 80017ba:	d003      	beq.n	80017c4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b12      	cmp	r3, #18
 80017c2:	d130      	bne.n	8001826 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	2203      	movs	r2, #3
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	4013      	ands	r3, r2
 80017da:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	68da      	ldr	r2, [r3, #12]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017fa:	2201      	movs	r2, #1
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	4013      	ands	r3, r2
 8001808:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	091b      	lsrs	r3, r3, #4
 8001810:	f003 0201 	and.w	r2, r3, #1
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	4313      	orrs	r3, r2
 800181e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	2b03      	cmp	r3, #3
 8001830:	d109      	bne.n	8001846 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 800183a:	2b03      	cmp	r3, #3
 800183c:	d11b      	bne.n	8001876 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d017      	beq.n	8001876 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	4013      	ands	r3, r2
 800185c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	4313      	orrs	r3, r2
 800186e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d07c      	beq.n	800197c <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001882:	4a47      	ldr	r2, [pc, #284]	@ (80019a0 <HAL_GPIO_Init+0x2b4>)
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	3318      	adds	r3, #24
 800188a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	220f      	movs	r2, #15
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	4013      	ands	r3, r2
 80018a4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	0a9a      	lsrs	r2, r3, #10
 80018aa:	4b3e      	ldr	r3, [pc, #248]	@ (80019a4 <HAL_GPIO_Init+0x2b8>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	f002 0203 	and.w	r2, r2, #3
 80018b4:	00d2      	lsls	r2, r2, #3
 80018b6:	4093      	lsls	r3, r2
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80018be:	4938      	ldr	r1, [pc, #224]	@ (80019a0 <HAL_GPIO_Init+0x2b4>)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3318      	adds	r3, #24
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80018cc:	4b34      	ldr	r3, [pc, #208]	@ (80019a0 <HAL_GPIO_Init+0x2b4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4013      	ands	r3, r2
 80018da:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80018f0:	4a2b      	ldr	r2, [pc, #172]	@ (80019a0 <HAL_GPIO_Init+0x2b4>)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80018f6:	4b2a      	ldr	r3, [pc, #168]	@ (80019a0 <HAL_GPIO_Init+0x2b4>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	43db      	mvns	r3, r3
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	4013      	ands	r3, r2
 8001904:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4313      	orrs	r3, r2
 8001918:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800191a:	4a21      	ldr	r2, [pc, #132]	@ (80019a0 <HAL_GPIO_Init+0x2b4>)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001920:	4b1f      	ldr	r3, [pc, #124]	@ (80019a0 <HAL_GPIO_Init+0x2b4>)
 8001922:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001926:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	43db      	mvns	r3, r3
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	4013      	ands	r3, r2
 8001930:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001946:	4a16      	ldr	r2, [pc, #88]	@ (80019a0 <HAL_GPIO_Init+0x2b4>)
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800194e:	4b14      	ldr	r3, [pc, #80]	@ (80019a0 <HAL_GPIO_Init+0x2b4>)
 8001950:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001954:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	43db      	mvns	r3, r3
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	4013      	ands	r3, r2
 800195e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	4313      	orrs	r3, r2
 8001972:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001974:	4a0a      	ldr	r2, [pc, #40]	@ (80019a0 <HAL_GPIO_Init+0x2b4>)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	3301      	adds	r3, #1
 8001980:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	fa22 f303 	lsr.w	r3, r2, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	f47f aeb5 	bne.w	80016fc <HAL_GPIO_Init+0x10>
  }
}
 8001992:	bf00      	nop
 8001994:	bf00      	nop
 8001996:	371c      	adds	r7, #28
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	44022000 	.word	0x44022000
 80019a4:	002f7f7f 	.word	0x002f7f7f

080019a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	807b      	strh	r3, [r7, #2]
 80019b4:	4613      	mov	r3, r2
 80019b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019b8:	787b      	ldrb	r3, [r7, #1]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019be:	887a      	ldrh	r2, [r7, #2]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019c4:	e002      	b.n	80019cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019c6:	887a      	ldrh	r2, [r7, #2]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80019dc:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80019de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e0:	4a04      	ldr	r2, [pc, #16]	@ (80019f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	44020800 	.word	0x44020800

080019f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d102      	bne.n	8001a0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	f000 bc28 	b.w	800225c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a0c:	4b94      	ldr	r3, [pc, #592]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	f003 0318 	and.w	r3, r3, #24
 8001a14:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001a16:	4b92      	ldr	r3, [pc, #584]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0310 	and.w	r3, r3, #16
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d05b      	beq.n	8001ae4 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d005      	beq.n	8001a3e <HAL_RCC_OscConfig+0x46>
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	2b18      	cmp	r3, #24
 8001a36:	d114      	bne.n	8001a62 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d111      	bne.n	8001a62 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d102      	bne.n	8001a4c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f000 bc08 	b.w	800225c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001a4c:	4b84      	ldr	r3, [pc, #528]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	041b      	lsls	r3, r3, #16
 8001a5a:	4981      	ldr	r1, [pc, #516]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001a60:	e040      	b.n	8001ae4 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d023      	beq.n	8001ab2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a6a:	4b7d      	ldr	r3, [pc, #500]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a7c      	ldr	r2, [pc, #496]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a76:	f7ff fc15 	bl	80012a4 <HAL_GetTick>
 8001a7a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001a7e:	f7ff fc11 	bl	80012a4 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e3e5      	b.n	800225c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001a90:	4b73      	ldr	r3, [pc, #460]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001a9c:	4b70      	ldr	r3, [pc, #448]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	041b      	lsls	r3, r3, #16
 8001aaa:	496d      	ldr	r1, [pc, #436]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	618b      	str	r3, [r1, #24]
 8001ab0:	e018      	b.n	8001ae4 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ab2:	4b6b      	ldr	r3, [pc, #428]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a6a      	ldr	r2, [pc, #424]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001ab8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abe:	f7ff fbf1 	bl	80012a4 <HAL_GetTick>
 8001ac2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001ac6:	f7ff fbed 	bl	80012a4 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e3c1      	b.n	800225c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001ad8:	4b61      	ldr	r3, [pc, #388]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f0      	bne.n	8001ac6 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 80a0 	beq.w	8001c32 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	2b10      	cmp	r3, #16
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_OscConfig+0x10c>
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	2b18      	cmp	r3, #24
 8001afc:	d109      	bne.n	8001b12 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	d106      	bne.n	8001b12 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f040 8092 	bne.w	8001c32 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e3a4      	b.n	800225c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b1a:	d106      	bne.n	8001b2a <HAL_RCC_OscConfig+0x132>
 8001b1c:	4b50      	ldr	r3, [pc, #320]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a4f      	ldr	r2, [pc, #316]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001b22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	e058      	b.n	8001bdc <HAL_RCC_OscConfig+0x1e4>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d112      	bne.n	8001b58 <HAL_RCC_OscConfig+0x160>
 8001b32:	4b4b      	ldr	r3, [pc, #300]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a4a      	ldr	r2, [pc, #296]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001b38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	4b48      	ldr	r3, [pc, #288]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a47      	ldr	r2, [pc, #284]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001b44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	4b45      	ldr	r3, [pc, #276]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a44      	ldr	r2, [pc, #272]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001b50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	e041      	b.n	8001bdc <HAL_RCC_OscConfig+0x1e4>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b60:	d112      	bne.n	8001b88 <HAL_RCC_OscConfig+0x190>
 8001b62:	4b3f      	ldr	r3, [pc, #252]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a3e      	ldr	r2, [pc, #248]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001b68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a3b      	ldr	r2, [pc, #236]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001b74:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b39      	ldr	r3, [pc, #228]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a38      	ldr	r2, [pc, #224]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e029      	b.n	8001bdc <HAL_RCC_OscConfig+0x1e4>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001b90:	d112      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x1c0>
 8001b92:	4b33      	ldr	r3, [pc, #204]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a32      	ldr	r2, [pc, #200]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001b98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4b30      	ldr	r3, [pc, #192]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a2f      	ldr	r2, [pc, #188]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001ba4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	4b2d      	ldr	r3, [pc, #180]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a2c      	ldr	r2, [pc, #176]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e011      	b.n	8001bdc <HAL_RCC_OscConfig+0x1e4>
 8001bb8:	4b29      	ldr	r3, [pc, #164]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a28      	ldr	r2, [pc, #160]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001bbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b26      	ldr	r3, [pc, #152]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a25      	ldr	r2, [pc, #148]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001bca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b23      	ldr	r3, [pc, #140]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a22      	ldr	r2, [pc, #136]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001bd6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d013      	beq.n	8001c0c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7ff fb5e 	bl	80012a4 <HAL_GetTick>
 8001be8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001bec:	f7ff fb5a 	bl	80012a4 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	@ 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e32e      	b.n	800225c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bfe:	4b18      	ldr	r3, [pc, #96]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x1f4>
 8001c0a:	e012      	b.n	8001c32 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fb4a 	bl	80012a4 <HAL_GetTick>
 8001c10:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001c14:	f7ff fb46 	bl	80012a4 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	@ 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e31a      	b.n	800225c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c26:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 809a 	beq.w	8001d74 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d005      	beq.n	8001c52 <HAL_RCC_OscConfig+0x25a>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	2b18      	cmp	r3, #24
 8001c4a:	d149      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d146      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d104      	bne.n	8001c64 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e2fe      	b.n	800225c <HAL_RCC_OscConfig+0x864>
 8001c5e:	bf00      	nop
 8001c60:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d11c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001c6a:	4b9a      	ldr	r3, [pc, #616]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0218 	and.w	r2, r3, #24
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d014      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001c7a:	4b96      	ldr	r3, [pc, #600]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 0218 	bic.w	r2, r3, #24
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	4993      	ldr	r1, [pc, #588]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001c8c:	f000 fdd0 	bl	8002830 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c90:	4b91      	ldr	r3, [pc, #580]	@ (8001ed8 <HAL_RCC_OscConfig+0x4e0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fa7b 	bl	8001190 <HAL_InitTick>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e2db      	b.n	800225c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fafe 	bl	80012a4 <HAL_GetTick>
 8001ca8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001cac:	f7ff fafa 	bl	80012a4 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e2ce      	b.n	800225c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cbe:	4b85      	ldr	r3, [pc, #532]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001cca:	4b82      	ldr	r3, [pc, #520]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	041b      	lsls	r3, r3, #16
 8001cd8:	497e      	ldr	r1, [pc, #504]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001cde:	e049      	b.n	8001d74 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d02c      	beq.n	8001d42 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001ce8:	4b7a      	ldr	r3, [pc, #488]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f023 0218 	bic.w	r2, r3, #24
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	4977      	ldr	r1, [pc, #476]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001cfa:	4b76      	ldr	r3, [pc, #472]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a75      	ldr	r2, [pc, #468]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d06:	f7ff facd 	bl	80012a4 <HAL_GetTick>
 8001d0a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001d0e:	f7ff fac9 	bl	80012a4 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e29d      	b.n	800225c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d20:	4b6c      	ldr	r3, [pc, #432]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001d2c:	4b69      	ldr	r3, [pc, #420]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	041b      	lsls	r3, r3, #16
 8001d3a:	4966      	ldr	r1, [pc, #408]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	610b      	str	r3, [r1, #16]
 8001d40:	e018      	b.n	8001d74 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d42:	4b64      	ldr	r3, [pc, #400]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a63      	ldr	r2, [pc, #396]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001d48:	f023 0301 	bic.w	r3, r3, #1
 8001d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4e:	f7ff faa9 	bl	80012a4 <HAL_GetTick>
 8001d52:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001d56:	f7ff faa5 	bl	80012a4 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e279      	b.n	800225c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d68:	4b5a      	ldr	r3, [pc, #360]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1f0      	bne.n	8001d56 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d03c      	beq.n	8001dfa <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d01c      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d88:	4b52      	ldr	r3, [pc, #328]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001d8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d8e:	4a51      	ldr	r2, [pc, #324]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001d90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d98:	f7ff fa84 	bl	80012a4 <HAL_GetTick>
 8001d9c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001da0:	f7ff fa80 	bl	80012a4 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e254      	b.n	800225c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001db2:	4b48      	ldr	r3, [pc, #288]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001db4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001db8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0ef      	beq.n	8001da0 <HAL_RCC_OscConfig+0x3a8>
 8001dc0:	e01b      	b.n	8001dfa <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dc2:	4b44      	ldr	r3, [pc, #272]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001dc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dc8:	4a42      	ldr	r2, [pc, #264]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001dca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001dce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd2:	f7ff fa67 	bl	80012a4 <HAL_GetTick>
 8001dd6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001dda:	f7ff fa63 	bl	80012a4 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e237      	b.n	800225c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001dec:	4b39      	ldr	r3, [pc, #228]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001dee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001df2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1ef      	bne.n	8001dda <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 80d2 	beq.w	8001fac <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001e08:	4b34      	ldr	r3, [pc, #208]	@ (8001edc <HAL_RCC_OscConfig+0x4e4>)
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d118      	bne.n	8001e46 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001e14:	4b31      	ldr	r3, [pc, #196]	@ (8001edc <HAL_RCC_OscConfig+0x4e4>)
 8001e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e18:	4a30      	ldr	r2, [pc, #192]	@ (8001edc <HAL_RCC_OscConfig+0x4e4>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e20:	f7ff fa40 	bl	80012a4 <HAL_GetTick>
 8001e24:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e28:	f7ff fa3c 	bl	80012a4 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e210      	b.n	800225c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001e3a:	4b28      	ldr	r3, [pc, #160]	@ (8001edc <HAL_RCC_OscConfig+0x4e4>)
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d108      	bne.n	8001e60 <HAL_RCC_OscConfig+0x468>
 8001e4e:	4b21      	ldr	r3, [pc, #132]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001e50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e54:	4a1f      	ldr	r2, [pc, #124]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e5e:	e074      	b.n	8001f4a <HAL_RCC_OscConfig+0x552>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d118      	bne.n	8001e9a <HAL_RCC_OscConfig+0x4a2>
 8001e68:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001e6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e6e:	4a19      	ldr	r2, [pc, #100]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e78:	4b16      	ldr	r3, [pc, #88]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001e7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e7e:	4a15      	ldr	r2, [pc, #84]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001e80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e84:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e88:	4b12      	ldr	r3, [pc, #72]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001e8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e8e:	4a11      	ldr	r2, [pc, #68]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001e90:	f023 0304 	bic.w	r3, r3, #4
 8001e94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e98:	e057      	b.n	8001f4a <HAL_RCC_OscConfig+0x552>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b05      	cmp	r3, #5
 8001ea0:	d11e      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x4e8>
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001ea4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001eaa:	f043 0304 	orr.w	r3, r3, #4
 8001eae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001eb2:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001eb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001eb8:	4a06      	ldr	r2, [pc, #24]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001eba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ebe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ec2:	4b04      	ldr	r3, [pc, #16]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001ec4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ec8:	4a02      	ldr	r2, [pc, #8]	@ (8001ed4 <HAL_RCC_OscConfig+0x4dc>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ed2:	e03a      	b.n	8001f4a <HAL_RCC_OscConfig+0x552>
 8001ed4:	44020c00 	.word	0x44020c00
 8001ed8:	20000020 	.word	0x20000020
 8001edc:	44020800 	.word	0x44020800
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	2b85      	cmp	r3, #133	@ 0x85
 8001ee6:	d118      	bne.n	8001f1a <HAL_RCC_OscConfig+0x522>
 8001ee8:	4ba2      	ldr	r3, [pc, #648]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8001eea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001eee:	4aa1      	ldr	r2, [pc, #644]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ef8:	4b9e      	ldr	r3, [pc, #632]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8001efa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001efe:	4a9d      	ldr	r2, [pc, #628]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8001f00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f04:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f08:	4b9a      	ldr	r3, [pc, #616]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8001f0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f0e:	4a99      	ldr	r2, [pc, #612]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f18:	e017      	b.n	8001f4a <HAL_RCC_OscConfig+0x552>
 8001f1a:	4b96      	ldr	r3, [pc, #600]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8001f1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f20:	4a94      	ldr	r2, [pc, #592]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8001f22:	f023 0301 	bic.w	r3, r3, #1
 8001f26:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f2a:	4b92      	ldr	r3, [pc, #584]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8001f2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f30:	4a90      	ldr	r2, [pc, #576]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8001f32:	f023 0304 	bic.w	r3, r3, #4
 8001f36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f3a:	4b8e      	ldr	r3, [pc, #568]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8001f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f40:	4a8c      	ldr	r2, [pc, #560]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8001f42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d016      	beq.n	8001f80 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f52:	f7ff f9a7 	bl	80012a4 <HAL_GetTick>
 8001f56:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f58:	e00a      	b.n	8001f70 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5a:	f7ff f9a3 	bl	80012a4 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e175      	b.n	800225c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f70:	4b80      	ldr	r3, [pc, #512]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8001f72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0ed      	beq.n	8001f5a <HAL_RCC_OscConfig+0x562>
 8001f7e:	e015      	b.n	8001fac <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f80:	f7ff f990 	bl	80012a4 <HAL_GetTick>
 8001f84:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f86:	e00a      	b.n	8001f9e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f88:	f7ff f98c 	bl	80012a4 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e15e      	b.n	800225c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f9e:	4b75      	ldr	r3, [pc, #468]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8001fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1ed      	bne.n	8001f88 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0320 	and.w	r3, r3, #32
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d036      	beq.n	8002026 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d019      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fc0:	4b6c      	ldr	r3, [pc, #432]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a6b      	ldr	r2, [pc, #428]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8001fc6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fcc:	f7ff f96a 	bl	80012a4 <HAL_GetTick>
 8001fd0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001fd4:	f7ff f966 	bl	80012a4 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e13a      	b.n	800225c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001fe6:	4b63      	ldr	r3, [pc, #396]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f0      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x5dc>
 8001ff2:	e018      	b.n	8002026 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ff4:	4b5f      	ldr	r3, [pc, #380]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a5e      	ldr	r2, [pc, #376]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8001ffa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ffe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002000:	f7ff f950 	bl	80012a4 <HAL_GetTick>
 8002004:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002008:	f7ff f94c 	bl	80012a4 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e120      	b.n	800225c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800201a:	4b56      	ldr	r3, [pc, #344]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 8115 	beq.w	800225a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	2b18      	cmp	r3, #24
 8002034:	f000 80af 	beq.w	8002196 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203c:	2b02      	cmp	r3, #2
 800203e:	f040 8086 	bne.w	800214e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002042:	4b4c      	ldr	r3, [pc, #304]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a4b      	ldr	r2, [pc, #300]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8002048:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800204c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204e:	f7ff f929 	bl	80012a4 <HAL_GetTick>
 8002052:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002056:	f7ff f925 	bl	80012a4 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e0f9      	b.n	800225c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002068:	4b42      	ldr	r3, [pc, #264]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1f0      	bne.n	8002056 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002074:	4b3f      	ldr	r3, [pc, #252]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8002076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002078:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800207c:	f023 0303 	bic.w	r3, r3, #3
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002088:	0212      	lsls	r2, r2, #8
 800208a:	430a      	orrs	r2, r1
 800208c:	4939      	ldr	r1, [pc, #228]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 800208e:	4313      	orrs	r3, r2
 8002090:	628b      	str	r3, [r1, #40]	@ 0x28
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002096:	3b01      	subs	r3, #1
 8002098:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a0:	3b01      	subs	r3, #1
 80020a2:	025b      	lsls	r3, r3, #9
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ac:	3b01      	subs	r3, #1
 80020ae:	041b      	lsls	r3, r3, #16
 80020b0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	3b01      	subs	r3, #1
 80020bc:	061b      	lsls	r3, r3, #24
 80020be:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80020c2:	492c      	ldr	r1, [pc, #176]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80020c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 80020ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020cc:	4a29      	ldr	r2, [pc, #164]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 80020ce:	f023 0310 	bic.w	r3, r3, #16
 80020d2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d8:	4a26      	ldr	r2, [pc, #152]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80020de:	4b25      	ldr	r3, [pc, #148]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 80020e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e2:	4a24      	ldr	r2, [pc, #144]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 80020e4:	f043 0310 	orr.w	r3, r3, #16
 80020e8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80020ea:	4b22      	ldr	r3, [pc, #136]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 80020ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ee:	f023 020c 	bic.w	r2, r3, #12
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f6:	491f      	ldr	r1, [pc, #124]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80020fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 80020fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002100:	f023 0220 	bic.w	r2, r3, #32
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002108:	491a      	ldr	r1, [pc, #104]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 800210a:	4313      	orrs	r3, r2
 800210c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800210e:	4b19      	ldr	r3, [pc, #100]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8002110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002112:	4a18      	ldr	r2, [pc, #96]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8002114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002118:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800211a:	4b16      	ldr	r3, [pc, #88]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a15      	ldr	r2, [pc, #84]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8002120:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002126:	f7ff f8bd 	bl	80012a4 <HAL_GetTick>
 800212a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800212e:	f7ff f8b9 	bl	80012a4 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e08d      	b.n	800225c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002140:	4b0c      	ldr	r3, [pc, #48]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x736>
 800214c:	e085      	b.n	800225a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800214e:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a08      	ldr	r2, [pc, #32]	@ (8002174 <HAL_RCC_OscConfig+0x77c>)
 8002154:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215a:	f7ff f8a3 	bl	80012a4 <HAL_GetTick>
 800215e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002160:	e00a      	b.n	8002178 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002162:	f7ff f89f 	bl	80012a4 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d903      	bls.n	8002178 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e073      	b.n	800225c <HAL_RCC_OscConfig+0x864>
 8002174:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002178:	4b3a      	ldr	r3, [pc, #232]	@ (8002264 <HAL_RCC_OscConfig+0x86c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1ee      	bne.n	8002162 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002184:	4b37      	ldr	r3, [pc, #220]	@ (8002264 <HAL_RCC_OscConfig+0x86c>)
 8002186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002188:	4a36      	ldr	r2, [pc, #216]	@ (8002264 <HAL_RCC_OscConfig+0x86c>)
 800218a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800218e:	f023 0303 	bic.w	r3, r3, #3
 8002192:	6293      	str	r3, [r2, #40]	@ 0x28
 8002194:	e061      	b.n	800225a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002196:	4b33      	ldr	r3, [pc, #204]	@ (8002264 <HAL_RCC_OscConfig+0x86c>)
 8002198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800219c:	4b31      	ldr	r3, [pc, #196]	@ (8002264 <HAL_RCC_OscConfig+0x86c>)
 800219e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d031      	beq.n	800220e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	f003 0203 	and.w	r2, r3, #3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d12a      	bne.n	800220e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d122      	bne.n	800220e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021d2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d11a      	bne.n	800220e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	0a5b      	lsrs	r3, r3, #9
 80021dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d111      	bne.n	800220e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	0c1b      	lsrs	r3, r3, #16
 80021ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d108      	bne.n	800220e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	0e1b      	lsrs	r3, r3, #24
 8002200:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002208:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800220a:	429a      	cmp	r2, r3
 800220c:	d001      	beq.n	8002212 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e024      	b.n	800225c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002212:	4b14      	ldr	r3, [pc, #80]	@ (8002264 <HAL_RCC_OscConfig+0x86c>)
 8002214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002216:	08db      	lsrs	r3, r3, #3
 8002218:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002220:	429a      	cmp	r2, r3
 8002222:	d01a      	beq.n	800225a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002224:	4b0f      	ldr	r3, [pc, #60]	@ (8002264 <HAL_RCC_OscConfig+0x86c>)
 8002226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002228:	4a0e      	ldr	r2, [pc, #56]	@ (8002264 <HAL_RCC_OscConfig+0x86c>)
 800222a:	f023 0310 	bic.w	r3, r3, #16
 800222e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7ff f838 	bl	80012a4 <HAL_GetTick>
 8002234:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002236:	bf00      	nop
 8002238:	f7ff f834 	bl	80012a4 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	4293      	cmp	r3, r2
 8002242:	d0f9      	beq.n	8002238 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002248:	4a06      	ldr	r2, [pc, #24]	@ (8002264 <HAL_RCC_OscConfig+0x86c>)
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800224e:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <HAL_RCC_OscConfig+0x86c>)
 8002250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002252:	4a04      	ldr	r2, [pc, #16]	@ (8002264 <HAL_RCC_OscConfig+0x86c>)
 8002254:	f043 0310 	orr.w	r3, r3, #16
 8002258:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3720      	adds	r7, #32
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	44020c00 	.word	0x44020c00

08002268 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e19e      	b.n	80025ba <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800227c:	4b83      	ldr	r3, [pc, #524]	@ (800248c <HAL_RCC_ClockConfig+0x224>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 030f 	and.w	r3, r3, #15
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d910      	bls.n	80022ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228a:	4b80      	ldr	r3, [pc, #512]	@ (800248c <HAL_RCC_ClockConfig+0x224>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 020f 	bic.w	r2, r3, #15
 8002292:	497e      	ldr	r1, [pc, #504]	@ (800248c <HAL_RCC_ClockConfig+0x224>)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800229a:	4b7c      	ldr	r3, [pc, #496]	@ (800248c <HAL_RCC_ClockConfig+0x224>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e186      	b.n	80025ba <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0310 	and.w	r3, r3, #16
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d012      	beq.n	80022de <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695a      	ldr	r2, [r3, #20]
 80022bc:	4b74      	ldr	r3, [pc, #464]	@ (8002490 <HAL_RCC_ClockConfig+0x228>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	0a1b      	lsrs	r3, r3, #8
 80022c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d909      	bls.n	80022de <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80022ca:	4b71      	ldr	r3, [pc, #452]	@ (8002490 <HAL_RCC_ClockConfig+0x228>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	496d      	ldr	r1, [pc, #436]	@ (8002490 <HAL_RCC_ClockConfig+0x228>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d012      	beq.n	8002310 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	4b68      	ldr	r3, [pc, #416]	@ (8002490 <HAL_RCC_ClockConfig+0x228>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d909      	bls.n	8002310 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80022fc:	4b64      	ldr	r3, [pc, #400]	@ (8002490 <HAL_RCC_ClockConfig+0x228>)
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	4961      	ldr	r1, [pc, #388]	@ (8002490 <HAL_RCC_ClockConfig+0x228>)
 800230c:	4313      	orrs	r3, r2
 800230e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d010      	beq.n	800233e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	4b5b      	ldr	r3, [pc, #364]	@ (8002490 <HAL_RCC_ClockConfig+0x228>)
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002328:	429a      	cmp	r2, r3
 800232a:	d908      	bls.n	800233e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800232c:	4b58      	ldr	r3, [pc, #352]	@ (8002490 <HAL_RCC_ClockConfig+0x228>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4955      	ldr	r1, [pc, #340]	@ (8002490 <HAL_RCC_ClockConfig+0x228>)
 800233a:	4313      	orrs	r3, r2
 800233c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d010      	beq.n	800236c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	4b50      	ldr	r3, [pc, #320]	@ (8002490 <HAL_RCC_ClockConfig+0x228>)
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	429a      	cmp	r2, r3
 8002358:	d908      	bls.n	800236c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800235a:	4b4d      	ldr	r3, [pc, #308]	@ (8002490 <HAL_RCC_ClockConfig+0x228>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	f023 020f 	bic.w	r2, r3, #15
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	494a      	ldr	r1, [pc, #296]	@ (8002490 <HAL_RCC_ClockConfig+0x228>)
 8002368:	4313      	orrs	r3, r2
 800236a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 8093 	beq.w	80024a0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b03      	cmp	r3, #3
 8002380:	d107      	bne.n	8002392 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002382:	4b43      	ldr	r3, [pc, #268]	@ (8002490 <HAL_RCC_ClockConfig+0x228>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d121      	bne.n	80023d2 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e113      	b.n	80025ba <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d107      	bne.n	80023aa <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800239a:	4b3d      	ldr	r3, [pc, #244]	@ (8002490 <HAL_RCC_ClockConfig+0x228>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d115      	bne.n	80023d2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e107      	b.n	80025ba <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80023b2:	4b37      	ldr	r3, [pc, #220]	@ (8002490 <HAL_RCC_ClockConfig+0x228>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d109      	bne.n	80023d2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e0fb      	b.n	80025ba <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c2:	4b33      	ldr	r3, [pc, #204]	@ (8002490 <HAL_RCC_ClockConfig+0x228>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e0f3      	b.n	80025ba <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80023d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002490 <HAL_RCC_ClockConfig+0x228>)
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	f023 0203 	bic.w	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	492c      	ldr	r1, [pc, #176]	@ (8002490 <HAL_RCC_ClockConfig+0x228>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e4:	f7fe ff5e 	bl	80012a4 <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d112      	bne.n	8002418 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f2:	e00a      	b.n	800240a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80023f4:	f7fe ff56 	bl	80012a4 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e0d7      	b.n	80025ba <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800240a:	4b21      	ldr	r3, [pc, #132]	@ (8002490 <HAL_RCC_ClockConfig+0x228>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	f003 0318 	and.w	r3, r3, #24
 8002412:	2b18      	cmp	r3, #24
 8002414:	d1ee      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x18c>
 8002416:	e043      	b.n	80024a0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b02      	cmp	r3, #2
 800241e:	d112      	bne.n	8002446 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002420:	e00a      	b.n	8002438 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002422:	f7fe ff3f 	bl	80012a4 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002430:	4293      	cmp	r3, r2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e0c0      	b.n	80025ba <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002438:	4b15      	ldr	r3, [pc, #84]	@ (8002490 <HAL_RCC_ClockConfig+0x228>)
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	f003 0318 	and.w	r3, r3, #24
 8002440:	2b10      	cmp	r3, #16
 8002442:	d1ee      	bne.n	8002422 <HAL_RCC_ClockConfig+0x1ba>
 8002444:	e02c      	b.n	80024a0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d122      	bne.n	8002494 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800244e:	e00a      	b.n	8002466 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002450:	f7fe ff28 	bl	80012a4 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e0a9      	b.n	80025ba <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002466:	4b0a      	ldr	r3, [pc, #40]	@ (8002490 <HAL_RCC_ClockConfig+0x228>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f003 0318 	and.w	r3, r3, #24
 800246e:	2b08      	cmp	r3, #8
 8002470:	d1ee      	bne.n	8002450 <HAL_RCC_ClockConfig+0x1e8>
 8002472:	e015      	b.n	80024a0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002474:	f7fe ff16 	bl	80012a4 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002482:	4293      	cmp	r3, r2
 8002484:	d906      	bls.n	8002494 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e097      	b.n	80025ba <HAL_RCC_ClockConfig+0x352>
 800248a:	bf00      	nop
 800248c:	40022000 	.word	0x40022000
 8002490:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002494:	4b4b      	ldr	r3, [pc, #300]	@ (80025c4 <HAL_RCC_ClockConfig+0x35c>)
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	f003 0318 	and.w	r3, r3, #24
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1e9      	bne.n	8002474 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d010      	beq.n	80024ce <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	4b44      	ldr	r3, [pc, #272]	@ (80025c4 <HAL_RCC_ClockConfig+0x35c>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d208      	bcs.n	80024ce <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80024bc:	4b41      	ldr	r3, [pc, #260]	@ (80025c4 <HAL_RCC_ClockConfig+0x35c>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f023 020f 	bic.w	r2, r3, #15
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	493e      	ldr	r1, [pc, #248]	@ (80025c4 <HAL_RCC_ClockConfig+0x35c>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024ce:	4b3e      	ldr	r3, [pc, #248]	@ (80025c8 <HAL_RCC_ClockConfig+0x360>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d210      	bcs.n	80024fe <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024dc:	4b3a      	ldr	r3, [pc, #232]	@ (80025c8 <HAL_RCC_ClockConfig+0x360>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f023 020f 	bic.w	r2, r3, #15
 80024e4:	4938      	ldr	r1, [pc, #224]	@ (80025c8 <HAL_RCC_ClockConfig+0x360>)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ec:	4b36      	ldr	r3, [pc, #216]	@ (80025c8 <HAL_RCC_ClockConfig+0x360>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 030f 	and.w	r3, r3, #15
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d001      	beq.n	80024fe <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e05d      	b.n	80025ba <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b00      	cmp	r3, #0
 8002508:	d010      	beq.n	800252c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	4b2d      	ldr	r3, [pc, #180]	@ (80025c4 <HAL_RCC_ClockConfig+0x35c>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002516:	429a      	cmp	r2, r3
 8002518:	d208      	bcs.n	800252c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800251a:	4b2a      	ldr	r3, [pc, #168]	@ (80025c4 <HAL_RCC_ClockConfig+0x35c>)
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	4927      	ldr	r1, [pc, #156]	@ (80025c4 <HAL_RCC_ClockConfig+0x35c>)
 8002528:	4313      	orrs	r3, r2
 800252a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d012      	beq.n	800255e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	4b21      	ldr	r3, [pc, #132]	@ (80025c4 <HAL_RCC_ClockConfig+0x35c>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002546:	429a      	cmp	r2, r3
 8002548:	d209      	bcs.n	800255e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800254a:	4b1e      	ldr	r3, [pc, #120]	@ (80025c4 <HAL_RCC_ClockConfig+0x35c>)
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	491a      	ldr	r1, [pc, #104]	@ (80025c4 <HAL_RCC_ClockConfig+0x35c>)
 800255a:	4313      	orrs	r3, r2
 800255c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0310 	and.w	r3, r3, #16
 8002566:	2b00      	cmp	r3, #0
 8002568:	d012      	beq.n	8002590 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	4b15      	ldr	r3, [pc, #84]	@ (80025c4 <HAL_RCC_ClockConfig+0x35c>)
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002578:	429a      	cmp	r2, r3
 800257a:	d209      	bcs.n	8002590 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800257c:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <HAL_RCC_ClockConfig+0x35c>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	490e      	ldr	r1, [pc, #56]	@ (80025c4 <HAL_RCC_ClockConfig+0x35c>)
 800258c:	4313      	orrs	r3, r2
 800258e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002590:	f000 f822 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8002594:	4602      	mov	r2, r0
 8002596:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <HAL_RCC_ClockConfig+0x35c>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	490b      	ldr	r1, [pc, #44]	@ (80025cc <HAL_RCC_ClockConfig+0x364>)
 80025a0:	5ccb      	ldrb	r3, [r1, r3]
 80025a2:	fa22 f303 	lsr.w	r3, r2, r3
 80025a6:	4a0a      	ldr	r2, [pc, #40]	@ (80025d0 <HAL_RCC_ClockConfig+0x368>)
 80025a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80025aa:	4b0a      	ldr	r3, [pc, #40]	@ (80025d4 <HAL_RCC_ClockConfig+0x36c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe fdee 	bl	8001190 <HAL_InitTick>
 80025b4:	4603      	mov	r3, r0
 80025b6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80025b8:	7afb      	ldrb	r3, [r7, #11]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	44020c00 	.word	0x44020c00
 80025c8:	40022000 	.word	0x40022000
 80025cc:	08007854 	.word	0x08007854
 80025d0:	20000000 	.word	0x20000000
 80025d4:	20000020 	.word	0x20000020

080025d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	b089      	sub	sp, #36	@ 0x24
 80025dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80025de:	4b8c      	ldr	r3, [pc, #560]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x238>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f003 0318 	and.w	r3, r3, #24
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d102      	bne.n	80025f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80025ea:	4b8a      	ldr	r3, [pc, #552]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x23c>)
 80025ec:	61fb      	str	r3, [r7, #28]
 80025ee:	e107      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025f0:	4b87      	ldr	r3, [pc, #540]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x238>)
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f003 0318 	and.w	r3, r3, #24
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d112      	bne.n	8002622 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80025fc:	4b84      	ldr	r3, [pc, #528]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x238>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	2b00      	cmp	r3, #0
 8002606:	d009      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002608:	4b81      	ldr	r3, [pc, #516]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x238>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	08db      	lsrs	r3, r3, #3
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	4a81      	ldr	r2, [pc, #516]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x240>)
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	e0f1      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800261c:	4b7e      	ldr	r3, [pc, #504]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x240>)
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	e0ee      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002622:	4b7b      	ldr	r3, [pc, #492]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x238>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f003 0318 	and.w	r3, r3, #24
 800262a:	2b10      	cmp	r3, #16
 800262c:	d102      	bne.n	8002634 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800262e:	4b7b      	ldr	r3, [pc, #492]	@ (800281c <HAL_RCC_GetSysClockFreq+0x244>)
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	e0e5      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002634:	4b76      	ldr	r3, [pc, #472]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x238>)
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	f003 0318 	and.w	r3, r3, #24
 800263c:	2b18      	cmp	r3, #24
 800263e:	f040 80dd 	bne.w	80027fc <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002642:	4b73      	ldr	r3, [pc, #460]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x238>)
 8002644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800264c:	4b70      	ldr	r3, [pc, #448]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x238>)
 800264e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002656:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002658:	4b6d      	ldr	r3, [pc, #436]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x238>)
 800265a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002664:	4b6a      	ldr	r3, [pc, #424]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x238>)
 8002666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002668:	08db      	lsrs	r3, r3, #3
 800266a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	fb02 f303 	mul.w	r3, r2, r3
 8002674:	ee07 3a90 	vmov	s15, r3
 8002678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800267c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 80b7 	beq.w	80027f6 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d003      	beq.n	8002696 <HAL_RCC_GetSysClockFreq+0xbe>
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2b03      	cmp	r3, #3
 8002692:	d056      	beq.n	8002742 <HAL_RCC_GetSysClockFreq+0x16a>
 8002694:	e077      	b.n	8002786 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002696:	4b5e      	ldr	r3, [pc, #376]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x238>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0320 	and.w	r3, r3, #32
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d02d      	beq.n	80026fe <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80026a2:	4b5b      	ldr	r3, [pc, #364]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x238>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	08db      	lsrs	r3, r3, #3
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	4a5a      	ldr	r2, [pc, #360]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x240>)
 80026ae:	fa22 f303 	lsr.w	r3, r2, r3
 80026b2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	ee07 3a90 	vmov	s15, r3
 80026ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	ee07 3a90 	vmov	s15, r3
 80026c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026cc:	4b50      	ldr	r3, [pc, #320]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x238>)
 80026ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026d4:	ee07 3a90 	vmov	s15, r3
 80026d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80026dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80026e0:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002820 <HAL_RCC_GetSysClockFreq+0x248>
 80026e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80026ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f8:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80026fc:	e065      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	ee07 3a90 	vmov	s15, r3
 8002704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002708:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002824 <HAL_RCC_GetSysClockFreq+0x24c>
 800270c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002710:	4b3f      	ldr	r3, [pc, #252]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x238>)
 8002712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002718:	ee07 3a90 	vmov	s15, r3
 800271c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002720:	ed97 6a02 	vldr	s12, [r7, #8]
 8002724:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002820 <HAL_RCC_GetSysClockFreq+0x248>
 8002728:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800272c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002730:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002734:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800273c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002740:	e043      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	ee07 3a90 	vmov	s15, r3
 8002748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800274c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002828 <HAL_RCC_GetSysClockFreq+0x250>
 8002750:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002754:	4b2e      	ldr	r3, [pc, #184]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x238>)
 8002756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800275c:	ee07 3a90 	vmov	s15, r3
 8002760:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002764:	ed97 6a02 	vldr	s12, [r7, #8]
 8002768:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002820 <HAL_RCC_GetSysClockFreq+0x248>
 800276c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002770:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002774:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002778:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800277c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002780:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002784:	e021      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	ee07 3a90 	vmov	s15, r3
 800278c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002790:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800282c <HAL_RCC_GetSysClockFreq+0x254>
 8002794:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002798:	4b1d      	ldr	r3, [pc, #116]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x238>)
 800279a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800279c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a0:	ee07 3a90 	vmov	s15, r3
 80027a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80027a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80027ac:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002820 <HAL_RCC_GetSysClockFreq+0x248>
 80027b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80027b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80027c8:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80027ca:	4b11      	ldr	r3, [pc, #68]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x238>)
 80027cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ce:	0a5b      	lsrs	r3, r3, #9
 80027d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027d4:	3301      	adds	r3, #1
 80027d6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	ee07 3a90 	vmov	s15, r3
 80027de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027e2:	edd7 6a06 	vldr	s13, [r7, #24]
 80027e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027ee:	ee17 3a90 	vmov	r3, s15
 80027f2:	61fb      	str	r3, [r7, #28]
 80027f4:	e004      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
 80027fa:	e001      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80027fc:	4b06      	ldr	r3, [pc, #24]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x240>)
 80027fe:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002800:	69fb      	ldr	r3, [r7, #28]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3724      	adds	r7, #36	@ 0x24
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	44020c00 	.word	0x44020c00
 8002814:	003d0900 	.word	0x003d0900
 8002818:	03d09000 	.word	0x03d09000
 800281c:	007a1200 	.word	0x007a1200
 8002820:	46000000 	.word	0x46000000
 8002824:	4c742400 	.word	0x4c742400
 8002828:	4af42400 	.word	0x4af42400
 800282c:	4a742400 	.word	0x4a742400

08002830 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002834:	f7ff fed0 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8002838:	4602      	mov	r2, r0
 800283a:	4b08      	ldr	r3, [pc, #32]	@ (800285c <HAL_RCC_GetHCLKFreq+0x2c>)
 800283c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800283e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002842:	4907      	ldr	r1, [pc, #28]	@ (8002860 <HAL_RCC_GetHCLKFreq+0x30>)
 8002844:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002846:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800284a:	fa22 f303 	lsr.w	r3, r2, r3
 800284e:	4a05      	ldr	r2, [pc, #20]	@ (8002864 <HAL_RCC_GetHCLKFreq+0x34>)
 8002850:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002852:	4b04      	ldr	r3, [pc, #16]	@ (8002864 <HAL_RCC_GetHCLKFreq+0x34>)
 8002854:	681b      	ldr	r3, [r3, #0]
}
 8002856:	4618      	mov	r0, r3
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	44020c00 	.word	0x44020c00
 8002860:	08007854 	.word	0x08007854
 8002864:	20000000 	.word	0x20000000

08002868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800286c:	f7ff ffe0 	bl	8002830 <HAL_RCC_GetHCLKFreq>
 8002870:	4602      	mov	r2, r0
 8002872:	4b06      	ldr	r3, [pc, #24]	@ (800288c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	091b      	lsrs	r3, r3, #4
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	4904      	ldr	r1, [pc, #16]	@ (8002890 <HAL_RCC_GetPCLK1Freq+0x28>)
 800287e:	5ccb      	ldrb	r3, [r1, r3]
 8002880:	f003 031f 	and.w	r3, r3, #31
 8002884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002888:	4618      	mov	r0, r3
 800288a:	bd80      	pop	{r7, pc}
 800288c:	44020c00 	.word	0x44020c00
 8002890:	08007864 	.word	0x08007864

08002894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002898:	f7ff ffca 	bl	8002830 <HAL_RCC_GetHCLKFreq>
 800289c:	4602      	mov	r2, r0
 800289e:	4b06      	ldr	r3, [pc, #24]	@ (80028b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	0a1b      	lsrs	r3, r3, #8
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	4904      	ldr	r1, [pc, #16]	@ (80028bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80028aa:	5ccb      	ldrb	r3, [r1, r3]
 80028ac:	f003 031f 	and.w	r3, r3, #31
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	44020c00 	.word	0x44020c00
 80028bc:	08007864 	.word	0x08007864

080028c0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80028c4:	f7ff ffb4 	bl	8002830 <HAL_RCC_GetHCLKFreq>
 80028c8:	4602      	mov	r2, r0
 80028ca:	4b06      	ldr	r3, [pc, #24]	@ (80028e4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	0b1b      	lsrs	r3, r3, #12
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	4904      	ldr	r1, [pc, #16]	@ (80028e8 <HAL_RCC_GetPCLK3Freq+0x28>)
 80028d6:	5ccb      	ldrb	r3, [r1, r3]
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	44020c00 	.word	0x44020c00
 80028e8:	08007864 	.word	0x08007864

080028ec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b08b      	sub	sp, #44	@ 0x2c
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80028f4:	4bae      	ldr	r3, [pc, #696]	@ (8002bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80028f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028fc:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80028fe:	4bac      	ldr	r3, [pc, #688]	@ (8002bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002908:	4ba9      	ldr	r3, [pc, #676]	@ (8002bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800290a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290c:	0a1b      	lsrs	r3, r3, #8
 800290e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002912:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002914:	4ba6      	ldr	r3, [pc, #664]	@ (8002bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002920:	4ba3      	ldr	r3, [pc, #652]	@ (8002bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002924:	08db      	lsrs	r3, r3, #3
 8002926:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	fb02 f303 	mul.w	r3, r2, r3
 8002930:	ee07 3a90 	vmov	s15, r3
 8002934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002938:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 8126 	beq.w	8002b90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	2b03      	cmp	r3, #3
 8002948:	d053      	beq.n	80029f2 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	2b03      	cmp	r3, #3
 800294e:	d86f      	bhi.n	8002a30 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d003      	beq.n	800295e <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	2b02      	cmp	r3, #2
 800295a:	d02b      	beq.n	80029b4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800295c:	e068      	b.n	8002a30 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800295e:	4b94      	ldr	r3, [pc, #592]	@ (8002bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	08db      	lsrs	r3, r3, #3
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	4a92      	ldr	r2, [pc, #584]	@ (8002bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800296a:	fa22 f303 	lsr.w	r3, r2, r3
 800296e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	ee07 3a90 	vmov	s15, r3
 8002976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	ee07 3a90 	vmov	s15, r3
 8002980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002984:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	ee07 3a90 	vmov	s15, r3
 800298e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002992:	ed97 6a04 	vldr	s12, [r7, #16]
 8002996:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8002bb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800299a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800299e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80029b2:	e068      	b.n	8002a86 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	ee07 3a90 	vmov	s15, r3
 80029ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029be:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8002bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80029c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	ee07 3a90 	vmov	s15, r3
 80029cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029d0:	ed97 6a04 	vldr	s12, [r7, #16]
 80029d4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002bb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80029d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80029f0:	e049      	b.n	8002a86 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	ee07 3a90 	vmov	s15, r3
 80029f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029fc:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8002a00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	ee07 3a90 	vmov	s15, r3
 8002a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a0e:	ed97 6a04 	vldr	s12, [r7, #16]
 8002a12:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8002bb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8002a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a2a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002a2e:	e02a      	b.n	8002a86 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002a30:	4b5f      	ldr	r3, [pc, #380]	@ (8002bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	08db      	lsrs	r3, r3, #3
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	4a5e      	ldr	r2, [pc, #376]	@ (8002bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8002a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a40:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	ee07 3a90 	vmov	s15, r3
 8002a48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	ee07 3a90 	vmov	s15, r3
 8002a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	ee07 3a90 	vmov	s15, r3
 8002a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a64:	ed97 6a04 	vldr	s12, [r7, #16]
 8002a68:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8002bb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8002a6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a80:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002a84:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002a86:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a92:	d121      	bne.n	8002ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8002a94:	4b46      	ldr	r3, [pc, #280]	@ (8002bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d017      	beq.n	8002ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8002aa0:	4b43      	ldr	r3, [pc, #268]	@ (8002bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa4:	0a5b      	lsrs	r3, r3, #9
 8002aa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002aaa:	ee07 3a90 	vmov	s15, r3
 8002aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8002ab2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ab6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8002aba:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002abe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ac6:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	e006      	b.n	8002ade <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	e002      	b.n	8002ade <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002ade:	4b34      	ldr	r3, [pc, #208]	@ (8002bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002aea:	d121      	bne.n	8002b30 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8002aec:	4b30      	ldr	r3, [pc, #192]	@ (8002bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d017      	beq.n	8002b28 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8002af8:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002afc:	0c1b      	lsrs	r3, r3, #16
 8002afe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b02:	ee07 3a90 	vmov	s15, r3
 8002b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8002b0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b0e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8002b12:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b1e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	e006      	b.n	8002b36 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	e002      	b.n	8002b36 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002b36:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b42:	d121      	bne.n	8002b88 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8002b44:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d017      	beq.n	8002b80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8002b50:	4b17      	ldr	r3, [pc, #92]	@ (8002bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b54:	0e1b      	lsrs	r3, r3, #24
 8002b56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b5a:	ee07 3a90 	vmov	s15, r3
 8002b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8002b62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b66:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8002b6a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b76:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8002b7e:	e010      	b.n	8002ba2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
}
 8002b86:	e00c      	b.n	8002ba2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
}
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	609a      	str	r2, [r3, #8]
}
 8002ba2:	bf00      	nop
 8002ba4:	372c      	adds	r7, #44	@ 0x2c
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	44020c00 	.word	0x44020c00
 8002bb4:	03d09000 	.word	0x03d09000
 8002bb8:	46000000 	.word	0x46000000
 8002bbc:	4a742400 	.word	0x4a742400
 8002bc0:	4af42400 	.word	0x4af42400

08002bc4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b08b      	sub	sp, #44	@ 0x2c
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8002bcc:	4bae      	ldr	r3, [pc, #696]	@ (8002e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd4:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8002bd6:	4bac      	ldr	r3, [pc, #688]	@ (8002e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8002be0:	4ba9      	ldr	r3, [pc, #676]	@ (8002e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be4:	0a1b      	lsrs	r3, r3, #8
 8002be6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bea:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8002bec:	4ba6      	ldr	r3, [pc, #664]	@ (8002e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8002bf8:	4ba3      	ldr	r3, [pc, #652]	@ (8002e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfc:	08db      	lsrs	r3, r3, #3
 8002bfe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	fb02 f303 	mul.w	r3, r2, r3
 8002c08:	ee07 3a90 	vmov	s15, r3
 8002c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c10:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 8126 	beq.w	8002e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d053      	beq.n	8002cca <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d86f      	bhi.n	8002d08 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d003      	beq.n	8002c36 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d02b      	beq.n	8002c8c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8002c34:	e068      	b.n	8002d08 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002c36:	4b94      	ldr	r3, [pc, #592]	@ (8002e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	08db      	lsrs	r3, r3, #3
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	4a92      	ldr	r2, [pc, #584]	@ (8002e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8002c42:	fa22 f303 	lsr.w	r3, r2, r3
 8002c46:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	ee07 3a90 	vmov	s15, r3
 8002c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	ee07 3a90 	vmov	s15, r3
 8002c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	ee07 3a90 	vmov	s15, r3
 8002c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c6a:	ed97 6a04 	vldr	s12, [r7, #16]
 8002c6e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8002e90 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c86:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002c8a:	e068      	b.n	8002d5e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	ee07 3a90 	vmov	s15, r3
 8002c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c96:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8002e94 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8002c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	ee07 3a90 	vmov	s15, r3
 8002ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ca8:	ed97 6a04 	vldr	s12, [r7, #16]
 8002cac:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002e90 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002cb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002cc8:	e049      	b.n	8002d5e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	ee07 3a90 	vmov	s15, r3
 8002cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cd4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002e98 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8002cd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	ee07 3a90 	vmov	s15, r3
 8002ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ce6:	ed97 6a04 	vldr	s12, [r7, #16]
 8002cea:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8002e90 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d02:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002d06:	e02a      	b.n	8002d5e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002d08:	4b5f      	ldr	r3, [pc, #380]	@ (8002e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	08db      	lsrs	r3, r3, #3
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	4a5e      	ldr	r2, [pc, #376]	@ (8002e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8002d14:	fa22 f303 	lsr.w	r3, r2, r3
 8002d18:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	ee07 3a90 	vmov	s15, r3
 8002d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	ee07 3a90 	vmov	s15, r3
 8002d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	ee07 3a90 	vmov	s15, r3
 8002d38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d3c:	ed97 6a04 	vldr	s12, [r7, #16]
 8002d40:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8002e90 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002d44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d58:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002d5c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d6a:	d121      	bne.n	8002db0 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8002d6c:	4b46      	ldr	r3, [pc, #280]	@ (8002e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d017      	beq.n	8002da8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8002d78:	4b43      	ldr	r3, [pc, #268]	@ (8002e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7c:	0a5b      	lsrs	r3, r3, #9
 8002d7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d82:	ee07 3a90 	vmov	s15, r3
 8002d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8002d8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d8e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8002d92:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d9e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	e006      	b.n	8002db6 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	e002      	b.n	8002db6 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002db6:	4b34      	ldr	r3, [pc, #208]	@ (8002e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dc2:	d121      	bne.n	8002e08 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8002dc4:	4b30      	ldr	r3, [pc, #192]	@ (8002e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d017      	beq.n	8002e00 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8002dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8002e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd4:	0c1b      	lsrs	r3, r3, #16
 8002dd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dda:	ee07 3a90 	vmov	s15, r3
 8002dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8002de2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002de6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8002dea:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002df6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	e006      	b.n	8002e0e <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	e002      	b.n	8002e0e <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e1a:	d121      	bne.n	8002e60 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8002e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d017      	beq.n	8002e58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8002e28:	4b17      	ldr	r3, [pc, #92]	@ (8002e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e2c:	0e1b      	lsrs	r3, r3, #24
 8002e2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e32:	ee07 3a90 	vmov	s15, r3
 8002e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8002e3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e3e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8002e42:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002e46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e4e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002e56:	e010      	b.n	8002e7a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	609a      	str	r2, [r3, #8]
}
 8002e5e:	e00c      	b.n	8002e7a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	609a      	str	r2, [r3, #8]
}
 8002e66:	e008      	b.n	8002e7a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	609a      	str	r2, [r3, #8]
}
 8002e7a:	bf00      	nop
 8002e7c:	372c      	adds	r7, #44	@ 0x2c
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	44020c00 	.word	0x44020c00
 8002e8c:	03d09000 	.word	0x03d09000
 8002e90:	46000000 	.word	0x46000000
 8002e94:	4a742400 	.word	0x4a742400
 8002e98:	4af42400 	.word	0x4af42400

08002e9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b08b      	sub	sp, #44	@ 0x2c
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8002ea4:	4bae      	ldr	r3, [pc, #696]	@ (8003160 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eac:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8002eae:	4bac      	ldr	r3, [pc, #688]	@ (8003160 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8002eb8:	4ba9      	ldr	r3, [pc, #676]	@ (8003160 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebc:	0a1b      	lsrs	r3, r3, #8
 8002ebe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ec2:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8002ec4:	4ba6      	ldr	r3, [pc, #664]	@ (8003160 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8002ed0:	4ba3      	ldr	r3, [pc, #652]	@ (8003160 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed4:	08db      	lsrs	r3, r3, #3
 8002ed6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	fb02 f303 	mul.w	r3, r2, r3
 8002ee0:	ee07 3a90 	vmov	s15, r3
 8002ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ee8:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 8126 	beq.w	8003140 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d053      	beq.n	8002fa2 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d86f      	bhi.n	8002fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d003      	beq.n	8002f0e <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d02b      	beq.n	8002f64 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8002f0c:	e068      	b.n	8002fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002f0e:	4b94      	ldr	r3, [pc, #592]	@ (8003160 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	08db      	lsrs	r3, r3, #3
 8002f14:	f003 0303 	and.w	r3, r3, #3
 8002f18:	4a92      	ldr	r2, [pc, #584]	@ (8003164 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8002f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	ee07 3a90 	vmov	s15, r3
 8002f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	ee07 3a90 	vmov	s15, r3
 8002f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	ee07 3a90 	vmov	s15, r3
 8002f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f42:	ed97 6a04 	vldr	s12, [r7, #16]
 8002f46:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8003168 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8002f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f5e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002f62:	e068      	b.n	8003036 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	ee07 3a90 	vmov	s15, r3
 8002f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f6e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800316c <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8002f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	ee07 3a90 	vmov	s15, r3
 8002f7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f80:	ed97 6a04 	vldr	s12, [r7, #16]
 8002f84:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003168 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8002f88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002fa0:	e049      	b.n	8003036 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	ee07 3a90 	vmov	s15, r3
 8002fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fac:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003170 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8002fb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	ee07 3a90 	vmov	s15, r3
 8002fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fbe:	ed97 6a04 	vldr	s12, [r7, #16]
 8002fc2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8003168 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8002fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fda:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002fde:	e02a      	b.n	8003036 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002fe0:	4b5f      	ldr	r3, [pc, #380]	@ (8003160 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	08db      	lsrs	r3, r3, #3
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	4a5e      	ldr	r2, [pc, #376]	@ (8003164 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8002fec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff0:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	ee07 3a90 	vmov	s15, r3
 8002ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	ee07 3a90 	vmov	s15, r3
 8003002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	ee07 3a90 	vmov	s15, r3
 8003010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003014:	ed97 6a04 	vldr	s12, [r7, #16]
 8003018:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8003168 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800301c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003020:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003024:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003028:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800302c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003030:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003034:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003036:	4b4a      	ldr	r3, [pc, #296]	@ (8003160 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800303e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003042:	d121      	bne.n	8003088 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8003044:	4b46      	ldr	r3, [pc, #280]	@ (8003160 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003048:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d017      	beq.n	8003080 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003050:	4b43      	ldr	r3, [pc, #268]	@ (8003160 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003054:	0a5b      	lsrs	r3, r3, #9
 8003056:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800305a:	ee07 3a90 	vmov	s15, r3
 800305e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8003062:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003066:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800306a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800306e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003076:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	e006      	b.n	800308e <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	e002      	b.n	800308e <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800308e:	4b34      	ldr	r3, [pc, #208]	@ (8003160 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003096:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800309a:	d121      	bne.n	80030e0 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800309c:	4b30      	ldr	r3, [pc, #192]	@ (8003160 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d017      	beq.n	80030d8 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80030a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003160 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80030aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ac:	0c1b      	lsrs	r3, r3, #16
 80030ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030b2:	ee07 3a90 	vmov	s15, r3
 80030b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80030ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80030be:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80030c2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80030c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030ce:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	e006      	b.n	80030e6 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	e002      	b.n	80030e6 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80030e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003160 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030f2:	d121      	bne.n	8003138 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80030f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003160 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80030f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d017      	beq.n	8003130 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003100:	4b17      	ldr	r3, [pc, #92]	@ (8003160 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003104:	0e1b      	lsrs	r3, r3, #24
 8003106:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800310a:	ee07 3a90 	vmov	s15, r3
 800310e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8003112:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003116:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800311a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800311e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003126:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800312e:	e010      	b.n	8003152 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	609a      	str	r2, [r3, #8]
}
 8003136:	e00c      	b.n	8003152 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	609a      	str	r2, [r3, #8]
}
 800313e:	e008      	b.n	8003152 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	609a      	str	r2, [r3, #8]
}
 8003152:	bf00      	nop
 8003154:	372c      	adds	r7, #44	@ 0x2c
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	44020c00 	.word	0x44020c00
 8003164:	03d09000 	.word	0x03d09000
 8003168:	46000000 	.word	0x46000000
 800316c:	4a742400 	.word	0x4a742400
 8003170:	4af42400 	.word	0x4af42400

08003174 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003174:	b590      	push	{r4, r7, lr}
 8003176:	b08f      	sub	sp, #60	@ 0x3c
 8003178:	af00      	add	r7, sp, #0
 800317a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800317e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003182:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8003186:	4321      	orrs	r1, r4
 8003188:	d150      	bne.n	800322c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800318a:	4b26      	ldr	r3, [pc, #152]	@ (8003224 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800318c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003190:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003194:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003196:	4b23      	ldr	r3, [pc, #140]	@ (8003224 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003198:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d108      	bne.n	80031b6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80031a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031aa:	d104      	bne.n	80031b6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80031ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80031b2:	f002 bb2a 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80031b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003224 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80031b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031c4:	d108      	bne.n	80031d8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80031c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031cc:	d104      	bne.n	80031d8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80031ce:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80031d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80031d4:	f002 bb19 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80031d8:	4b12      	ldr	r3, [pc, #72]	@ (8003224 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031e4:	d119      	bne.n	800321a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80031e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031ec:	d115      	bne.n	800321a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80031ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003224 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80031f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031fa:	d30a      	bcc.n	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80031fc:	4b09      	ldr	r3, [pc, #36]	@ (8003224 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	0a1b      	lsrs	r3, r3, #8
 8003202:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003206:	4a08      	ldr	r2, [pc, #32]	@ (8003228 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003208:	fbb2 f3f3 	udiv	r3, r2, r3
 800320c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800320e:	f002 bafc 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8003216:	f002 baf8 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	637b      	str	r3, [r7, #52]	@ 0x34
 800321e:	f002 baf4 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003222:	bf00      	nop
 8003224:	44020c00 	.word	0x44020c00
 8003228:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800322c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003230:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8003234:	ea50 0104 	orrs.w	r1, r0, r4
 8003238:	f001 8275 	beq.w	8004726 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 800323c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003240:	2801      	cmp	r0, #1
 8003242:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8003246:	f082 82dd 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800324a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800324e:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8003252:	ea50 0104 	orrs.w	r1, r0, r4
 8003256:	f001 816c 	beq.w	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800325a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800325e:	2801      	cmp	r0, #1
 8003260:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8003264:	f082 82ce 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003268:	e9d7 0100 	ldrd	r0, r1, [r7]
 800326c:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8003270:	ea50 0104 	orrs.w	r1, r0, r4
 8003274:	f001 8602 	beq.w	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8003278:	e9d7 0100 	ldrd	r0, r1, [r7]
 800327c:	2801      	cmp	r0, #1
 800327e:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8003282:	f082 82bf 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003286:	e9d7 0100 	ldrd	r0, r1, [r7]
 800328a:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 800328e:	ea50 0104 	orrs.w	r1, r0, r4
 8003292:	f001 854c 	beq.w	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8003296:	e9d7 0100 	ldrd	r0, r1, [r7]
 800329a:	2801      	cmp	r0, #1
 800329c:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 80032a0:	f082 82b0 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80032a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032a8:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 80032ac:	ea50 0104 	orrs.w	r1, r0, r4
 80032b0:	f001 849e 	beq.w	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80032b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032b8:	2801      	cmp	r0, #1
 80032ba:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 80032be:	f082 82a1 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80032c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032c6:	f1a1 0420 	sub.w	r4, r1, #32
 80032ca:	ea50 0104 	orrs.w	r1, r0, r4
 80032ce:	f001 83e8 	beq.w	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80032d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032d6:	2801      	cmp	r0, #1
 80032d8:	f171 0120 	sbcs.w	r1, r1, #32
 80032dc:	f082 8292 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80032e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032e4:	f1a1 0410 	sub.w	r4, r1, #16
 80032e8:	ea50 0104 	orrs.w	r1, r0, r4
 80032ec:	f002 8256 	beq.w	800579c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80032f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032f4:	2801      	cmp	r0, #1
 80032f6:	f171 0110 	sbcs.w	r1, r1, #16
 80032fa:	f082 8283 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80032fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003302:	f1a1 0408 	sub.w	r4, r1, #8
 8003306:	ea50 0104 	orrs.w	r1, r0, r4
 800330a:	f002 81cc 	beq.w	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800330e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003312:	2801      	cmp	r0, #1
 8003314:	f171 0108 	sbcs.w	r1, r1, #8
 8003318:	f082 8274 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800331c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003320:	1f0c      	subs	r4, r1, #4
 8003322:	ea50 0104 	orrs.w	r1, r0, r4
 8003326:	f001 8648 	beq.w	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800332a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800332e:	2801      	cmp	r0, #1
 8003330:	f171 0104 	sbcs.w	r1, r1, #4
 8003334:	f082 8266 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003338:	e9d7 0100 	ldrd	r0, r1, [r7]
 800333c:	1e8c      	subs	r4, r1, #2
 800333e:	ea50 0104 	orrs.w	r1, r0, r4
 8003342:	f002 8143 	beq.w	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8003346:	e9d7 0100 	ldrd	r0, r1, [r7]
 800334a:	2801      	cmp	r0, #1
 800334c:	f171 0102 	sbcs.w	r1, r1, #2
 8003350:	f082 8258 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003354:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003358:	1e4c      	subs	r4, r1, #1
 800335a:	ea50 0104 	orrs.w	r1, r0, r4
 800335e:	f002 80ce 	beq.w	80054fe <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8003362:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003366:	2801      	cmp	r0, #1
 8003368:	f171 0101 	sbcs.w	r1, r1, #1
 800336c:	f082 824a 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003370:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003374:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8003378:	4321      	orrs	r1, r4
 800337a:	f002 8059 	beq.w	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800337e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003382:	4cd9      	ldr	r4, [pc, #868]	@ (80036e8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8003384:	42a0      	cmp	r0, r4
 8003386:	f171 0100 	sbcs.w	r1, r1, #0
 800338a:	f082 823b 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800338e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003392:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8003396:	4321      	orrs	r1, r4
 8003398:	f001 87d9 	beq.w	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 800339c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033a0:	4cd2      	ldr	r4, [pc, #840]	@ (80036ec <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80033a2:	42a0      	cmp	r0, r4
 80033a4:	f171 0100 	sbcs.w	r1, r1, #0
 80033a8:	f082 822c 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80033ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033b0:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80033b4:	4321      	orrs	r1, r4
 80033b6:	f001 8751 	beq.w	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80033ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033be:	4ccc      	ldr	r4, [pc, #816]	@ (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80033c0:	42a0      	cmp	r0, r4
 80033c2:	f171 0100 	sbcs.w	r1, r1, #0
 80033c6:	f082 821d 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80033ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033ce:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80033d2:	4321      	orrs	r1, r4
 80033d4:	f001 869a 	beq.w	800510c <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 80033d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033dc:	4cc5      	ldr	r4, [pc, #788]	@ (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80033de:	42a0      	cmp	r0, r4
 80033e0:	f171 0100 	sbcs.w	r1, r1, #0
 80033e4:	f082 820e 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80033e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033ec:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 80033f0:	4321      	orrs	r1, r4
 80033f2:	f001 8612 	beq.w	800501a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 80033f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033fa:	4cbf      	ldr	r4, [pc, #764]	@ (80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80033fc:	42a0      	cmp	r0, r4
 80033fe:	f171 0100 	sbcs.w	r1, r1, #0
 8003402:	f082 81ff 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003406:	e9d7 0100 	ldrd	r0, r1, [r7]
 800340a:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800340e:	4321      	orrs	r1, r4
 8003410:	f002 817e 	beq.w	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8003414:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003418:	4cb8      	ldr	r4, [pc, #736]	@ (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800341a:	42a0      	cmp	r0, r4
 800341c:	f171 0100 	sbcs.w	r1, r1, #0
 8003420:	f082 81f0 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003424:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003428:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 800342c:	4321      	orrs	r1, r4
 800342e:	f000 829e 	beq.w	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8003432:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003436:	4cb2      	ldr	r4, [pc, #712]	@ (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003438:	42a0      	cmp	r0, r4
 800343a:	f171 0100 	sbcs.w	r1, r1, #0
 800343e:	f082 81e1 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003442:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003446:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800344a:	4321      	orrs	r1, r4
 800344c:	f000 826d 	beq.w	800392a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8003450:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003454:	4cab      	ldr	r4, [pc, #684]	@ (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003456:	42a0      	cmp	r0, r4
 8003458:	f171 0100 	sbcs.w	r1, r1, #0
 800345c:	f082 81d2 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003460:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003464:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8003468:	4321      	orrs	r1, r4
 800346a:	f001 800d 	beq.w	8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800346e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003472:	4ca5      	ldr	r4, [pc, #660]	@ (8003708 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8003474:	42a0      	cmp	r0, r4
 8003476:	f171 0100 	sbcs.w	r1, r1, #0
 800347a:	f082 81c3 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800347e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003482:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8003486:	4321      	orrs	r1, r4
 8003488:	f000 81d0 	beq.w	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800348c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003490:	4c9e      	ldr	r4, [pc, #632]	@ (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8003492:	42a0      	cmp	r0, r4
 8003494:	f171 0100 	sbcs.w	r1, r1, #0
 8003498:	f082 81b4 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800349c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034a0:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 80034a4:	4321      	orrs	r1, r4
 80034a6:	f000 8142 	beq.w	800372e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 80034aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034ae:	4c98      	ldr	r4, [pc, #608]	@ (8003710 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80034b0:	42a0      	cmp	r0, r4
 80034b2:	f171 0100 	sbcs.w	r1, r1, #0
 80034b6:	f082 81a5 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80034ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034be:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80034c2:	4321      	orrs	r1, r4
 80034c4:	f001 824e 	beq.w	8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 80034c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034cc:	4c91      	ldr	r4, [pc, #580]	@ (8003714 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80034ce:	42a0      	cmp	r0, r4
 80034d0:	f171 0100 	sbcs.w	r1, r1, #0
 80034d4:	f082 8196 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80034d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034dc:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80034e0:	4321      	orrs	r1, r4
 80034e2:	f001 8197 	beq.w	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 80034e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034ea:	4c8b      	ldr	r4, [pc, #556]	@ (8003718 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80034ec:	42a0      	cmp	r0, r4
 80034ee:	f171 0100 	sbcs.w	r1, r1, #0
 80034f2:	f082 8187 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80034f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034fa:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 80034fe:	4321      	orrs	r1, r4
 8003500:	f001 8154 	beq.w	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8003504:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003508:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 800350c:	f171 0100 	sbcs.w	r1, r1, #0
 8003510:	f082 8178 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003514:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003518:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 800351c:	4321      	orrs	r1, r4
 800351e:	f001 80b7 	beq.w	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8003522:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003526:	f248 0401 	movw	r4, #32769	@ 0x8001
 800352a:	42a0      	cmp	r0, r4
 800352c:	f171 0100 	sbcs.w	r1, r1, #0
 8003530:	f082 8168 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003534:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003538:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 800353c:	4321      	orrs	r1, r4
 800353e:	f001 8064 	beq.w	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8003542:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003546:	f244 0401 	movw	r4, #16385	@ 0x4001
 800354a:	42a0      	cmp	r0, r4
 800354c:	f171 0100 	sbcs.w	r1, r1, #0
 8003550:	f082 8158 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003554:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003558:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 800355c:	4321      	orrs	r1, r4
 800355e:	f001 8011 	beq.w	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8003562:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003566:	f242 0401 	movw	r4, #8193	@ 0x2001
 800356a:	42a0      	cmp	r0, r4
 800356c:	f171 0100 	sbcs.w	r1, r1, #0
 8003570:	f082 8148 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003574:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003578:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 800357c:	4321      	orrs	r1, r4
 800357e:	f000 871e 	beq.w	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8003582:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003586:	f241 0401 	movw	r4, #4097	@ 0x1001
 800358a:	42a0      	cmp	r0, r4
 800358c:	f171 0100 	sbcs.w	r1, r1, #0
 8003590:	f082 8138 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003594:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003598:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 800359c:	4321      	orrs	r1, r4
 800359e:	f000 86a8 	beq.w	80042f2 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 80035a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035a6:	f640 0401 	movw	r4, #2049	@ 0x801
 80035aa:	42a0      	cmp	r0, r4
 80035ac:	f171 0100 	sbcs.w	r1, r1, #0
 80035b0:	f082 8128 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80035b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035b8:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 80035bc:	4321      	orrs	r1, r4
 80035be:	f000 8632 	beq.w	8004226 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 80035c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035c6:	f240 4401 	movw	r4, #1025	@ 0x401
 80035ca:	42a0      	cmp	r0, r4
 80035cc:	f171 0100 	sbcs.w	r1, r1, #0
 80035d0:	f082 8118 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80035d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035d8:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 80035dc:	4321      	orrs	r1, r4
 80035de:	f000 85b0 	beq.w	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 80035e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035e6:	f240 2401 	movw	r4, #513	@ 0x201
 80035ea:	42a0      	cmp	r0, r4
 80035ec:	f171 0100 	sbcs.w	r1, r1, #0
 80035f0:	f082 8108 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80035f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035f8:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 80035fc:	4321      	orrs	r1, r4
 80035fe:	f000 8535 	beq.w	800406c <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8003602:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003606:	f240 1401 	movw	r4, #257	@ 0x101
 800360a:	42a0      	cmp	r0, r4
 800360c:	f171 0100 	sbcs.w	r1, r1, #0
 8003610:	f082 80f8 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003614:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003618:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 800361c:	4321      	orrs	r1, r4
 800361e:	f000 84ba 	beq.w	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8003622:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003626:	2881      	cmp	r0, #129	@ 0x81
 8003628:	f171 0100 	sbcs.w	r1, r1, #0
 800362c:	f082 80ea 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003630:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003634:	2821      	cmp	r0, #33	@ 0x21
 8003636:	f171 0100 	sbcs.w	r1, r1, #0
 800363a:	d26f      	bcs.n	800371c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800363c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003640:	4301      	orrs	r1, r0
 8003642:	f002 80df 	beq.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003646:	e9d7 0100 	ldrd	r0, r1, [r7]
 800364a:	1e42      	subs	r2, r0, #1
 800364c:	f141 33ff 	adc.w	r3, r1, #4294967295
 8003650:	2a20      	cmp	r2, #32
 8003652:	f173 0100 	sbcs.w	r1, r3, #0
 8003656:	f082 80d5 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800365a:	2a1f      	cmp	r2, #31
 800365c:	f202 80d2 	bhi.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003660:	a101      	add	r1, pc, #4	@ (adr r1, 8003668 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8003662:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003666:	bf00      	nop
 8003668:	080039c9 	.word	0x080039c9
 800366c:	08003a95 	.word	0x08003a95
 8003670:	08005805 	.word	0x08005805
 8003674:	08003b55 	.word	0x08003b55
 8003678:	08005805 	.word	0x08005805
 800367c:	08005805 	.word	0x08005805
 8003680:	08005805 	.word	0x08005805
 8003684:	08003c25 	.word	0x08003c25
 8003688:	08005805 	.word	0x08005805
 800368c:	08005805 	.word	0x08005805
 8003690:	08005805 	.word	0x08005805
 8003694:	08005805 	.word	0x08005805
 8003698:	08005805 	.word	0x08005805
 800369c:	08005805 	.word	0x08005805
 80036a0:	08005805 	.word	0x08005805
 80036a4:	08003d07 	.word	0x08003d07
 80036a8:	08005805 	.word	0x08005805
 80036ac:	08005805 	.word	0x08005805
 80036b0:	08005805 	.word	0x08005805
 80036b4:	08005805 	.word	0x08005805
 80036b8:	08005805 	.word	0x08005805
 80036bc:	08005805 	.word	0x08005805
 80036c0:	08005805 	.word	0x08005805
 80036c4:	08005805 	.word	0x08005805
 80036c8:	08005805 	.word	0x08005805
 80036cc:	08005805 	.word	0x08005805
 80036d0:	08005805 	.word	0x08005805
 80036d4:	08005805 	.word	0x08005805
 80036d8:	08005805 	.word	0x08005805
 80036dc:	08005805 	.word	0x08005805
 80036e0:	08005805 	.word	0x08005805
 80036e4:	08003ddd 	.word	0x08003ddd
 80036e8:	80000001 	.word	0x80000001
 80036ec:	40000001 	.word	0x40000001
 80036f0:	20000001 	.word	0x20000001
 80036f4:	10000001 	.word	0x10000001
 80036f8:	08000001 	.word	0x08000001
 80036fc:	04000001 	.word	0x04000001
 8003700:	00800001 	.word	0x00800001
 8003704:	00400001 	.word	0x00400001
 8003708:	00200001 	.word	0x00200001
 800370c:	00100001 	.word	0x00100001
 8003710:	00080001 	.word	0x00080001
 8003714:	00040001 	.word	0x00040001
 8003718:	00020001 	.word	0x00020001
 800371c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003720:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8003724:	430b      	orrs	r3, r1
 8003726:	f000 83c4 	beq.w	8003eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800372a:	f002 b86b 	b.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800372e:	4ba1      	ldr	r3, [pc, #644]	@ (80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003730:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003734:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8003738:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800373a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003740:	d036      	beq.n	80037b0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8003742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003744:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003748:	d86b      	bhi.n	8003822 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800374a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003750:	d02b      	beq.n	80037aa <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8003752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003754:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003758:	d863      	bhi.n	8003822 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800375a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003760:	d01b      	beq.n	800379a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8003762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003764:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003768:	d85b      	bhi.n	8003822 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800376a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376c:	2b00      	cmp	r3, #0
 800376e:	d004      	beq.n	800377a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8003770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003776:	d008      	beq.n	800378a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8003778:	e053      	b.n	8003822 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800377a:	f107 0320 	add.w	r3, r7, #32
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff f8b4 	bl	80028ec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8003784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003786:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003788:	e04e      	b.n	8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800378a:	f107 0314 	add.w	r3, r7, #20
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff fa18 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003798:	e046      	b.n	8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800379a:	f107 0308 	add.w	r3, r7, #8
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff fb7c 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80037a8:	e03e      	b.n	8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80037aa:	4b83      	ldr	r3, [pc, #524]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80037ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80037ae:	e03b      	b.n	8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80037b0:	4b80      	ldr	r3, [pc, #512]	@ (80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80037b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037b6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80037ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80037bc:	4b7d      	ldr	r3, [pc, #500]	@ (80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d10c      	bne.n	80037e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80037c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d109      	bne.n	80037e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80037ce:	4b79      	ldr	r3, [pc, #484]	@ (80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	08db      	lsrs	r3, r3, #3
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	4a78      	ldr	r2, [pc, #480]	@ (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80037da:	fa22 f303 	lsr.w	r3, r2, r3
 80037de:	637b      	str	r3, [r7, #52]	@ 0x34
 80037e0:	e01e      	b.n	8003820 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80037e2:	4b74      	ldr	r3, [pc, #464]	@ (80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037ee:	d106      	bne.n	80037fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80037f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037f6:	d102      	bne.n	80037fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80037f8:	4b71      	ldr	r3, [pc, #452]	@ (80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80037fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80037fc:	e010      	b.n	8003820 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80037fe:	4b6d      	ldr	r3, [pc, #436]	@ (80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003806:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800380a:	d106      	bne.n	800381a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800380c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003812:	d102      	bne.n	800381a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8003814:	4b6b      	ldr	r3, [pc, #428]	@ (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8003816:	637b      	str	r3, [r7, #52]	@ 0x34
 8003818:	e002      	b.n	8003820 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800381e:	e003      	b.n	8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8003820:	e002      	b.n	8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003826:	bf00      	nop
          }
        }
        break;
 8003828:	f001 bfef 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800382c:	4b61      	ldr	r3, [pc, #388]	@ (80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800382e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003832:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8003836:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8003838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800383e:	d036      	beq.n	80038ae <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8003840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003842:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003846:	d86b      	bhi.n	8003920 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8003848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800384e:	d02b      	beq.n	80038a8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8003850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003852:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003856:	d863      	bhi.n	8003920 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8003858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800385e:	d01b      	beq.n	8003898 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8003860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003862:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003866:	d85b      	bhi.n	8003920 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8003868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386a:	2b00      	cmp	r3, #0
 800386c:	d004      	beq.n	8003878 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800386e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003870:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003874:	d008      	beq.n	8003888 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8003876:	e053      	b.n	8003920 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003878:	f107 0320 	add.w	r3, r7, #32
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff f835 	bl	80028ec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003886:	e04e      	b.n	8003926 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003888:	f107 0314 	add.w	r3, r7, #20
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff f999 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003896:	e046      	b.n	8003926 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003898:	f107 0308 	add.w	r3, r7, #8
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff fafd 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80038a6:	e03e      	b.n	8003926 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80038a8:	4b43      	ldr	r3, [pc, #268]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80038aa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80038ac:	e03b      	b.n	8003926 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80038ae:	4b41      	ldr	r3, [pc, #260]	@ (80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80038b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80038b4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80038b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80038ba:	4b3e      	ldr	r3, [pc, #248]	@ (80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d10c      	bne.n	80038e0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80038c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d109      	bne.n	80038e0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80038cc:	4b39      	ldr	r3, [pc, #228]	@ (80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	08db      	lsrs	r3, r3, #3
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	4a39      	ldr	r2, [pc, #228]	@ (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80038d8:	fa22 f303 	lsr.w	r3, r2, r3
 80038dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80038de:	e01e      	b.n	800391e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80038e0:	4b34      	ldr	r3, [pc, #208]	@ (80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038ec:	d106      	bne.n	80038fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80038ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f4:	d102      	bne.n	80038fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80038f6:	4b32      	ldr	r3, [pc, #200]	@ (80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80038f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80038fa:	e010      	b.n	800391e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80038fc:	4b2d      	ldr	r3, [pc, #180]	@ (80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003904:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003908:	d106      	bne.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800390a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800390c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003910:	d102      	bne.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8003912:	4b2c      	ldr	r3, [pc, #176]	@ (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8003914:	637b      	str	r3, [r7, #52]	@ 0x34
 8003916:	e002      	b.n	800391e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800391c:	e003      	b.n	8003926 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800391e:	e002      	b.n	8003926 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003924:	bf00      	nop
          }
        }
        break;
 8003926:	f001 bf70 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800392a:	4b22      	ldr	r3, [pc, #136]	@ (80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800392c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003934:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8003936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003938:	2b00      	cmp	r3, #0
 800393a:	d108      	bne.n	800394e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800393c:	f107 0320 	add.w	r3, r7, #32
 8003940:	4618      	mov	r0, r3
 8003942:	f7fe ffd3 	bl	80028ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003948:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800394a:	f001 bf5e 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800394e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003950:	2b40      	cmp	r3, #64	@ 0x40
 8003952:	d108      	bne.n	8003966 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003954:	f107 0314 	add.w	r3, r7, #20
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff f933 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003962:	f001 bf52 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800396a:	f001 bf4e 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800396e:	4b11      	ldr	r3, [pc, #68]	@ (80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003970:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003978:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800397a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397c:	2b00      	cmp	r3, #0
 800397e:	d108      	bne.n	8003992 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003980:	f107 0320 	add.w	r3, r7, #32
 8003984:	4618      	mov	r0, r3
 8003986:	f7fe ffb1 	bl	80028ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800398e:	f001 bf3c 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8003992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003994:	2b80      	cmp	r3, #128	@ 0x80
 8003996:	d108      	bne.n	80039aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003998:	f107 0314 	add.w	r3, r7, #20
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff f911 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80039a6:	f001 bf30 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80039ae:	f001 bf2c 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80039b2:	bf00      	nop
 80039b4:	44020c00 	.word	0x44020c00
 80039b8:	00bb8000 	.word	0x00bb8000
 80039bc:	03d09000 	.word	0x03d09000
 80039c0:	003d0900 	.word	0x003d0900
 80039c4:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80039c8:	4b9d      	ldr	r3, [pc, #628]	@ (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80039ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80039d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d104      	bne.n	80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80039da:	f7fe ff5b 	bl	8002894 <HAL_RCC_GetPCLK2Freq>
 80039de:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80039e0:	f001 bf13 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80039e4:	4b96      	ldr	r3, [pc, #600]	@ (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039f0:	d10a      	bne.n	8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80039f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d107      	bne.n	8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80039f8:	f107 0314 	add.w	r3, r7, #20
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff f8e1 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a06:	e043      	b.n	8003a90 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8003a08:	4b8d      	ldr	r3, [pc, #564]	@ (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a14:	d10a      	bne.n	8003a2c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8003a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d107      	bne.n	8003a2c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003a1c:	f107 0308 	add.w	r3, r7, #8
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fa3b 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a2a:	e031      	b.n	8003a90 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8003a2c:	4b84      	ldr	r3, [pc, #528]	@ (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d10c      	bne.n	8003a52 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8003a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3a:	2b03      	cmp	r3, #3
 8003a3c:	d109      	bne.n	8003a52 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003a3e:	4b80      	ldr	r3, [pc, #512]	@ (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	08db      	lsrs	r3, r3, #3
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	4a7e      	ldr	r2, [pc, #504]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8003a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a50:	e01e      	b.n	8003a90 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8003a52:	4b7b      	ldr	r3, [pc, #492]	@ (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a5e:	d105      	bne.n	8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8003a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d102      	bne.n	8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8003a66:	4b78      	ldr	r3, [pc, #480]	@ (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003a68:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a6a:	e011      	b.n	8003a90 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003a6c:	4b74      	ldr	r3, [pc, #464]	@ (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003a6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d106      	bne.n	8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7c:	2b05      	cmp	r3, #5
 8003a7e:	d103      	bne.n	8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8003a80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a86:	e003      	b.n	8003a90 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003a8c:	f001 bebd 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003a90:	f001 bebb 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003a94:	4b6a      	ldr	r3, [pc, #424]	@ (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003a96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003a9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a9e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d104      	bne.n	8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003aa6:	f7fe fedf 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 8003aaa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8003aac:	f001 bead 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8003ab0:	4b63      	ldr	r3, [pc, #396]	@ (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ab8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003abc:	d10a      	bne.n	8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d107      	bne.n	8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ac4:	f107 0314 	add.w	r3, r7, #20
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff f87b 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ad2:	e03d      	b.n	8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d108      	bne.n	8003aec <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003ada:	f107 0308 	add.w	r3, r7, #8
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff f9dc 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003ae8:	f001 be8f 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8003aec:	4b54      	ldr	r3, [pc, #336]	@ (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d10c      	bne.n	8003b12 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8003af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afa:	2b18      	cmp	r3, #24
 8003afc:	d109      	bne.n	8003b12 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003afe:	4b50      	ldr	r3, [pc, #320]	@ (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	08db      	lsrs	r3, r3, #3
 8003b04:	f003 0303 	and.w	r3, r3, #3
 8003b08:	4a4e      	ldr	r2, [pc, #312]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8003b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b10:	e01e      	b.n	8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8003b12:	4b4b      	ldr	r3, [pc, #300]	@ (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b1e:	d105      	bne.n	8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8003b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	d102      	bne.n	8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8003b26:	4b48      	ldr	r3, [pc, #288]	@ (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003b28:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b2a:	e011      	b.n	8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8003b2c:	4b44      	ldr	r3, [pc, #272]	@ (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003b2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d106      	bne.n	8003b48 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3c:	2b28      	cmp	r3, #40	@ 0x28
 8003b3e:	d103      	bne.n	8003b48 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8003b40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b46:	e003      	b.n	8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003b4c:	f001 be5d 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003b50:	f001 be5b 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003b54:	4b3a      	ldr	r3, [pc, #232]	@ (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003b56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003b5a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8003b5e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d104      	bne.n	8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003b66:	f7fe fe7f 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 8003b6a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8003b6c:	f001 be4d 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8003b70:	4b33      	ldr	r3, [pc, #204]	@ (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b7c:	d10a      	bne.n	8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b80:	2b40      	cmp	r3, #64	@ 0x40
 8003b82:	d107      	bne.n	8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b84:	f107 0314 	add.w	r3, r7, #20
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff f81b 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b92:	e045      	b.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8003b94:	4b2a      	ldr	r3, [pc, #168]	@ (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ba0:	d10a      	bne.n	8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba4:	2b80      	cmp	r3, #128	@ 0x80
 8003ba6:	d107      	bne.n	8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003ba8:	f107 0308 	add.w	r3, r7, #8
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff f975 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bb6:	e033      	b.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003bb8:	4b21      	ldr	r3, [pc, #132]	@ (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d10c      	bne.n	8003bde <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bc8:	d109      	bne.n	8003bde <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003bca:	4b1d      	ldr	r3, [pc, #116]	@ (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	08db      	lsrs	r3, r3, #3
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8003bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bdc:	e020      	b.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8003bde:	4b18      	ldr	r3, [pc, #96]	@ (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003be6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bea:	d106      	bne.n	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8003bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bf2:	d102      	bne.n	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8003bf4:	4b14      	ldr	r3, [pc, #80]	@ (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003bf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bf8:	e012      	b.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003bfa:	4b11      	ldr	r3, [pc, #68]	@ (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003bfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d107      	bne.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8003c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c0a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003c0e:	d103      	bne.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8003c10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c16:	e003      	b.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c1c:	f001 bdf5 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003c20:	f001 bdf3 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003c24:	4b06      	ldr	r3, [pc, #24]	@ (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003c26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003c2a:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8003c2e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8003c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10a      	bne.n	8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003c36:	f7fe fe17 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 8003c3a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8003c3c:	f001 bde5 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003c40:	44020c00 	.word	0x44020c00
 8003c44:	03d09000 	.word	0x03d09000
 8003c48:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8003c4c:	4ba0      	ldr	r3, [pc, #640]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c58:	d10b      	bne.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c60:	d107      	bne.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c62:	f107 0314 	add.w	r3, r7, #20
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fe ffac 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c70:	e047      	b.n	8003d02 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8003c72:	4b97      	ldr	r3, [pc, #604]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c7e:	d10b      	bne.n	8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8003c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c86:	d107      	bne.n	8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003c88:	f107 0308 	add.w	r3, r7, #8
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff f905 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c96:	e034      	b.n	8003d02 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8003c98:	4b8d      	ldr	r3, [pc, #564]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d10d      	bne.n	8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003caa:	d109      	bne.n	8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003cac:	4b88      	ldr	r3, [pc, #544]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	08db      	lsrs	r3, r3, #3
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	4a87      	ldr	r2, [pc, #540]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8003cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cbe:	e020      	b.n	8003d02 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8003cc0:	4b83      	ldr	r3, [pc, #524]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ccc:	d106      	bne.n	8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8003cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cd4:	d102      	bne.n	8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8003cd6:	4b80      	ldr	r3, [pc, #512]	@ (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8003cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cda:	e012      	b.n	8003d02 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8003cdc:	4b7c      	ldr	r3, [pc, #496]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003cde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d107      	bne.n	8003cfa <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8003cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cec:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003cf0:	d103      	bne.n	8003cfa <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8003cf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cf8:	e003      	b.n	8003d02 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003cfe:	f001 bd84 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003d02:	f001 bd82 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003d06:	4b72      	ldr	r3, [pc, #456]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003d08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003d0c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8003d10:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8003d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d104      	bne.n	8003d22 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003d18:	f7fe fda6 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 8003d1c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8003d1e:	f001 bd74 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8003d22:	4b6b      	ldr	r3, [pc, #428]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d2e:	d10b      	bne.n	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8003d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d36:	d107      	bne.n	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d38:	f107 0314 	add.w	r3, r7, #20
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fe ff41 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d46:	e047      	b.n	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8003d48:	4b61      	ldr	r3, [pc, #388]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d54:	d10b      	bne.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8003d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d5c:	d107      	bne.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003d5e:	f107 0308 	add.w	r3, r7, #8
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff f89a 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d6c:	e034      	b.n	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8003d6e:	4b58      	ldr	r3, [pc, #352]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d10d      	bne.n	8003d96 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d80:	d109      	bne.n	8003d96 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d82:	4b53      	ldr	r3, [pc, #332]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	08db      	lsrs	r3, r3, #3
 8003d88:	f003 0303 	and.w	r3, r3, #3
 8003d8c:	4a51      	ldr	r2, [pc, #324]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8003d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d92:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d94:	e020      	b.n	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8003d96:	4b4e      	ldr	r3, [pc, #312]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003da2:	d106      	bne.n	8003db2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8003da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003daa:	d102      	bne.n	8003db2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8003dac:	4b4a      	ldr	r3, [pc, #296]	@ (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8003dae:	637b      	str	r3, [r7, #52]	@ 0x34
 8003db0:	e012      	b.n	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8003db2:	4b47      	ldr	r3, [pc, #284]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003db4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d107      	bne.n	8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003dc6:	d103      	bne.n	8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8003dc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dce:	e003      	b.n	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003dd4:	f001 bd19 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003dd8:	f001 bd17 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8003ddc:	4b3c      	ldr	r3, [pc, #240]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003dde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003de2:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8003de6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8003de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d104      	bne.n	8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003dee:	f7fe fd3b 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 8003df2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8003df4:	f001 bd09 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8003df8:	4b35      	ldr	r3, [pc, #212]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e04:	d10b      	bne.n	8003e1e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8003e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e0c:	d107      	bne.n	8003e1e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003e0e:	f107 0314 	add.w	r3, r7, #20
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe fed6 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e1c:	e047      	b.n	8003eae <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8003e1e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e2a:	d10b      	bne.n	8003e44 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e32:	d107      	bne.n	8003e44 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003e34:	f107 0308 	add.w	r3, r7, #8
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff f82f 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e42:	e034      	b.n	8003eae <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8003e44:	4b22      	ldr	r3, [pc, #136]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d10d      	bne.n	8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8003e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e52:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003e56:	d109      	bne.n	8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003e58:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	08db      	lsrs	r3, r3, #3
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8003e64:	fa22 f303 	lsr.w	r3, r2, r3
 8003e68:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e6a:	e020      	b.n	8003eae <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8003e6c:	4b18      	ldr	r3, [pc, #96]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e78:	d106      	bne.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e80:	d102      	bne.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8003e82:	4b15      	ldr	r3, [pc, #84]	@ (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8003e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e86:	e012      	b.n	8003eae <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8003e88:	4b11      	ldr	r3, [pc, #68]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003e8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d107      	bne.n	8003ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8003e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e98:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003e9c:	d103      	bne.n	8003ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8003e9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ea4:	e003      	b.n	8003eae <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003eaa:	f001 bcae 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003eae:	f001 bcac 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8003eb2:	4b07      	ldr	r3, [pc, #28]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003eb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003eb8:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8003ebc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10b      	bne.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003ec4:	f7fe fcd0 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 8003ec8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8003eca:	f001 bc9e 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003ece:	bf00      	nop
 8003ed0:	44020c00 	.word	0x44020c00
 8003ed4:	03d09000 	.word	0x03d09000
 8003ed8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8003edc:	4ba0      	ldr	r3, [pc, #640]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ee4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ee8:	d10b      	bne.n	8003f02 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8003eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ef0:	d107      	bne.n	8003f02 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ef2:	f107 0314 	add.w	r3, r7, #20
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe fe64 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f00:	e047      	b.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8003f02:	4b97      	ldr	r3, [pc, #604]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f0e:	d10b      	bne.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8003f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f12:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f16:	d107      	bne.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003f18:	f107 0308 	add.w	r3, r7, #8
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7fe ffbd 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f26:	e034      	b.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8003f28:	4b8d      	ldr	r3, [pc, #564]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d10d      	bne.n	8003f50 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8003f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f36:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003f3a:	d109      	bne.n	8003f50 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f3c:	4b88      	ldr	r3, [pc, #544]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	08db      	lsrs	r3, r3, #3
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	4a87      	ldr	r2, [pc, #540]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8003f48:	fa22 f303 	lsr.w	r3, r2, r3
 8003f4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f4e:	e020      	b.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8003f50:	4b83      	ldr	r3, [pc, #524]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f5c:	d106      	bne.n	8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f64:	d102      	bne.n	8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8003f66:	4b80      	ldr	r3, [pc, #512]	@ (8004168 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8003f68:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f6a:	e012      	b.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8003f6c:	4b7c      	ldr	r3, [pc, #496]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003f6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d107      	bne.n	8003f8a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003f80:	d103      	bne.n	8003f8a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8003f82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f86:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f88:	e003      	b.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f8e:	f001 bc3c 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003f92:	f001 bc3a 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8003f96:	4b72      	ldr	r3, [pc, #456]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003f98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003f9c:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8003fa0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d104      	bne.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003fa8:	f7fe fc5e 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 8003fac:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8003fae:	f001 bc2c 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8003fb2:	4b6b      	ldr	r3, [pc, #428]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fbe:	d10b      	bne.n	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fc6:	d107      	bne.n	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003fc8:	f107 0314 	add.w	r3, r7, #20
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fe fdf9 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fd6:	e047      	b.n	8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8003fd8:	4b61      	ldr	r3, [pc, #388]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fe0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fe4:	d10b      	bne.n	8003ffe <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fec:	d107      	bne.n	8003ffe <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003fee:	f107 0308 	add.w	r3, r7, #8
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fe ff52 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ffc:	e034      	b.n	8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8003ffe:	4b58      	ldr	r3, [pc, #352]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b02      	cmp	r3, #2
 8004008:	d10d      	bne.n	8004026 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800400a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004010:	d109      	bne.n	8004026 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004012:	4b53      	ldr	r3, [pc, #332]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	08db      	lsrs	r3, r3, #3
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	4a51      	ldr	r2, [pc, #324]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800401e:	fa22 f303 	lsr.w	r3, r2, r3
 8004022:	637b      	str	r3, [r7, #52]	@ 0x34
 8004024:	e020      	b.n	8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8004026:	4b4e      	ldr	r3, [pc, #312]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800402e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004032:	d106      	bne.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8004034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004036:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800403a:	d102      	bne.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800403c:	4b4a      	ldr	r3, [pc, #296]	@ (8004168 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800403e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004040:	e012      	b.n	8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8004042:	4b47      	ldr	r3, [pc, #284]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b02      	cmp	r3, #2
 800404e:	d107      	bne.n	8004060 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8004050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004052:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004056:	d103      	bne.n	8004060 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8004058:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800405c:	637b      	str	r3, [r7, #52]	@ 0x34
 800405e:	e003      	b.n	8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004064:	f001 bbd1 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004068:	f001 bbcf 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800406c:	4b3c      	ldr	r3, [pc, #240]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800406e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004072:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004076:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8004078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407a:	2b00      	cmp	r3, #0
 800407c:	d104      	bne.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800407e:	f7fe fbf3 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 8004082:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8004084:	f001 bbc1 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8004088:	4b35      	ldr	r3, [pc, #212]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004090:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004094:	d10b      	bne.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8004096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004098:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800409c:	d107      	bne.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800409e:	f107 0314 	add.w	r3, r7, #20
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fe fd8e 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80040ac:	e047      	b.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80040ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040ba:	d10b      	bne.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80040bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040c2:	d107      	bne.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80040c4:	f107 0308 	add.w	r3, r7, #8
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fe fee7 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80040d2:	e034      	b.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 80040d4:	4b22      	ldr	r3, [pc, #136]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d10d      	bne.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 80040e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80040e6:	d109      	bne.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80040e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	08db      	lsrs	r3, r3, #3
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80040f4:	fa22 f303 	lsr.w	r3, r2, r3
 80040f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80040fa:	e020      	b.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 80040fc:	4b18      	ldr	r3, [pc, #96]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004108:	d106      	bne.n	8004118 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800410a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004110:	d102      	bne.n	8004118 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8004112:	4b15      	ldr	r3, [pc, #84]	@ (8004168 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8004114:	637b      	str	r3, [r7, #52]	@ 0x34
 8004116:	e012      	b.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8004118:	4b11      	ldr	r3, [pc, #68]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800411a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b02      	cmp	r3, #2
 8004124:	d107      	bne.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8004126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004128:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800412c:	d103      	bne.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800412e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004132:	637b      	str	r3, [r7, #52]	@ 0x34
 8004134:	e003      	b.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800413a:	f001 bb66 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800413e:	f001 bb64 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8004142:	4b07      	ldr	r3, [pc, #28]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004144:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004148:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800414c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800414e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10b      	bne.n	800416c <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004154:	f7fe fb88 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 8004158:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800415a:	f001 bb56 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800415e:	bf00      	nop
 8004160:	44020c00 	.word	0x44020c00
 8004164:	03d09000 	.word	0x03d09000
 8004168:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800416c:	4ba1      	ldr	r3, [pc, #644]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004174:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004178:	d10b      	bne.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800417a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004180:	d107      	bne.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004182:	f107 0314 	add.w	r3, r7, #20
 8004186:	4618      	mov	r0, r3
 8004188:	f7fe fd1c 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004190:	e047      	b.n	8004222 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8004192:	4b98      	ldr	r3, [pc, #608]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800419a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800419e:	d10b      	bne.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 80041a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041a6:	d107      	bne.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80041a8:	f107 0308 	add.w	r3, r7, #8
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fe fe75 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80041b6:	e034      	b.n	8004222 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80041b8:	4b8e      	ldr	r3, [pc, #568]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d10d      	bne.n	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 80041c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80041ca:	d109      	bne.n	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80041cc:	4b89      	ldr	r3, [pc, #548]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	08db      	lsrs	r3, r3, #3
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	4a88      	ldr	r2, [pc, #544]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80041d8:	fa22 f303 	lsr.w	r3, r2, r3
 80041dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80041de:	e020      	b.n	8004222 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80041e0:	4b84      	ldr	r3, [pc, #528]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041ec:	d106      	bne.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 80041ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041f4:	d102      	bne.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 80041f6:	4b81      	ldr	r3, [pc, #516]	@ (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80041f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80041fa:	e012      	b.n	8004222 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 80041fc:	4b7d      	ldr	r3, [pc, #500]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80041fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b02      	cmp	r3, #2
 8004208:	d107      	bne.n	800421a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800420a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8004210:	d103      	bne.n	800421a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8004212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004216:	637b      	str	r3, [r7, #52]	@ 0x34
 8004218:	e003      	b.n	8004222 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800421e:	f001 baf4 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004222:	f001 baf2 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8004226:	4b73      	ldr	r3, [pc, #460]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004228:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8004232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004234:	2b00      	cmp	r3, #0
 8004236:	d104      	bne.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004238:	f7fe fb16 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 800423c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800423e:	f001 bae4 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8004242:	4b6c      	ldr	r3, [pc, #432]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800424a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800424e:	d10a      	bne.n	8004266 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8004250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004252:	2b01      	cmp	r3, #1
 8004254:	d107      	bne.n	8004266 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004256:	f107 0314 	add.w	r3, r7, #20
 800425a:	4618      	mov	r0, r3
 800425c:	f7fe fcb2 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	637b      	str	r3, [r7, #52]	@ 0x34
 8004264:	e043      	b.n	80042ee <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8004266:	4b63      	ldr	r3, [pc, #396]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800426e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004272:	d10a      	bne.n	800428a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8004274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004276:	2b02      	cmp	r3, #2
 8004278:	d107      	bne.n	800428a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800427a:	f107 0308 	add.w	r3, r7, #8
 800427e:	4618      	mov	r0, r3
 8004280:	f7fe fe0c 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	637b      	str	r3, [r7, #52]	@ 0x34
 8004288:	e031      	b.n	80042ee <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800428a:	4b5a      	ldr	r3, [pc, #360]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b02      	cmp	r3, #2
 8004294:	d10c      	bne.n	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8004296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004298:	2b03      	cmp	r3, #3
 800429a:	d109      	bne.n	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800429c:	4b55      	ldr	r3, [pc, #340]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	08db      	lsrs	r3, r3, #3
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	4a54      	ldr	r2, [pc, #336]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80042a8:	fa22 f303 	lsr.w	r3, r2, r3
 80042ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80042ae:	e01e      	b.n	80042ee <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80042b0:	4b50      	ldr	r3, [pc, #320]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042bc:	d105      	bne.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80042be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d102      	bne.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 80042c4:	4b4d      	ldr	r3, [pc, #308]	@ (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80042c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80042c8:	e011      	b.n	80042ee <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 80042ca:	4b4a      	ldr	r3, [pc, #296]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80042cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d106      	bne.n	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 80042d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042da:	2b05      	cmp	r3, #5
 80042dc:	d103      	bne.n	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 80042de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80042e4:	e003      	b.n	80042ee <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042ea:	f001 ba8e 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80042ee:	f001 ba8c 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 80042f2:	4b40      	ldr	r3, [pc, #256]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80042f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80042f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042fc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 80042fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004300:	2b00      	cmp	r3, #0
 8004302:	d104      	bne.n	800430e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004304:	f7fe fab0 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 8004308:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800430a:	f001 ba7e 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800430e:	4b39      	ldr	r3, [pc, #228]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004316:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800431a:	d10a      	bne.n	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800431c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431e:	2b10      	cmp	r3, #16
 8004320:	d107      	bne.n	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004322:	f107 0314 	add.w	r3, r7, #20
 8004326:	4618      	mov	r0, r3
 8004328:	f7fe fc4c 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004330:	e043      	b.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8004332:	4b30      	ldr	r3, [pc, #192]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800433a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800433e:	d10a      	bne.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8004340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004342:	2b20      	cmp	r3, #32
 8004344:	d107      	bne.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004346:	f107 0308 	add.w	r3, r7, #8
 800434a:	4618      	mov	r0, r3
 800434c:	f7fe fda6 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	637b      	str	r3, [r7, #52]	@ 0x34
 8004354:	e031      	b.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8004356:	4b27      	ldr	r3, [pc, #156]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b02      	cmp	r3, #2
 8004360:	d10c      	bne.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8004362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004364:	2b30      	cmp	r3, #48	@ 0x30
 8004366:	d109      	bne.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004368:	4b22      	ldr	r3, [pc, #136]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	08db      	lsrs	r3, r3, #3
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	4a21      	ldr	r2, [pc, #132]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8004374:	fa22 f303 	lsr.w	r3, r2, r3
 8004378:	637b      	str	r3, [r7, #52]	@ 0x34
 800437a:	e01e      	b.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800437c:	4b1d      	ldr	r3, [pc, #116]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004388:	d105      	bne.n	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800438a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438c:	2b40      	cmp	r3, #64	@ 0x40
 800438e:	d102      	bne.n	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8004390:	4b1a      	ldr	r3, [pc, #104]	@ (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8004392:	637b      	str	r3, [r7, #52]	@ 0x34
 8004394:	e011      	b.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8004396:	4b17      	ldr	r3, [pc, #92]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004398:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d106      	bne.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 80043a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a6:	2b50      	cmp	r3, #80	@ 0x50
 80043a8:	d103      	bne.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 80043aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80043b0:	e003      	b.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043b6:	f001 ba28 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80043ba:	f001 ba26 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80043be:	4b0d      	ldr	r3, [pc, #52]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80043c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043c4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80043c8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80043ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d104      	bne.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80043d0:	f7fe fa76 	bl	80028c0 <HAL_RCC_GetPCLK3Freq>
 80043d4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80043d6:	f001 ba18 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80043da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043e0:	d10e      	bne.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043e2:	f107 0314 	add.w	r3, r7, #20
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fe fbec 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043f0:	f001 ba0b 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80043f4:	44020c00 	.word	0x44020c00
 80043f8:	03d09000 	.word	0x03d09000
 80043fc:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8004400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004402:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004406:	d108      	bne.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004408:	f107 0308 	add.w	r3, r7, #8
 800440c:	4618      	mov	r0, r3
 800440e:	f7fe fd45 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004416:	f001 b9f8 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800441a:	4ba4      	ldr	r3, [pc, #656]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b02      	cmp	r3, #2
 8004424:	d10d      	bne.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8004426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004428:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800442c:	d109      	bne.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800442e:	4b9f      	ldr	r3, [pc, #636]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	08db      	lsrs	r3, r3, #3
 8004434:	f003 0303 	and.w	r3, r3, #3
 8004438:	4a9d      	ldr	r2, [pc, #628]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800443a:	fa22 f303 	lsr.w	r3, r2, r3
 800443e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004440:	e020      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8004442:	4b9a      	ldr	r3, [pc, #616]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800444a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800444e:	d106      	bne.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8004450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004452:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004456:	d102      	bne.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8004458:	4b96      	ldr	r3, [pc, #600]	@ (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800445a:	637b      	str	r3, [r7, #52]	@ 0x34
 800445c:	e012      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800445e:	4b93      	ldr	r3, [pc, #588]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004460:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b02      	cmp	r3, #2
 800446a:	d107      	bne.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800446c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004472:	d103      	bne.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8004474:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004478:	637b      	str	r3, [r7, #52]	@ 0x34
 800447a:	e003      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004480:	f001 b9c3 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004484:	f001 b9c1 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004488:	4b88      	ldr	r3, [pc, #544]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800448a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004496:	2b00      	cmp	r3, #0
 8004498:	d104      	bne.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800449a:	f7fe f9c9 	bl	8002830 <HAL_RCC_GetHCLKFreq>
 800449e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80044a0:	f001 b9b3 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80044a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d104      	bne.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 80044aa:	f7fe f895 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 80044ae:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80044b0:	f001 b9ab 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80044b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d108      	bne.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044ba:	f107 0314 	add.w	r3, r7, #20
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fe fb80 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044c8:	f001 b99f 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80044cc:	4b77      	ldr	r3, [pc, #476]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044d8:	d105      	bne.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80044da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044dc:	2b03      	cmp	r3, #3
 80044de:	d102      	bne.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 80044e0:	4b75      	ldr	r3, [pc, #468]	@ (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 80044e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80044e4:	e023      	b.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80044e6:	4b71      	ldr	r3, [pc, #452]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d10c      	bne.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 80044f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d109      	bne.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80044f8:	4b6c      	ldr	r3, [pc, #432]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	08db      	lsrs	r3, r3, #3
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	4a6b      	ldr	r2, [pc, #428]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8004504:	fa22 f303 	lsr.w	r3, r2, r3
 8004508:	637b      	str	r3, [r7, #52]	@ 0x34
 800450a:	e010      	b.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800450c:	4b67      	ldr	r3, [pc, #412]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004518:	d105      	bne.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800451a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451c:	2b05      	cmp	r3, #5
 800451e:	d102      	bne.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8004520:	4b64      	ldr	r3, [pc, #400]	@ (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8004522:	637b      	str	r3, [r7, #52]	@ 0x34
 8004524:	e003      	b.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800452a:	f001 b96e 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800452e:	f001 b96c 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8004532:	4b5e      	ldr	r3, [pc, #376]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004534:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800453e:	4b5b      	ldr	r3, [pc, #364]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b02      	cmp	r3, #2
 800454a:	d106      	bne.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800454c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454e:	2b00      	cmp	r3, #0
 8004550:	d103      	bne.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8004552:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004556:	637b      	str	r3, [r7, #52]	@ 0x34
 8004558:	e012      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800455a:	4b54      	ldr	r3, [pc, #336]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800455c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004560:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004564:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004568:	d106      	bne.n	8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800456a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456c:	2b08      	cmp	r3, #8
 800456e:	d103      	bne.n	8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8004570:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004574:	637b      	str	r3, [r7, #52]	@ 0x34
 8004576:	e003      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800457c:	f001 b945 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004580:	f001 b943 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004584:	4b49      	ldr	r3, [pc, #292]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004586:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800458a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800458e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004592:	2b00      	cmp	r3, #0
 8004594:	d104      	bne.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004596:	f7fe f967 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 800459a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800459c:	f001 b935 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80045a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045a6:	d108      	bne.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045a8:	f107 0308 	add.w	r3, r7, #8
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fe fc75 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045b6:	f001 b928 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80045ba:	4b3c      	ldr	r3, [pc, #240]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d10d      	bne.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 80045c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045cc:	d109      	bne.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80045ce:	4b37      	ldr	r3, [pc, #220]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	08db      	lsrs	r3, r3, #3
 80045d4:	f003 0303 	and.w	r3, r3, #3
 80045d8:	4a35      	ldr	r2, [pc, #212]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80045da:	fa22 f303 	lsr.w	r3, r2, r3
 80045de:	637b      	str	r3, [r7, #52]	@ 0x34
 80045e0:	e011      	b.n	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80045e2:	4b32      	ldr	r3, [pc, #200]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045ee:	d106      	bne.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 80045f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045f6:	d102      	bne.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 80045f8:	4b2e      	ldr	r3, [pc, #184]	@ (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80045fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80045fc:	e003      	b.n	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004602:	f001 b902 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004606:	f001 b900 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800460a:	4b28      	ldr	r3, [pc, #160]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800460c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004610:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004614:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004618:	2b00      	cmp	r3, #0
 800461a:	d104      	bne.n	8004626 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800461c:	f7fe f924 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 8004620:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004622:	f001 b8f2 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8004626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004628:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800462c:	d108      	bne.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800462e:	f107 0308 	add.w	r3, r7, #8
 8004632:	4618      	mov	r0, r3
 8004634:	f7fe fc32 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800463c:	f001 b8e5 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004640:	4b1a      	ldr	r3, [pc, #104]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b02      	cmp	r3, #2
 800464a:	d10d      	bne.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800464c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004652:	d109      	bne.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004654:	4b15      	ldr	r3, [pc, #84]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	08db      	lsrs	r3, r3, #3
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	4a14      	ldr	r2, [pc, #80]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8004660:	fa22 f303 	lsr.w	r3, r2, r3
 8004664:	637b      	str	r3, [r7, #52]	@ 0x34
 8004666:	e011      	b.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8004668:	4b10      	ldr	r3, [pc, #64]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004670:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004674:	d106      	bne.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8004676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004678:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800467c:	d102      	bne.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800467e:	4b0d      	ldr	r3, [pc, #52]	@ (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8004680:	637b      	str	r3, [r7, #52]	@ 0x34
 8004682:	e003      	b.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004688:	f001 b8bf 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800468c:	f001 b8bd 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004690:	4b06      	ldr	r3, [pc, #24]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004692:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004696:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800469a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800469c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10c      	bne.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80046a2:	f7fe f90d 	bl	80028c0 <HAL_RCC_GetPCLK3Freq>
 80046a6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 80046a8:	f001 b8af 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80046ac:	44020c00 	.word	0x44020c00
 80046b0:	03d09000 	.word	0x03d09000
 80046b4:	003d0900 	.word	0x003d0900
 80046b8:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80046bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046c2:	d108      	bne.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046c4:	f107 0308 	add.w	r3, r7, #8
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fe fbe7 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80046d2:	f001 b89a 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80046d6:	4b9f      	ldr	r3, [pc, #636]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d10d      	bne.n	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 80046e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046e8:	d109      	bne.n	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80046ea:	4b9a      	ldr	r3, [pc, #616]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	08db      	lsrs	r3, r3, #3
 80046f0:	f003 0303 	and.w	r3, r3, #3
 80046f4:	4a98      	ldr	r2, [pc, #608]	@ (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80046f6:	fa22 f303 	lsr.w	r3, r2, r3
 80046fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80046fc:	e011      	b.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80046fe:	4b95      	ldr	r3, [pc, #596]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004706:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800470a:	d106      	bne.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800470c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004712:	d102      	bne.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8004714:	4b91      	ldr	r3, [pc, #580]	@ (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8004716:	637b      	str	r3, [r7, #52]	@ 0x34
 8004718:	e003      	b.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800471a:	2300      	movs	r3, #0
 800471c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800471e:	f001 b874 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004722:	f001 b872 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004726:	4b8b      	ldr	r3, [pc, #556]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004728:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800472c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004730:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8004732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004734:	2b00      	cmp	r3, #0
 8004736:	d104      	bne.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004738:	f7fe f8c2 	bl	80028c0 <HAL_RCC_GetPCLK3Freq>
 800473c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800473e:	f001 b864 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8004742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004744:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004748:	d108      	bne.n	800475c <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800474a:	f107 0308 	add.w	r3, r7, #8
 800474e:	4618      	mov	r0, r3
 8004750:	f7fe fba4 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004758:	f001 b857 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800475c:	4b7d      	ldr	r3, [pc, #500]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b02      	cmp	r3, #2
 8004766:	d10d      	bne.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8004768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800476e:	d109      	bne.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004770:	4b78      	ldr	r3, [pc, #480]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	08db      	lsrs	r3, r3, #3
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	4a77      	ldr	r2, [pc, #476]	@ (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800477c:	fa22 f303 	lsr.w	r3, r2, r3
 8004780:	637b      	str	r3, [r7, #52]	@ 0x34
 8004782:	e011      	b.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8004784:	4b73      	ldr	r3, [pc, #460]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800478c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004790:	d106      	bne.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8004792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004794:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004798:	d102      	bne.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800479a:	4b70      	ldr	r3, [pc, #448]	@ (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800479c:	637b      	str	r3, [r7, #52]	@ 0x34
 800479e:	e003      	b.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047a4:	f001 b831 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80047a8:	f001 b82f 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80047ac:	4b69      	ldr	r3, [pc, #420]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80047ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80047b2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80047b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80047b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d104      	bne.n	80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80047be:	f7fe f853 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 80047c2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80047c4:	f001 b821 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 80047c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047ce:	d108      	bne.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047d0:	f107 0308 	add.w	r3, r7, #8
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fe fb61 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047de:	f001 b814 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80047e2:	4b5c      	ldr	r3, [pc, #368]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d10e      	bne.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 80047ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047f4:	d10a      	bne.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80047f6:	4b57      	ldr	r3, [pc, #348]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	08db      	lsrs	r3, r3, #3
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	4a55      	ldr	r2, [pc, #340]	@ (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8004802:	fa22 f303 	lsr.w	r3, r2, r3
 8004806:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004808:	f000 bfff 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004810:	f000 bffb 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004814:	4b4f      	ldr	r3, [pc, #316]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004816:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800481a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800481e:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004822:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004826:	d056      	beq.n	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8004828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800482e:	f200 808b 	bhi.w	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8004832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004838:	d03e      	beq.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800483a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004840:	f200 8082 	bhi.w	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8004844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004846:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800484a:	d027      	beq.n	800489c <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800484c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004852:	d879      	bhi.n	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8004854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004856:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800485a:	d017      	beq.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800485c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004862:	d871      	bhi.n	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8004864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004866:	2b00      	cmp	r3, #0
 8004868:	d004      	beq.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800486a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004870:	d004      	beq.n	800487c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8004872:	e069      	b.n	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004874:	f7fe f824 	bl	80028c0 <HAL_RCC_GetPCLK3Freq>
 8004878:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800487a:	e068      	b.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800487c:	f107 0314 	add.w	r3, r7, #20
 8004880:	4618      	mov	r0, r3
 8004882:	f7fe f99f 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800488a:	e060      	b.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800488c:	f107 0308 	add.w	r3, r7, #8
 8004890:	4618      	mov	r0, r3
 8004892:	f7fe fb03 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800489a:	e058      	b.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800489c:	4b2d      	ldr	r3, [pc, #180]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800489e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d103      	bne.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 80048aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048ae:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80048b0:	e04d      	b.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80048b2:	2300      	movs	r3, #0
 80048b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80048b6:	e04a      	b.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80048b8:	4b26      	ldr	r3, [pc, #152]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80048ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048c6:	d103      	bne.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 80048c8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80048cc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80048ce:	e03e      	b.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80048d0:	2300      	movs	r3, #0
 80048d2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80048d4:	e03b      	b.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80048d6:	4b1f      	ldr	r3, [pc, #124]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80048d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80048dc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80048e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80048e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d10c      	bne.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 80048ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d109      	bne.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80048f4:	4b17      	ldr	r3, [pc, #92]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	08db      	lsrs	r3, r3, #3
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	4a16      	ldr	r2, [pc, #88]	@ (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8004900:	fa22 f303 	lsr.w	r3, r2, r3
 8004904:	637b      	str	r3, [r7, #52]	@ 0x34
 8004906:	e01e      	b.n	8004946 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004908:	4b12      	ldr	r3, [pc, #72]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004914:	d106      	bne.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8004916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800491c:	d102      	bne.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800491e:	4b0f      	ldr	r3, [pc, #60]	@ (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8004920:	637b      	str	r3, [r7, #52]	@ 0x34
 8004922:	e010      	b.n	8004946 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004924:	4b0b      	ldr	r3, [pc, #44]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800492c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004930:	d106      	bne.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8004932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004934:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004938:	d102      	bne.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800493a:	4b09      	ldr	r3, [pc, #36]	@ (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800493c:	637b      	str	r3, [r7, #52]	@ 0x34
 800493e:	e002      	b.n	8004946 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004944:	e003      	b.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8004946:	e002      	b.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800494c:	bf00      	nop
          }
        }
        break;
 800494e:	f000 bf5c 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004952:	bf00      	nop
 8004954:	44020c00 	.word	0x44020c00
 8004958:	03d09000 	.word	0x03d09000
 800495c:	003d0900 	.word	0x003d0900
 8004960:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004964:	4b9e      	ldr	r3, [pc, #632]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004966:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800496a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800496e:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004972:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004976:	d056      	beq.n	8004a26 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8004978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800497e:	f200 808b 	bhi.w	8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8004982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004984:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004988:	d03e      	beq.n	8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800498a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004990:	f200 8082 	bhi.w	8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8004994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004996:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800499a:	d027      	beq.n	80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800499c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049a2:	d879      	bhi.n	8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80049a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049aa:	d017      	beq.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 80049ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049b2:	d871      	bhi.n	8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80049b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d004      	beq.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 80049ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049c0:	d004      	beq.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 80049c2:	e069      	b.n	8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80049c4:	f7fd ff50 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 80049c8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80049ca:	e068      	b.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049cc:	f107 0314 	add.w	r3, r7, #20
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7fe f8f7 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80049da:	e060      	b.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049dc:	f107 0308 	add.w	r3, r7, #8
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7fe fa5b 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80049ea:	e058      	b.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80049ec:	4b7c      	ldr	r3, [pc, #496]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80049ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d103      	bne.n	8004a02 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 80049fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049fe:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004a00:	e04d      	b.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004a06:	e04a      	b.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004a08:	4b75      	ldr	r3, [pc, #468]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004a0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a16:	d103      	bne.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8004a18:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004a1c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004a1e:	e03e      	b.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004a24:	e03b      	b.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004a26:	4b6e      	ldr	r3, [pc, #440]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004a28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a2c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004a30:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a32:	4b6b      	ldr	r3, [pc, #428]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d10c      	bne.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8004a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d109      	bne.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a44:	4b66      	ldr	r3, [pc, #408]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	08db      	lsrs	r3, r3, #3
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	4a65      	ldr	r2, [pc, #404]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8004a50:	fa22 f303 	lsr.w	r3, r2, r3
 8004a54:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a56:	e01e      	b.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a58:	4b61      	ldr	r3, [pc, #388]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a64:	d106      	bne.n	8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8004a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a6c:	d102      	bne.n	8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004a6e:	4b5e      	ldr	r3, [pc, #376]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8004a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a72:	e010      	b.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a74:	4b5a      	ldr	r3, [pc, #360]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a80:	d106      	bne.n	8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8004a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a88:	d102      	bne.n	8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004a8a:	4b58      	ldr	r3, [pc, #352]	@ (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8004a8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a8e:	e002      	b.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004a90:	2300      	movs	r3, #0
 8004a92:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004a94:	e003      	b.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8004a96:	e002      	b.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004a9c:	bf00      	nop
          }
        }
        break;
 8004a9e:	f000 beb4 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8004aa2:	4b4f      	ldr	r3, [pc, #316]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004aa4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004aa8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004aac:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ab4:	d056      	beq.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004abc:	f200 808b 	bhi.w	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ac6:	d03e      	beq.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ace:	f200 8082 	bhi.w	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8004ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ad8:	d027      	beq.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8004ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004adc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ae0:	d879      	bhi.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ae8:	d017      	beq.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8004aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004af0:	d871      	bhi.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8004af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d004      	beq.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8004af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004afe:	d004      	beq.n	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8004b00:	e069      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004b02:	f7fd fedd 	bl	80028c0 <HAL_RCC_GetPCLK3Freq>
 8004b06:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8004b08:	e068      	b.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b0a:	f107 0314 	add.w	r3, r7, #20
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fe f858 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004b18:	e060      	b.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b1a:	f107 0308 	add.w	r3, r7, #8
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fe f9bc 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004b28:	e058      	b.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d103      	bne.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8004b38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b3c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004b3e:	e04d      	b.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004b44:	e04a      	b.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004b46:	4b26      	ldr	r3, [pc, #152]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004b48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b54:	d103      	bne.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8004b56:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004b5a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004b5c:	e03e      	b.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004b62:	e03b      	b.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004b64:	4b1e      	ldr	r3, [pc, #120]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004b66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b6a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b70:	4b1b      	ldr	r3, [pc, #108]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d10c      	bne.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8004b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d109      	bne.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b82:	4b17      	ldr	r3, [pc, #92]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	08db      	lsrs	r3, r3, #3
 8004b88:	f003 0303 	and.w	r3, r3, #3
 8004b8c:	4a15      	ldr	r2, [pc, #84]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8004b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b94:	e01e      	b.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b96:	4b12      	ldr	r3, [pc, #72]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ba2:	d106      	bne.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8004ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004baa:	d102      	bne.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004bac:	4b0e      	ldr	r3, [pc, #56]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8004bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bb0:	e010      	b.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bbe:	d106      	bne.n	8004bce <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8004bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bc6:	d102      	bne.n	8004bce <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004bc8:	4b08      	ldr	r3, [pc, #32]	@ (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8004bca:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bcc:	e002      	b.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004bd2:	e003      	b.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8004bd4:	e002      	b.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004bda:	bf00      	nop
          }
        }
        break;
 8004bdc:	f000 be15 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004be0:	44020c00 	.word	0x44020c00
 8004be4:	03d09000 	.word	0x03d09000
 8004be8:	003d0900 	.word	0x003d0900
 8004bec:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8004bf0:	4b9e      	ldr	r3, [pc, #632]	@ (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004bf2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004bf6:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8004bfa:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfe:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004c02:	d056      	beq.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8004c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c06:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004c0a:	f200 808b 	bhi.w	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c14:	d03e      	beq.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8004c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c1c:	f200 8082 	bhi.w	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8004c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c26:	d027      	beq.n	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8004c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c2e:	d879      	bhi.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8004c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c36:	d017      	beq.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8004c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c3e:	d871      	bhi.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8004c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d004      	beq.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8004c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c4c:	d004      	beq.n	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8004c4e:	e069      	b.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004c50:	f7fd fe36 	bl	80028c0 <HAL_RCC_GetPCLK3Freq>
 8004c54:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8004c56:	e068      	b.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c58:	f107 0314 	add.w	r3, r7, #20
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fd ffb1 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004c66:	e060      	b.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c68:	f107 0308 	add.w	r3, r7, #8
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fe f915 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004c76:	e058      	b.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c78:	4b7c      	ldr	r3, [pc, #496]	@ (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004c7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d103      	bne.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8004c86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c8a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004c8c:	e04d      	b.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004c92:	e04a      	b.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004c94:	4b75      	ldr	r3, [pc, #468]	@ (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004c96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ca2:	d103      	bne.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8004ca4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004ca8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004caa:	e03e      	b.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004cb0:	e03b      	b.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004cb2:	4b6e      	ldr	r3, [pc, #440]	@ (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004cb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cb8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004cbe:	4b6b      	ldr	r3, [pc, #428]	@ (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d10c      	bne.n	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8004cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d109      	bne.n	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004cd0:	4b66      	ldr	r3, [pc, #408]	@ (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	08db      	lsrs	r3, r3, #3
 8004cd6:	f003 0303 	and.w	r3, r3, #3
 8004cda:	4a65      	ldr	r2, [pc, #404]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8004cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ce2:	e01e      	b.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ce4:	4b61      	ldr	r3, [pc, #388]	@ (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cf0:	d106      	bne.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8004cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cf8:	d102      	bne.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004cfa:	4b5e      	ldr	r3, [pc, #376]	@ (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8004cfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cfe:	e010      	b.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d00:	4b5a      	ldr	r3, [pc, #360]	@ (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d0c:	d106      	bne.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8004d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d14:	d102      	bne.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004d16:	4b58      	ldr	r3, [pc, #352]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8004d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d1a:	e002      	b.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004d20:	e003      	b.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8004d22:	e002      	b.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004d28:	bf00      	nop
          }
        }
        break;
 8004d2a:	f000 bd6e 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8004d2e:	4b4f      	ldr	r3, [pc, #316]	@ (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004d30:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004d34:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004d38:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004d40:	d056      	beq.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8004d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d44:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004d48:	f200 808b 	bhi.w	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d52:	d03e      	beq.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8004d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d5a:	f200 8082 	bhi.w	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d64:	d027      	beq.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8004d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d68:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d6c:	d879      	bhi.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d74:	d017      	beq.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8004d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d7c:	d871      	bhi.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d004      	beq.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8004d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d8a:	d004      	beq.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8004d8c:	e069      	b.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004d8e:	f7fd fd97 	bl	80028c0 <HAL_RCC_GetPCLK3Freq>
 8004d92:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8004d94:	e068      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d96:	f107 0314 	add.w	r3, r7, #20
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fd ff12 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004da4:	e060      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004da6:	f107 0308 	add.w	r3, r7, #8
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fe f876 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004db4:	e058      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004db6:	4b2d      	ldr	r3, [pc, #180]	@ (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d103      	bne.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8004dc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dc8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004dca:	e04d      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004dd0:	e04a      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004dd2:	4b26      	ldr	r3, [pc, #152]	@ (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004dd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ddc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004de0:	d103      	bne.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8004de2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004de6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004de8:	e03e      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004dee:	e03b      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004df0:	4b1e      	ldr	r3, [pc, #120]	@ (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004df2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004df6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d10c      	bne.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8004e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d109      	bne.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e0e:	4b17      	ldr	r3, [pc, #92]	@ (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	08db      	lsrs	r3, r3, #3
 8004e14:	f003 0303 	and.w	r3, r3, #3
 8004e18:	4a15      	ldr	r2, [pc, #84]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8004e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e20:	e01e      	b.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e22:	4b12      	ldr	r3, [pc, #72]	@ (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e2e:	d106      	bne.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8004e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e36:	d102      	bne.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004e38:	4b0e      	ldr	r3, [pc, #56]	@ (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8004e3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e3c:	e010      	b.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e4a:	d106      	bne.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8004e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e52:	d102      	bne.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004e54:	4b08      	ldr	r3, [pc, #32]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8004e56:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e58:	e002      	b.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004e5e:	e003      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8004e60:	e002      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8004e62:	2300      	movs	r3, #0
 8004e64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004e66:	bf00      	nop
          }
        }
        break;
 8004e68:	f000 bccf 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004e6c:	44020c00 	.word	0x44020c00
 8004e70:	03d09000 	.word	0x03d09000
 8004e74:	003d0900 	.word	0x003d0900
 8004e78:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8004e7c:	4b9e      	ldr	r3, [pc, #632]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004e7e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004e82:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8004e86:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e8e:	d056      	beq.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8004e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e96:	f200 808b 	bhi.w	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea0:	d03e      	beq.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea8:	f200 8082 	bhi.w	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8004eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004eb2:	d027      	beq.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004eba:	d879      	bhi.n	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ebe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ec2:	d017      	beq.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004eca:	d871      	bhi.n	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d004      	beq.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ed8:	d004      	beq.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8004eda:	e069      	b.n	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004edc:	f7fd fcf0 	bl	80028c0 <HAL_RCC_GetPCLK3Freq>
 8004ee0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8004ee2:	e068      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ee4:	f107 0314 	add.w	r3, r7, #20
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fd fe6b 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004ef2:	e060      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ef4:	f107 0308 	add.w	r3, r7, #8
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fd ffcf 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004f02:	e058      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f04:	4b7c      	ldr	r3, [pc, #496]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004f06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d103      	bne.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8004f12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f16:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004f18:	e04d      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004f1e:	e04a      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004f20:	4b75      	ldr	r3, [pc, #468]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004f22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f2e:	d103      	bne.n	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8004f30:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004f34:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004f36:	e03e      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004f3c:	e03b      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004f3e:	4b6e      	ldr	r3, [pc, #440]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004f40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f44:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004f48:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f4a:	4b6b      	ldr	r3, [pc, #428]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d10c      	bne.n	8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8004f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d109      	bne.n	8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f5c:	4b66      	ldr	r3, [pc, #408]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	08db      	lsrs	r3, r3, #3
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	4a65      	ldr	r2, [pc, #404]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8004f68:	fa22 f303 	lsr.w	r3, r2, r3
 8004f6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f6e:	e01e      	b.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f70:	4b61      	ldr	r3, [pc, #388]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f7c:	d106      	bne.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8004f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f84:	d102      	bne.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004f86:	4b5e      	ldr	r3, [pc, #376]	@ (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8004f88:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f8a:	e010      	b.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f8c:	4b5a      	ldr	r3, [pc, #360]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f98:	d106      	bne.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8004f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fa0:	d102      	bne.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004fa2:	4b58      	ldr	r3, [pc, #352]	@ (8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8004fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fa6:	e002      	b.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004fac:	e003      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8004fae:	e002      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004fb4:	bf00      	nop
          }
        }
        break;
 8004fb6:	f000 bc28 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004fba:	4b4f      	ldr	r3, [pc, #316]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004fbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fc4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8004fc6:	4b4c      	ldr	r3, [pc, #304]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fd2:	d106      	bne.n	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d103      	bne.n	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8004fda:	4b4a      	ldr	r3, [pc, #296]	@ (8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8004fdc:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8004fde:	f000 bc14 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fe8:	d108      	bne.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fea:	f107 0320 	add.w	r3, r7, #32
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fd fc7c 	bl	80028ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ff8:	f000 bc07 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005002:	d107      	bne.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005004:	f107 0314 	add.w	r3, r7, #20
 8005008:	4618      	mov	r0, r3
 800500a:	f7fd fddb 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005012:	e3fa      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005018:	e3f7      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800501a:	4b37      	ldr	r3, [pc, #220]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800501c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8005026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005028:	2b04      	cmp	r3, #4
 800502a:	d861      	bhi.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800502c:	a201      	add	r2, pc, #4	@ (adr r2, 8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800502e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005032:	bf00      	nop
 8005034:	08005049 	.word	0x08005049
 8005038:	08005059 	.word	0x08005059
 800503c:	08005069 	.word	0x08005069
 8005040:	08005079 	.word	0x08005079
 8005044:	0800507f 	.word	0x0800507f
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005048:	f107 0320 	add.w	r3, r7, #32
 800504c:	4618      	mov	r0, r3
 800504e:	f7fd fc4d 	bl	80028ec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005054:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005056:	e04e      	b.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005058:	f107 0314 	add.w	r3, r7, #20
 800505c:	4618      	mov	r0, r3
 800505e:	f7fd fdb1 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005066:	e046      	b.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005068:	f107 0308 	add.w	r3, r7, #8
 800506c:	4618      	mov	r0, r3
 800506e:	f7fd ff15 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005076:	e03e      	b.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005078:	4b23      	ldr	r3, [pc, #140]	@ (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800507a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800507c:	e03b      	b.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800507e:	4b1e      	ldr	r3, [pc, #120]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8005080:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005084:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005088:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800508a:	4b1b      	ldr	r3, [pc, #108]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b02      	cmp	r3, #2
 8005094:	d10c      	bne.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8005096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d109      	bne.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800509c:	4b16      	ldr	r3, [pc, #88]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	08db      	lsrs	r3, r3, #3
 80050a2:	f003 0303 	and.w	r3, r3, #3
 80050a6:	4a15      	ldr	r2, [pc, #84]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80050a8:	fa22 f303 	lsr.w	r3, r2, r3
 80050ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80050ae:	e01e      	b.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050b0:	4b11      	ldr	r3, [pc, #68]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050bc:	d106      	bne.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 80050be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050c4:	d102      	bne.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80050c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80050c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80050ca:	e010      	b.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050cc:	4b0a      	ldr	r3, [pc, #40]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050d8:	d106      	bne.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 80050da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050e0:	d102      	bne.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80050e2:	4b08      	ldr	r3, [pc, #32]	@ (8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80050e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80050e6:	e002      	b.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80050e8:	2300      	movs	r3, #0
 80050ea:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80050ec:	e003      	b.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 80050ee:	e002      	b.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 80050f0:	2300      	movs	r3, #0
 80050f2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80050f4:	bf00      	nop
          }
        }
        break;
 80050f6:	e388      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80050f8:	44020c00 	.word	0x44020c00
 80050fc:	03d09000 	.word	0x03d09000
 8005100:	003d0900 	.word	0x003d0900
 8005104:	007a1200 	.word	0x007a1200
 8005108:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800510c:	4ba9      	ldr	r3, [pc, #676]	@ (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800510e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005112:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005116:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8005118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511a:	2b20      	cmp	r3, #32
 800511c:	f200 809a 	bhi.w	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8005120:	a201      	add	r2, pc, #4	@ (adr r2, 8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8005122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005126:	bf00      	nop
 8005128:	080051ad 	.word	0x080051ad
 800512c:	08005255 	.word	0x08005255
 8005130:	08005255 	.word	0x08005255
 8005134:	08005255 	.word	0x08005255
 8005138:	08005255 	.word	0x08005255
 800513c:	08005255 	.word	0x08005255
 8005140:	08005255 	.word	0x08005255
 8005144:	08005255 	.word	0x08005255
 8005148:	080051bd 	.word	0x080051bd
 800514c:	08005255 	.word	0x08005255
 8005150:	08005255 	.word	0x08005255
 8005154:	08005255 	.word	0x08005255
 8005158:	08005255 	.word	0x08005255
 800515c:	08005255 	.word	0x08005255
 8005160:	08005255 	.word	0x08005255
 8005164:	08005255 	.word	0x08005255
 8005168:	080051cd 	.word	0x080051cd
 800516c:	08005255 	.word	0x08005255
 8005170:	08005255 	.word	0x08005255
 8005174:	08005255 	.word	0x08005255
 8005178:	08005255 	.word	0x08005255
 800517c:	08005255 	.word	0x08005255
 8005180:	08005255 	.word	0x08005255
 8005184:	08005255 	.word	0x08005255
 8005188:	080051dd 	.word	0x080051dd
 800518c:	08005255 	.word	0x08005255
 8005190:	08005255 	.word	0x08005255
 8005194:	08005255 	.word	0x08005255
 8005198:	08005255 	.word	0x08005255
 800519c:	08005255 	.word	0x08005255
 80051a0:	08005255 	.word	0x08005255
 80051a4:	08005255 	.word	0x08005255
 80051a8:	080051e3 	.word	0x080051e3
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051ac:	f107 0320 	add.w	r3, r7, #32
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fd fb9b 	bl	80028ec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80051b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80051ba:	e04e      	b.n	800525a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051bc:	f107 0314 	add.w	r3, r7, #20
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fd fcff 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80051ca:	e046      	b.n	800525a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051cc:	f107 0308 	add.w	r3, r7, #8
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fd fe63 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80051da:	e03e      	b.n	800525a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80051dc:	4b76      	ldr	r3, [pc, #472]	@ (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80051de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80051e0:	e03b      	b.n	800525a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80051e2:	4b74      	ldr	r3, [pc, #464]	@ (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80051e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051e8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80051ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051ee:	4b71      	ldr	r3, [pc, #452]	@ (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d10c      	bne.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 80051fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d109      	bne.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005200:	4b6c      	ldr	r3, [pc, #432]	@ (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	08db      	lsrs	r3, r3, #3
 8005206:	f003 0303 	and.w	r3, r3, #3
 800520a:	4a6c      	ldr	r2, [pc, #432]	@ (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800520c:	fa22 f303 	lsr.w	r3, r2, r3
 8005210:	637b      	str	r3, [r7, #52]	@ 0x34
 8005212:	e01e      	b.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005214:	4b67      	ldr	r3, [pc, #412]	@ (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800521c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005220:	d106      	bne.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8005222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005228:	d102      	bne.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800522a:	4b65      	ldr	r3, [pc, #404]	@ (80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800522c:	637b      	str	r3, [r7, #52]	@ 0x34
 800522e:	e010      	b.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005230:	4b60      	ldr	r3, [pc, #384]	@ (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005238:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800523c:	d106      	bne.n	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800523e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005240:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005244:	d102      	bne.n	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005246:	4b5f      	ldr	r3, [pc, #380]	@ (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8005248:	637b      	str	r3, [r7, #52]	@ 0x34
 800524a:	e002      	b.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800524c:	2300      	movs	r3, #0
 800524e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005250:	e003      	b.n	800525a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8005252:	e002      	b.n	800525a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8005254:	2300      	movs	r3, #0
 8005256:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005258:	bf00      	nop
          }
        }
        break;
 800525a:	e2d6      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800525c:	4b55      	ldr	r3, [pc, #340]	@ (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800525e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005262:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005266:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8005268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800526e:	d031      	beq.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8005270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005272:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005276:	d866      	bhi.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8005278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527a:	2bc0      	cmp	r3, #192	@ 0xc0
 800527c:	d027      	beq.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800527e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005280:	2bc0      	cmp	r3, #192	@ 0xc0
 8005282:	d860      	bhi.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8005284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005286:	2b80      	cmp	r3, #128	@ 0x80
 8005288:	d019      	beq.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800528a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528c:	2b80      	cmp	r3, #128	@ 0x80
 800528e:	d85a      	bhi.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8005290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8005296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005298:	2b40      	cmp	r3, #64	@ 0x40
 800529a:	d008      	beq.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800529c:	e053      	b.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800529e:	f107 0320 	add.w	r3, r7, #32
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fd fb22 	bl	80028ec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80052a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052aa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80052ac:	e04e      	b.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052ae:	f107 0314 	add.w	r3, r7, #20
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fd fc86 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80052bc:	e046      	b.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052be:	f107 0308 	add.w	r3, r7, #8
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fd fdea 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80052cc:	e03e      	b.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80052ce:	4b3a      	ldr	r3, [pc, #232]	@ (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80052d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80052d2:	e03b      	b.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80052d4:	4b37      	ldr	r3, [pc, #220]	@ (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80052d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052da:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80052de:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052e0:	4b34      	ldr	r3, [pc, #208]	@ (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d10c      	bne.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 80052ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d109      	bne.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80052f2:	4b30      	ldr	r3, [pc, #192]	@ (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	08db      	lsrs	r3, r3, #3
 80052f8:	f003 0303 	and.w	r3, r3, #3
 80052fc:	4a2f      	ldr	r2, [pc, #188]	@ (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80052fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005302:	637b      	str	r3, [r7, #52]	@ 0x34
 8005304:	e01e      	b.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005306:	4b2b      	ldr	r3, [pc, #172]	@ (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800530e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005312:	d106      	bne.n	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8005314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800531a:	d102      	bne.n	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800531c:	4b28      	ldr	r3, [pc, #160]	@ (80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800531e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005320:	e010      	b.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005322:	4b24      	ldr	r3, [pc, #144]	@ (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800532a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800532e:	d106      	bne.n	800533e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8005330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005332:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005336:	d102      	bne.n	800533e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005338:	4b22      	ldr	r3, [pc, #136]	@ (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800533a:	637b      	str	r3, [r7, #52]	@ 0x34
 800533c:	e002      	b.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800533e:	2300      	movs	r3, #0
 8005340:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005342:	e003      	b.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8005344:	e002      	b.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8005346:	2300      	movs	r3, #0
 8005348:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800534a:	bf00      	nop
          }
        }
        break;
 800534c:	e25d      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800534e:	4b19      	ldr	r3, [pc, #100]	@ (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005354:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8005358:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800535a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535c:	2b00      	cmp	r3, #0
 800535e:	d103      	bne.n	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005360:	f7fd fa98 	bl	8002894 <HAL_RCC_GetPCLK2Freq>
 8005364:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8005366:	e250      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8005368:	4b12      	ldr	r3, [pc, #72]	@ (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005370:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005374:	d10b      	bne.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8005376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005378:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800537c:	d107      	bne.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800537e:	f107 0314 	add.w	r3, r7, #20
 8005382:	4618      	mov	r0, r3
 8005384:	f7fd fc1e 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	637b      	str	r3, [r7, #52]	@ 0x34
 800538c:	e04f      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800538e:	4b09      	ldr	r3, [pc, #36]	@ (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005396:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800539a:	d115      	bne.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800539c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053a2:	d111      	bne.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053a4:	f107 0308 	add.w	r3, r7, #8
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7fd fd77 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80053b2:	e03c      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 80053b4:	44020c00 	.word	0x44020c00
 80053b8:	00bb8000 	.word	0x00bb8000
 80053bc:	03d09000 	.word	0x03d09000
 80053c0:	003d0900 	.word	0x003d0900
 80053c4:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80053c8:	4b94      	ldr	r3, [pc, #592]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d10d      	bne.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 80053d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80053da:	d109      	bne.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80053dc:	4b8f      	ldr	r3, [pc, #572]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	08db      	lsrs	r3, r3, #3
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	4a8e      	ldr	r2, [pc, #568]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80053e8:	fa22 f303 	lsr.w	r3, r2, r3
 80053ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ee:	e01e      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80053f0:	4b8a      	ldr	r3, [pc, #552]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053fc:	d106      	bne.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 80053fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005400:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005404:	d102      	bne.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8005406:	4b87      	ldr	r3, [pc, #540]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8005408:	637b      	str	r3, [r7, #52]	@ 0x34
 800540a:	e010      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800540c:	4b83      	ldr	r3, [pc, #524]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005414:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005418:	d106      	bne.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800541a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005420:	d102      	bne.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8005422:	4b81      	ldr	r3, [pc, #516]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8005424:	637b      	str	r3, [r7, #52]	@ 0x34
 8005426:	e002      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800542c:	e1ed      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800542e:	e1ec      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8005430:	4b7a      	ldr	r3, [pc, #488]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005436:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800543a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800543c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543e:	2b00      	cmp	r3, #0
 8005440:	d103      	bne.n	800544a <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005442:	f7fd fa3d 	bl	80028c0 <HAL_RCC_GetPCLK3Freq>
 8005446:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8005448:	e1df      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800544a:	4b74      	ldr	r3, [pc, #464]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005452:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005456:	d10b      	bne.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8005458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800545e:	d107      	bne.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005460:	f107 0314 	add.w	r3, r7, #20
 8005464:	4618      	mov	r0, r3
 8005466:	f7fd fbad 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	637b      	str	r3, [r7, #52]	@ 0x34
 800546e:	e045      	b.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8005470:	4b6a      	ldr	r3, [pc, #424]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005478:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800547c:	d10b      	bne.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800547e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005480:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005484:	d107      	bne.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005486:	f107 0308 	add.w	r3, r7, #8
 800548a:	4618      	mov	r0, r3
 800548c:	f7fd fd06 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	637b      	str	r3, [r7, #52]	@ 0x34
 8005494:	e032      	b.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8005496:	4b61      	ldr	r3, [pc, #388]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d10d      	bne.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 80054a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80054a8:	d109      	bne.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80054aa:	4b5c      	ldr	r3, [pc, #368]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	08db      	lsrs	r3, r3, #3
 80054b0:	f003 0303 	and.w	r3, r3, #3
 80054b4:	4a5a      	ldr	r2, [pc, #360]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80054b6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80054bc:	e01e      	b.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 80054be:	4b57      	ldr	r3, [pc, #348]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054ca:	d106      	bne.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 80054cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054d2:	d102      	bne.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 80054d4:	4b53      	ldr	r3, [pc, #332]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80054d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80054d8:	e010      	b.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 80054da:	4b50      	ldr	r3, [pc, #320]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054e6:	d106      	bne.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 80054e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ea:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80054ee:	d102      	bne.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 80054f0:	4b4d      	ldr	r3, [pc, #308]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80054f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80054f4:	e002      	b.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80054fa:	e186      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80054fc:	e185      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80054fe:	4b47      	ldr	r3, [pc, #284]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005504:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8005508:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800550a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550c:	2b00      	cmp	r3, #0
 800550e:	d103      	bne.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005510:	f7fd f9c0 	bl	8002894 <HAL_RCC_GetPCLK2Freq>
 8005514:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8005516:	e178      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8005518:	4b40      	ldr	r3, [pc, #256]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005520:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005524:	d10b      	bne.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8005526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005528:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800552c:	d107      	bne.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800552e:	f107 0314 	add.w	r3, r7, #20
 8005532:	4618      	mov	r0, r3
 8005534:	f7fd fb46 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	637b      	str	r3, [r7, #52]	@ 0x34
 800553c:	e045      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800553e:	4b37      	ldr	r3, [pc, #220]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005546:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800554a:	d10b      	bne.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800554c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005552:	d107      	bne.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005554:	f107 0308 	add.w	r3, r7, #8
 8005558:	4618      	mov	r0, r3
 800555a:	f7fd fc9f 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	637b      	str	r3, [r7, #52]	@ 0x34
 8005562:	e032      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8005564:	4b2d      	ldr	r3, [pc, #180]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b02      	cmp	r3, #2
 800556e:	d10d      	bne.n	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8005570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005572:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005576:	d109      	bne.n	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005578:	4b28      	ldr	r3, [pc, #160]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	08db      	lsrs	r3, r3, #3
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	4a27      	ldr	r2, [pc, #156]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8005584:	fa22 f303 	lsr.w	r3, r2, r3
 8005588:	637b      	str	r3, [r7, #52]	@ 0x34
 800558a:	e01e      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800558c:	4b23      	ldr	r3, [pc, #140]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005598:	d106      	bne.n	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800559a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055a0:	d102      	bne.n	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 80055a2:	4b20      	ldr	r3, [pc, #128]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80055a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80055a6:	e010      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 80055a8:	4b1c      	ldr	r3, [pc, #112]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055b4:	d106      	bne.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 80055b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80055bc:	d102      	bne.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 80055be:	4b1a      	ldr	r3, [pc, #104]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80055c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80055c2:	e002      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80055c8:	e11f      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80055ca:	e11e      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80055cc:	4b13      	ldr	r3, [pc, #76]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80055ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055d2:	f003 0303 	and.w	r3, r3, #3
 80055d6:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80055d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d85f      	bhi.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 80055de:	a201      	add	r2, pc, #4	@ (adr r2, 80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 80055e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e4:	080055f5 	.word	0x080055f5
 80055e8:	080055fd 	.word	0x080055fd
 80055ec:	0800560d 	.word	0x0800560d
 80055f0:	0800562d 	.word	0x0800562d
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 80055f4:	f7fd f91c 	bl	8002830 <HAL_RCC_GetHCLKFreq>
 80055f8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80055fa:	e053      	b.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055fc:	f107 0320 	add.w	r3, r7, #32
 8005600:	4618      	mov	r0, r3
 8005602:	f7fd f973 	bl	80028ec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800560a:	e04b      	b.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800560c:	f107 0314 	add.w	r3, r7, #20
 8005610:	4618      	mov	r0, r3
 8005612:	f7fd fad7 	bl	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800561a:	e043      	b.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800561c:	44020c00 	.word	0x44020c00
 8005620:	03d09000 	.word	0x03d09000
 8005624:	003d0900 	.word	0x003d0900
 8005628:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800562c:	4b79      	ldr	r3, [pc, #484]	@ (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800562e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005632:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005636:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005638:	4b76      	ldr	r3, [pc, #472]	@ (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b02      	cmp	r3, #2
 8005642:	d10c      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8005644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005646:	2b00      	cmp	r3, #0
 8005648:	d109      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800564a:	4b72      	ldr	r3, [pc, #456]	@ (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	08db      	lsrs	r3, r3, #3
 8005650:	f003 0303 	and.w	r3, r3, #3
 8005654:	4a70      	ldr	r2, [pc, #448]	@ (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8005656:	fa22 f303 	lsr.w	r3, r2, r3
 800565a:	637b      	str	r3, [r7, #52]	@ 0x34
 800565c:	e01e      	b.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800565e:	4b6d      	ldr	r3, [pc, #436]	@ (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005666:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800566a:	d106      	bne.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800566c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800566e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005672:	d102      	bne.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005674:	4b69      	ldr	r3, [pc, #420]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8005676:	637b      	str	r3, [r7, #52]	@ 0x34
 8005678:	e010      	b.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800567a:	4b66      	ldr	r3, [pc, #408]	@ (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005682:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005686:	d106      	bne.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8005688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800568a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800568e:	d102      	bne.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005690:	4b63      	ldr	r3, [pc, #396]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8005692:	637b      	str	r3, [r7, #52]	@ 0x34
 8005694:	e002      	b.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005696:	2300      	movs	r3, #0
 8005698:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800569a:	e003      	b.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800569c:	e002      	b.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80056a2:	bf00      	nop
          }
        }
        break;
 80056a4:	e0b1      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80056a6:	4b5b      	ldr	r3, [pc, #364]	@ (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80056a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80056ac:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80056b0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80056b2:	4b58      	ldr	r3, [pc, #352]	@ (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80056b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d106      	bne.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 80056c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d103      	bne.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 80056c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80056cc:	e01f      	b.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80056ce:	4b51      	ldr	r3, [pc, #324]	@ (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80056d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056dc:	d106      	bne.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 80056de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e0:	2b40      	cmp	r3, #64	@ 0x40
 80056e2:	d103      	bne.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 80056e4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80056e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80056ea:	e010      	b.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80056ec:	4b49      	ldr	r3, [pc, #292]	@ (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056f8:	d106      	bne.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 80056fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fc:	2b80      	cmp	r3, #128	@ 0x80
 80056fe:	d103      	bne.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8005700:	f248 0312 	movw	r3, #32786	@ 0x8012
 8005704:	637b      	str	r3, [r7, #52]	@ 0x34
 8005706:	e002      	b.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800570c:	e07d      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800570e:	e07c      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005710:	4b40      	ldr	r3, [pc, #256]	@ (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005712:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005716:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800571a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800571c:	4b3d      	ldr	r3, [pc, #244]	@ (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005724:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005728:	d105      	bne.n	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800572a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572c:	2b00      	cmp	r3, #0
 800572e:	d102      	bne.n	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8005730:	4b3c      	ldr	r3, [pc, #240]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8005732:	637b      	str	r3, [r7, #52]	@ 0x34
 8005734:	e031      	b.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8005736:	4b37      	ldr	r3, [pc, #220]	@ (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800573e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005742:	d10a      	bne.n	800575a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8005744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005746:	2b10      	cmp	r3, #16
 8005748:	d107      	bne.n	800575a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800574a:	f107 0320 	add.w	r3, r7, #32
 800574e:	4618      	mov	r0, r3
 8005750:	f7fd f8cc 	bl	80028ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005756:	637b      	str	r3, [r7, #52]	@ 0x34
 8005758:	e01f      	b.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800575a:	4b2e      	ldr	r3, [pc, #184]	@ (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800575c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b02      	cmp	r3, #2
 8005766:	d106      	bne.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8005768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576a:	2b20      	cmp	r3, #32
 800576c:	d103      	bne.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800576e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005772:	637b      	str	r3, [r7, #52]	@ 0x34
 8005774:	e011      	b.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8005776:	4b27      	ldr	r3, [pc, #156]	@ (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005778:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800577c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005780:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005784:	d106      	bne.n	8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8005786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005788:	2b30      	cmp	r3, #48	@ 0x30
 800578a:	d103      	bne.n	8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800578c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005790:	637b      	str	r3, [r7, #52]	@ 0x34
 8005792:	e002      	b.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8005798:	e037      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800579a:	e036      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800579c:	4b1d      	ldr	r3, [pc, #116]	@ (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800579e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057a2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80057a6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80057a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057aa:	2b10      	cmp	r3, #16
 80057ac:	d107      	bne.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057ae:	f107 0320 	add.w	r3, r7, #32
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fd f89a 	bl	80028ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ba:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80057bc:	e025      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80057be:	4b15      	ldr	r3, [pc, #84]	@ (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057ca:	d10a      	bne.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 80057cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ce:	2b20      	cmp	r3, #32
 80057d0:	d107      	bne.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057d2:	f107 0308 	add.w	r3, r7, #8
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fd fb60 	bl	8002e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	637b      	str	r3, [r7, #52]	@ 0x34
 80057e0:	e00f      	b.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80057e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057ee:	d105      	bne.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 80057f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f2:	2b30      	cmp	r3, #48	@ 0x30
 80057f4:	d102      	bne.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 80057f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80057f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80057fa:	e002      	b.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8005800:	e003      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005802:	e002      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005808:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800580a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800580c:	4618      	mov	r0, r3
 800580e:	373c      	adds	r7, #60	@ 0x3c
 8005810:	46bd      	mov	sp, r7
 8005812:	bd90      	pop	{r4, r7, pc}
 8005814:	44020c00 	.word	0x44020c00
 8005818:	03d09000 	.word	0x03d09000
 800581c:	003d0900 	.word	0x003d0900
 8005820:	007a1200 	.word	0x007a1200
 8005824:	02dc6c00 	.word	0x02dc6c00

08005828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e049      	b.n	80058ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d106      	bne.n	8005854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7fb f968 	bl	8000b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3304      	adds	r3, #4
 8005864:	4619      	mov	r1, r3
 8005866:	4610      	mov	r0, r2
 8005868:	f000 fc28 	bl	80060bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b082      	sub	sp, #8
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e049      	b.n	800597c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d106      	bne.n	8005902 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f841 	bl	8005984 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2202      	movs	r2, #2
 8005906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	3304      	adds	r3, #4
 8005912:	4619      	mov	r1, r3
 8005914:	4610      	mov	r0, r2
 8005916:	f000 fbd1 	bl	80060bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d109      	bne.n	80059bc <HAL_TIM_PWM_Start+0x24>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	bf14      	ite	ne
 80059b4:	2301      	movne	r3, #1
 80059b6:	2300      	moveq	r3, #0
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	e03c      	b.n	8005a36 <HAL_TIM_PWM_Start+0x9e>
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d109      	bne.n	80059d6 <HAL_TIM_PWM_Start+0x3e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	bf14      	ite	ne
 80059ce:	2301      	movne	r3, #1
 80059d0:	2300      	moveq	r3, #0
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	e02f      	b.n	8005a36 <HAL_TIM_PWM_Start+0x9e>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d109      	bne.n	80059f0 <HAL_TIM_PWM_Start+0x58>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	bf14      	ite	ne
 80059e8:	2301      	movne	r3, #1
 80059ea:	2300      	moveq	r3, #0
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	e022      	b.n	8005a36 <HAL_TIM_PWM_Start+0x9e>
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b0c      	cmp	r3, #12
 80059f4:	d109      	bne.n	8005a0a <HAL_TIM_PWM_Start+0x72>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	bf14      	ite	ne
 8005a02:	2301      	movne	r3, #1
 8005a04:	2300      	moveq	r3, #0
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	e015      	b.n	8005a36 <HAL_TIM_PWM_Start+0x9e>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b10      	cmp	r3, #16
 8005a0e:	d109      	bne.n	8005a24 <HAL_TIM_PWM_Start+0x8c>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	bf14      	ite	ne
 8005a1c:	2301      	movne	r3, #1
 8005a1e:	2300      	moveq	r3, #0
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	e008      	b.n	8005a36 <HAL_TIM_PWM_Start+0x9e>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	bf14      	ite	ne
 8005a30:	2301      	movne	r3, #1
 8005a32:	2300      	moveq	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e0e2      	b.n	8005c04 <HAL_TIM_PWM_Start+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d104      	bne.n	8005a4e <HAL_TIM_PWM_Start+0xb6>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a4c:	e023      	b.n	8005a96 <HAL_TIM_PWM_Start+0xfe>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d104      	bne.n	8005a5e <HAL_TIM_PWM_Start+0xc6>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a5c:	e01b      	b.n	8005a96 <HAL_TIM_PWM_Start+0xfe>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d104      	bne.n	8005a6e <HAL_TIM_PWM_Start+0xd6>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a6c:	e013      	b.n	8005a96 <HAL_TIM_PWM_Start+0xfe>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b0c      	cmp	r3, #12
 8005a72:	d104      	bne.n	8005a7e <HAL_TIM_PWM_Start+0xe6>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a7c:	e00b      	b.n	8005a96 <HAL_TIM_PWM_Start+0xfe>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b10      	cmp	r3, #16
 8005a82:	d104      	bne.n	8005a8e <HAL_TIM_PWM_Start+0xf6>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a8c:	e003      	b.n	8005a96 <HAL_TIM_PWM_Start+0xfe>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2202      	movs	r2, #2
 8005a92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	6839      	ldr	r1, [r7, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f001 f8a8 	bl	8006bf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a58      	ldr	r2, [pc, #352]	@ (8005c0c <HAL_TIM_PWM_Start+0x274>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d02c      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x170>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a57      	ldr	r2, [pc, #348]	@ (8005c10 <HAL_TIM_PWM_Start+0x278>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d027      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x170>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a55      	ldr	r2, [pc, #340]	@ (8005c14 <HAL_TIM_PWM_Start+0x27c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d022      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x170>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a54      	ldr	r2, [pc, #336]	@ (8005c18 <HAL_TIM_PWM_Start+0x280>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d01d      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x170>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a52      	ldr	r2, [pc, #328]	@ (8005c1c <HAL_TIM_PWM_Start+0x284>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d018      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x170>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a51      	ldr	r2, [pc, #324]	@ (8005c20 <HAL_TIM_PWM_Start+0x288>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d013      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x170>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a4f      	ldr	r2, [pc, #316]	@ (8005c24 <HAL_TIM_PWM_Start+0x28c>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00e      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x170>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a4e      	ldr	r2, [pc, #312]	@ (8005c28 <HAL_TIM_PWM_Start+0x290>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d009      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x170>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a4c      	ldr	r2, [pc, #304]	@ (8005c2c <HAL_TIM_PWM_Start+0x294>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d004      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x170>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a4b      	ldr	r2, [pc, #300]	@ (8005c30 <HAL_TIM_PWM_Start+0x298>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d101      	bne.n	8005b0c <HAL_TIM_PWM_Start+0x174>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <HAL_TIM_PWM_Start+0x176>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d007      	beq.n	8005b22 <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b20:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a39      	ldr	r2, [pc, #228]	@ (8005c0c <HAL_TIM_PWM_Start+0x274>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d04a      	beq.n	8005bc2 <HAL_TIM_PWM_Start+0x22a>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a37      	ldr	r2, [pc, #220]	@ (8005c10 <HAL_TIM_PWM_Start+0x278>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d045      	beq.n	8005bc2 <HAL_TIM_PWM_Start+0x22a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b3e:	d040      	beq.n	8005bc2 <HAL_TIM_PWM_Start+0x22a>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b48:	d03b      	beq.n	8005bc2 <HAL_TIM_PWM_Start+0x22a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a39      	ldr	r2, [pc, #228]	@ (8005c34 <HAL_TIM_PWM_Start+0x29c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d036      	beq.n	8005bc2 <HAL_TIM_PWM_Start+0x22a>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a37      	ldr	r2, [pc, #220]	@ (8005c38 <HAL_TIM_PWM_Start+0x2a0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d031      	beq.n	8005bc2 <HAL_TIM_PWM_Start+0x22a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a36      	ldr	r2, [pc, #216]	@ (8005c3c <HAL_TIM_PWM_Start+0x2a4>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d02c      	beq.n	8005bc2 <HAL_TIM_PWM_Start+0x22a>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a34      	ldr	r2, [pc, #208]	@ (8005c40 <HAL_TIM_PWM_Start+0x2a8>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d027      	beq.n	8005bc2 <HAL_TIM_PWM_Start+0x22a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a33      	ldr	r2, [pc, #204]	@ (8005c44 <HAL_TIM_PWM_Start+0x2ac>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d022      	beq.n	8005bc2 <HAL_TIM_PWM_Start+0x22a>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a31      	ldr	r2, [pc, #196]	@ (8005c48 <HAL_TIM_PWM_Start+0x2b0>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d01d      	beq.n	8005bc2 <HAL_TIM_PWM_Start+0x22a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a22      	ldr	r2, [pc, #136]	@ (8005c14 <HAL_TIM_PWM_Start+0x27c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d018      	beq.n	8005bc2 <HAL_TIM_PWM_Start+0x22a>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a20      	ldr	r2, [pc, #128]	@ (8005c18 <HAL_TIM_PWM_Start+0x280>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d013      	beq.n	8005bc2 <HAL_TIM_PWM_Start+0x22a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a2b      	ldr	r2, [pc, #172]	@ (8005c4c <HAL_TIM_PWM_Start+0x2b4>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00e      	beq.n	8005bc2 <HAL_TIM_PWM_Start+0x22a>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a29      	ldr	r2, [pc, #164]	@ (8005c50 <HAL_TIM_PWM_Start+0x2b8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d009      	beq.n	8005bc2 <HAL_TIM_PWM_Start+0x22a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a1a      	ldr	r2, [pc, #104]	@ (8005c1c <HAL_TIM_PWM_Start+0x284>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d004      	beq.n	8005bc2 <HAL_TIM_PWM_Start+0x22a>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a18      	ldr	r2, [pc, #96]	@ (8005c20 <HAL_TIM_PWM_Start+0x288>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d115      	bne.n	8005bee <HAL_TIM_PWM_Start+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689a      	ldr	r2, [r3, #8]
 8005bc8:	4b22      	ldr	r3, [pc, #136]	@ (8005c54 <HAL_TIM_PWM_Start+0x2bc>)
 8005bca:	4013      	ands	r3, r2
 8005bcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b06      	cmp	r3, #6
 8005bd2:	d015      	beq.n	8005c00 <HAL_TIM_PWM_Start+0x268>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bda:	d011      	beq.n	8005c00 <HAL_TIM_PWM_Start+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bec:	e008      	b.n	8005c00 <HAL_TIM_PWM_Start+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0201 	orr.w	r2, r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	e000      	b.n	8005c02 <HAL_TIM_PWM_Start+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	40012c00 	.word	0x40012c00
 8005c10:	50012c00 	.word	0x50012c00
 8005c14:	40013400 	.word	0x40013400
 8005c18:	50013400 	.word	0x50013400
 8005c1c:	40014000 	.word	0x40014000
 8005c20:	50014000 	.word	0x50014000
 8005c24:	40014400 	.word	0x40014400
 8005c28:	50014400 	.word	0x50014400
 8005c2c:	40014800 	.word	0x40014800
 8005c30:	50014800 	.word	0x50014800
 8005c34:	40000400 	.word	0x40000400
 8005c38:	50000400 	.word	0x50000400
 8005c3c:	40000800 	.word	0x40000800
 8005c40:	50000800 	.word	0x50000800
 8005c44:	40000c00 	.word	0x40000c00
 8005c48:	50000c00 	.word	0x50000c00
 8005c4c:	40001800 	.word	0x40001800
 8005c50:	50001800 	.word	0x50001800
 8005c54:	00010007 	.word	0x00010007

08005c58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c64:	2300      	movs	r3, #0
 8005c66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d101      	bne.n	8005c76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c72:	2302      	movs	r3, #2
 8005c74:	e0ff      	b.n	8005e76 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b14      	cmp	r3, #20
 8005c82:	f200 80f0 	bhi.w	8005e66 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c86:	a201      	add	r2, pc, #4	@ (adr r2, 8005c8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8c:	08005ce1 	.word	0x08005ce1
 8005c90:	08005e67 	.word	0x08005e67
 8005c94:	08005e67 	.word	0x08005e67
 8005c98:	08005e67 	.word	0x08005e67
 8005c9c:	08005d21 	.word	0x08005d21
 8005ca0:	08005e67 	.word	0x08005e67
 8005ca4:	08005e67 	.word	0x08005e67
 8005ca8:	08005e67 	.word	0x08005e67
 8005cac:	08005d63 	.word	0x08005d63
 8005cb0:	08005e67 	.word	0x08005e67
 8005cb4:	08005e67 	.word	0x08005e67
 8005cb8:	08005e67 	.word	0x08005e67
 8005cbc:	08005da3 	.word	0x08005da3
 8005cc0:	08005e67 	.word	0x08005e67
 8005cc4:	08005e67 	.word	0x08005e67
 8005cc8:	08005e67 	.word	0x08005e67
 8005ccc:	08005de5 	.word	0x08005de5
 8005cd0:	08005e67 	.word	0x08005e67
 8005cd4:	08005e67 	.word	0x08005e67
 8005cd8:	08005e67 	.word	0x08005e67
 8005cdc:	08005e25 	.word	0x08005e25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68b9      	ldr	r1, [r7, #8]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 fb12 	bl	8006310 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	699a      	ldr	r2, [r3, #24]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0208 	orr.w	r2, r2, #8
 8005cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699a      	ldr	r2, [r3, #24]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 0204 	bic.w	r2, r2, #4
 8005d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6999      	ldr	r1, [r3, #24]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	691a      	ldr	r2, [r3, #16]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	619a      	str	r2, [r3, #24]
      break;
 8005d1e:	e0a5      	b.n	8005e6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68b9      	ldr	r1, [r7, #8]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fbb4 	bl	8006494 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699a      	ldr	r2, [r3, #24]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6999      	ldr	r1, [r3, #24]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	021a      	lsls	r2, r3, #8
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	619a      	str	r2, [r3, #24]
      break;
 8005d60:	e084      	b.n	8005e6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68b9      	ldr	r1, [r7, #8]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f000 fc43 	bl	80065f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69da      	ldr	r2, [r3, #28]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f042 0208 	orr.w	r2, r2, #8
 8005d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69da      	ldr	r2, [r3, #28]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0204 	bic.w	r2, r2, #4
 8005d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69d9      	ldr	r1, [r3, #28]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	691a      	ldr	r2, [r3, #16]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	61da      	str	r2, [r3, #28]
      break;
 8005da0:	e064      	b.n	8005e6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68b9      	ldr	r1, [r7, #8]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 fcd1 	bl	8006750 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69da      	ldr	r2, [r3, #28]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69da      	ldr	r2, [r3, #28]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69d9      	ldr	r1, [r3, #28]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	021a      	lsls	r2, r3, #8
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	61da      	str	r2, [r3, #28]
      break;
 8005de2:	e043      	b.n	8005e6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 fd60 	bl	80068b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0208 	orr.w	r2, r2, #8
 8005dfe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 0204 	bic.w	r2, r2, #4
 8005e0e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	691a      	ldr	r2, [r3, #16]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005e22:	e023      	b.n	8005e6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68b9      	ldr	r1, [r7, #8]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 fdc2 	bl	80069b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e3e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e4e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	021a      	lsls	r2, r3, #8
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005e64:	e002      	b.n	8005e6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	75fb      	strb	r3, [r7, #23]
      break;
 8005e6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3718      	adds	r7, #24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop

08005e80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d101      	bne.n	8005e9c <HAL_TIM_ConfigClockSource+0x1c>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e0fe      	b.n	800609a <HAL_TIM_ConfigClockSource+0x21a>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005eba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ec6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ed8:	f000 80c9 	beq.w	800606e <HAL_TIM_ConfigClockSource+0x1ee>
 8005edc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ee0:	f200 80ce 	bhi.w	8006080 <HAL_TIM_ConfigClockSource+0x200>
 8005ee4:	4a6f      	ldr	r2, [pc, #444]	@ (80060a4 <HAL_TIM_ConfigClockSource+0x224>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	f000 80c1 	beq.w	800606e <HAL_TIM_ConfigClockSource+0x1ee>
 8005eec:	4a6d      	ldr	r2, [pc, #436]	@ (80060a4 <HAL_TIM_ConfigClockSource+0x224>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	f200 80c6 	bhi.w	8006080 <HAL_TIM_ConfigClockSource+0x200>
 8005ef4:	4a6c      	ldr	r2, [pc, #432]	@ (80060a8 <HAL_TIM_ConfigClockSource+0x228>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	f000 80b9 	beq.w	800606e <HAL_TIM_ConfigClockSource+0x1ee>
 8005efc:	4a6a      	ldr	r2, [pc, #424]	@ (80060a8 <HAL_TIM_ConfigClockSource+0x228>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	f200 80be 	bhi.w	8006080 <HAL_TIM_ConfigClockSource+0x200>
 8005f04:	4a69      	ldr	r2, [pc, #420]	@ (80060ac <HAL_TIM_ConfigClockSource+0x22c>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	f000 80b1 	beq.w	800606e <HAL_TIM_ConfigClockSource+0x1ee>
 8005f0c:	4a67      	ldr	r2, [pc, #412]	@ (80060ac <HAL_TIM_ConfigClockSource+0x22c>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	f200 80b6 	bhi.w	8006080 <HAL_TIM_ConfigClockSource+0x200>
 8005f14:	4a66      	ldr	r2, [pc, #408]	@ (80060b0 <HAL_TIM_ConfigClockSource+0x230>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	f000 80a9 	beq.w	800606e <HAL_TIM_ConfigClockSource+0x1ee>
 8005f1c:	4a64      	ldr	r2, [pc, #400]	@ (80060b0 <HAL_TIM_ConfigClockSource+0x230>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	f200 80ae 	bhi.w	8006080 <HAL_TIM_ConfigClockSource+0x200>
 8005f24:	4a63      	ldr	r2, [pc, #396]	@ (80060b4 <HAL_TIM_ConfigClockSource+0x234>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	f000 80a1 	beq.w	800606e <HAL_TIM_ConfigClockSource+0x1ee>
 8005f2c:	4a61      	ldr	r2, [pc, #388]	@ (80060b4 <HAL_TIM_ConfigClockSource+0x234>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	f200 80a6 	bhi.w	8006080 <HAL_TIM_ConfigClockSource+0x200>
 8005f34:	4a60      	ldr	r2, [pc, #384]	@ (80060b8 <HAL_TIM_ConfigClockSource+0x238>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	f000 8099 	beq.w	800606e <HAL_TIM_ConfigClockSource+0x1ee>
 8005f3c:	4a5e      	ldr	r2, [pc, #376]	@ (80060b8 <HAL_TIM_ConfigClockSource+0x238>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	f200 809e 	bhi.w	8006080 <HAL_TIM_ConfigClockSource+0x200>
 8005f44:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f48:	f000 8091 	beq.w	800606e <HAL_TIM_ConfigClockSource+0x1ee>
 8005f4c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f50:	f200 8096 	bhi.w	8006080 <HAL_TIM_ConfigClockSource+0x200>
 8005f54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f58:	f000 8089 	beq.w	800606e <HAL_TIM_ConfigClockSource+0x1ee>
 8005f5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f60:	f200 808e 	bhi.w	8006080 <HAL_TIM_ConfigClockSource+0x200>
 8005f64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f68:	d03e      	beq.n	8005fe8 <HAL_TIM_ConfigClockSource+0x168>
 8005f6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f6e:	f200 8087 	bhi.w	8006080 <HAL_TIM_ConfigClockSource+0x200>
 8005f72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f76:	f000 8086 	beq.w	8006086 <HAL_TIM_ConfigClockSource+0x206>
 8005f7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f7e:	d87f      	bhi.n	8006080 <HAL_TIM_ConfigClockSource+0x200>
 8005f80:	2b70      	cmp	r3, #112	@ 0x70
 8005f82:	d01a      	beq.n	8005fba <HAL_TIM_ConfigClockSource+0x13a>
 8005f84:	2b70      	cmp	r3, #112	@ 0x70
 8005f86:	d87b      	bhi.n	8006080 <HAL_TIM_ConfigClockSource+0x200>
 8005f88:	2b60      	cmp	r3, #96	@ 0x60
 8005f8a:	d050      	beq.n	800602e <HAL_TIM_ConfigClockSource+0x1ae>
 8005f8c:	2b60      	cmp	r3, #96	@ 0x60
 8005f8e:	d877      	bhi.n	8006080 <HAL_TIM_ConfigClockSource+0x200>
 8005f90:	2b50      	cmp	r3, #80	@ 0x50
 8005f92:	d03c      	beq.n	800600e <HAL_TIM_ConfigClockSource+0x18e>
 8005f94:	2b50      	cmp	r3, #80	@ 0x50
 8005f96:	d873      	bhi.n	8006080 <HAL_TIM_ConfigClockSource+0x200>
 8005f98:	2b40      	cmp	r3, #64	@ 0x40
 8005f9a:	d058      	beq.n	800604e <HAL_TIM_ConfigClockSource+0x1ce>
 8005f9c:	2b40      	cmp	r3, #64	@ 0x40
 8005f9e:	d86f      	bhi.n	8006080 <HAL_TIM_ConfigClockSource+0x200>
 8005fa0:	2b30      	cmp	r3, #48	@ 0x30
 8005fa2:	d064      	beq.n	800606e <HAL_TIM_ConfigClockSource+0x1ee>
 8005fa4:	2b30      	cmp	r3, #48	@ 0x30
 8005fa6:	d86b      	bhi.n	8006080 <HAL_TIM_ConfigClockSource+0x200>
 8005fa8:	2b20      	cmp	r3, #32
 8005faa:	d060      	beq.n	800606e <HAL_TIM_ConfigClockSource+0x1ee>
 8005fac:	2b20      	cmp	r3, #32
 8005fae:	d867      	bhi.n	8006080 <HAL_TIM_ConfigClockSource+0x200>
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d05c      	beq.n	800606e <HAL_TIM_ConfigClockSource+0x1ee>
 8005fb4:	2b10      	cmp	r3, #16
 8005fb6:	d05a      	beq.n	800606e <HAL_TIM_ConfigClockSource+0x1ee>
 8005fb8:	e062      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fca:	f000 fdf3 	bl	8006bb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	609a      	str	r2, [r3, #8]
      break;
 8005fe6:	e04f      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ff8:	f000 fddc 	bl	8006bb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689a      	ldr	r2, [r3, #8]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800600a:	609a      	str	r2, [r3, #8]
      break;
 800600c:	e03c      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800601a:	461a      	mov	r2, r3
 800601c:	f000 fd4e 	bl	8006abc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2150      	movs	r1, #80	@ 0x50
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fda7 	bl	8006b7a <TIM_ITRx_SetConfig>
      break;
 800602c:	e02c      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800603a:	461a      	mov	r2, r3
 800603c:	f000 fd6d 	bl	8006b1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2160      	movs	r1, #96	@ 0x60
 8006046:	4618      	mov	r0, r3
 8006048:	f000 fd97 	bl	8006b7a <TIM_ITRx_SetConfig>
      break;
 800604c:	e01c      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800605a:	461a      	mov	r2, r3
 800605c:	f000 fd2e 	bl	8006abc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2140      	movs	r1, #64	@ 0x40
 8006066:	4618      	mov	r0, r3
 8006068:	f000 fd87 	bl	8006b7a <TIM_ITRx_SetConfig>
      break;
 800606c:	e00c      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4619      	mov	r1, r3
 8006078:	4610      	mov	r0, r2
 800607a:	f000 fd7e 	bl	8006b7a <TIM_ITRx_SetConfig>
      break;
 800607e:	e003      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	73fb      	strb	r3, [r7, #15]
      break;
 8006084:	e000      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x208>
      break;
 8006086:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006098:	7bfb      	ldrb	r3, [r7, #15]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	00100070 	.word	0x00100070
 80060a8:	00100060 	.word	0x00100060
 80060ac:	00100050 	.word	0x00100050
 80060b0:	00100040 	.word	0x00100040
 80060b4:	00100030 	.word	0x00100030
 80060b8:	00100020 	.word	0x00100020

080060bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a7a      	ldr	r2, [pc, #488]	@ (80062b8 <TIM_Base_SetConfig+0x1fc>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d02b      	beq.n	800612c <TIM_Base_SetConfig+0x70>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a79      	ldr	r2, [pc, #484]	@ (80062bc <TIM_Base_SetConfig+0x200>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d027      	beq.n	800612c <TIM_Base_SetConfig+0x70>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060e2:	d023      	beq.n	800612c <TIM_Base_SetConfig+0x70>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060ea:	d01f      	beq.n	800612c <TIM_Base_SetConfig+0x70>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a74      	ldr	r2, [pc, #464]	@ (80062c0 <TIM_Base_SetConfig+0x204>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d01b      	beq.n	800612c <TIM_Base_SetConfig+0x70>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a73      	ldr	r2, [pc, #460]	@ (80062c4 <TIM_Base_SetConfig+0x208>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d017      	beq.n	800612c <TIM_Base_SetConfig+0x70>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a72      	ldr	r2, [pc, #456]	@ (80062c8 <TIM_Base_SetConfig+0x20c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d013      	beq.n	800612c <TIM_Base_SetConfig+0x70>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a71      	ldr	r2, [pc, #452]	@ (80062cc <TIM_Base_SetConfig+0x210>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d00f      	beq.n	800612c <TIM_Base_SetConfig+0x70>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a70      	ldr	r2, [pc, #448]	@ (80062d0 <TIM_Base_SetConfig+0x214>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00b      	beq.n	800612c <TIM_Base_SetConfig+0x70>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a6f      	ldr	r2, [pc, #444]	@ (80062d4 <TIM_Base_SetConfig+0x218>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d007      	beq.n	800612c <TIM_Base_SetConfig+0x70>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a6e      	ldr	r2, [pc, #440]	@ (80062d8 <TIM_Base_SetConfig+0x21c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d003      	beq.n	800612c <TIM_Base_SetConfig+0x70>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a6d      	ldr	r2, [pc, #436]	@ (80062dc <TIM_Base_SetConfig+0x220>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d108      	bne.n	800613e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a5d      	ldr	r2, [pc, #372]	@ (80062b8 <TIM_Base_SetConfig+0x1fc>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d05b      	beq.n	80061fe <TIM_Base_SetConfig+0x142>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a5c      	ldr	r2, [pc, #368]	@ (80062bc <TIM_Base_SetConfig+0x200>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d057      	beq.n	80061fe <TIM_Base_SetConfig+0x142>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006154:	d053      	beq.n	80061fe <TIM_Base_SetConfig+0x142>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800615c:	d04f      	beq.n	80061fe <TIM_Base_SetConfig+0x142>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a57      	ldr	r2, [pc, #348]	@ (80062c0 <TIM_Base_SetConfig+0x204>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d04b      	beq.n	80061fe <TIM_Base_SetConfig+0x142>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a56      	ldr	r2, [pc, #344]	@ (80062c4 <TIM_Base_SetConfig+0x208>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d047      	beq.n	80061fe <TIM_Base_SetConfig+0x142>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a55      	ldr	r2, [pc, #340]	@ (80062c8 <TIM_Base_SetConfig+0x20c>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d043      	beq.n	80061fe <TIM_Base_SetConfig+0x142>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a54      	ldr	r2, [pc, #336]	@ (80062cc <TIM_Base_SetConfig+0x210>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d03f      	beq.n	80061fe <TIM_Base_SetConfig+0x142>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a53      	ldr	r2, [pc, #332]	@ (80062d0 <TIM_Base_SetConfig+0x214>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d03b      	beq.n	80061fe <TIM_Base_SetConfig+0x142>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a52      	ldr	r2, [pc, #328]	@ (80062d4 <TIM_Base_SetConfig+0x218>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d037      	beq.n	80061fe <TIM_Base_SetConfig+0x142>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a51      	ldr	r2, [pc, #324]	@ (80062d8 <TIM_Base_SetConfig+0x21c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d033      	beq.n	80061fe <TIM_Base_SetConfig+0x142>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a50      	ldr	r2, [pc, #320]	@ (80062dc <TIM_Base_SetConfig+0x220>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d02f      	beq.n	80061fe <TIM_Base_SetConfig+0x142>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a4f      	ldr	r2, [pc, #316]	@ (80062e0 <TIM_Base_SetConfig+0x224>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d02b      	beq.n	80061fe <TIM_Base_SetConfig+0x142>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a4e      	ldr	r2, [pc, #312]	@ (80062e4 <TIM_Base_SetConfig+0x228>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d027      	beq.n	80061fe <TIM_Base_SetConfig+0x142>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a4d      	ldr	r2, [pc, #308]	@ (80062e8 <TIM_Base_SetConfig+0x22c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d023      	beq.n	80061fe <TIM_Base_SetConfig+0x142>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a4c      	ldr	r2, [pc, #304]	@ (80062ec <TIM_Base_SetConfig+0x230>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d01f      	beq.n	80061fe <TIM_Base_SetConfig+0x142>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a4b      	ldr	r2, [pc, #300]	@ (80062f0 <TIM_Base_SetConfig+0x234>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d01b      	beq.n	80061fe <TIM_Base_SetConfig+0x142>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a4a      	ldr	r2, [pc, #296]	@ (80062f4 <TIM_Base_SetConfig+0x238>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d017      	beq.n	80061fe <TIM_Base_SetConfig+0x142>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a49      	ldr	r2, [pc, #292]	@ (80062f8 <TIM_Base_SetConfig+0x23c>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d013      	beq.n	80061fe <TIM_Base_SetConfig+0x142>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a48      	ldr	r2, [pc, #288]	@ (80062fc <TIM_Base_SetConfig+0x240>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d00f      	beq.n	80061fe <TIM_Base_SetConfig+0x142>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a47      	ldr	r2, [pc, #284]	@ (8006300 <TIM_Base_SetConfig+0x244>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00b      	beq.n	80061fe <TIM_Base_SetConfig+0x142>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a46      	ldr	r2, [pc, #280]	@ (8006304 <TIM_Base_SetConfig+0x248>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d007      	beq.n	80061fe <TIM_Base_SetConfig+0x142>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a45      	ldr	r2, [pc, #276]	@ (8006308 <TIM_Base_SetConfig+0x24c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d003      	beq.n	80061fe <TIM_Base_SetConfig+0x142>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a44      	ldr	r2, [pc, #272]	@ (800630c <TIM_Base_SetConfig+0x250>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d108      	bne.n	8006210 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4313      	orrs	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a20      	ldr	r2, [pc, #128]	@ (80062b8 <TIM_Base_SetConfig+0x1fc>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d023      	beq.n	8006284 <TIM_Base_SetConfig+0x1c8>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a1f      	ldr	r2, [pc, #124]	@ (80062bc <TIM_Base_SetConfig+0x200>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d01f      	beq.n	8006284 <TIM_Base_SetConfig+0x1c8>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a24      	ldr	r2, [pc, #144]	@ (80062d8 <TIM_Base_SetConfig+0x21c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d01b      	beq.n	8006284 <TIM_Base_SetConfig+0x1c8>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a23      	ldr	r2, [pc, #140]	@ (80062dc <TIM_Base_SetConfig+0x220>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d017      	beq.n	8006284 <TIM_Base_SetConfig+0x1c8>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a28      	ldr	r2, [pc, #160]	@ (80062f8 <TIM_Base_SetConfig+0x23c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d013      	beq.n	8006284 <TIM_Base_SetConfig+0x1c8>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a27      	ldr	r2, [pc, #156]	@ (80062fc <TIM_Base_SetConfig+0x240>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d00f      	beq.n	8006284 <TIM_Base_SetConfig+0x1c8>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a26      	ldr	r2, [pc, #152]	@ (8006300 <TIM_Base_SetConfig+0x244>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d00b      	beq.n	8006284 <TIM_Base_SetConfig+0x1c8>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a25      	ldr	r2, [pc, #148]	@ (8006304 <TIM_Base_SetConfig+0x248>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d007      	beq.n	8006284 <TIM_Base_SetConfig+0x1c8>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a24      	ldr	r2, [pc, #144]	@ (8006308 <TIM_Base_SetConfig+0x24c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d003      	beq.n	8006284 <TIM_Base_SetConfig+0x1c8>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a23      	ldr	r2, [pc, #140]	@ (800630c <TIM_Base_SetConfig+0x250>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d103      	bne.n	800628c <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b01      	cmp	r3, #1
 800629c:	d105      	bne.n	80062aa <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	f023 0201 	bic.w	r2, r3, #1
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	611a      	str	r2, [r3, #16]
  }
}
 80062aa:	bf00      	nop
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	40012c00 	.word	0x40012c00
 80062bc:	50012c00 	.word	0x50012c00
 80062c0:	40000400 	.word	0x40000400
 80062c4:	50000400 	.word	0x50000400
 80062c8:	40000800 	.word	0x40000800
 80062cc:	50000800 	.word	0x50000800
 80062d0:	40000c00 	.word	0x40000c00
 80062d4:	50000c00 	.word	0x50000c00
 80062d8:	40013400 	.word	0x40013400
 80062dc:	50013400 	.word	0x50013400
 80062e0:	40001800 	.word	0x40001800
 80062e4:	50001800 	.word	0x50001800
 80062e8:	40001c00 	.word	0x40001c00
 80062ec:	50001c00 	.word	0x50001c00
 80062f0:	40002000 	.word	0x40002000
 80062f4:	50002000 	.word	0x50002000
 80062f8:	40014000 	.word	0x40014000
 80062fc:	50014000 	.word	0x50014000
 8006300:	40014400 	.word	0x40014400
 8006304:	50014400 	.word	0x50014400
 8006308:	40014800 	.word	0x40014800
 800630c:	50014800 	.word	0x50014800

08006310 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006310:	b480      	push	{r7}
 8006312:	b087      	sub	sp, #28
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	f023 0201 	bic.w	r2, r3, #1
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800633e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f023 0303 	bic.w	r3, r3, #3
 800634a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f023 0302 	bic.w	r3, r3, #2
 800635c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	4313      	orrs	r3, r2
 8006366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a40      	ldr	r2, [pc, #256]	@ (800646c <TIM_OC1_SetConfig+0x15c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d023      	beq.n	80063b8 <TIM_OC1_SetConfig+0xa8>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a3f      	ldr	r2, [pc, #252]	@ (8006470 <TIM_OC1_SetConfig+0x160>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d01f      	beq.n	80063b8 <TIM_OC1_SetConfig+0xa8>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a3e      	ldr	r2, [pc, #248]	@ (8006474 <TIM_OC1_SetConfig+0x164>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d01b      	beq.n	80063b8 <TIM_OC1_SetConfig+0xa8>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a3d      	ldr	r2, [pc, #244]	@ (8006478 <TIM_OC1_SetConfig+0x168>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d017      	beq.n	80063b8 <TIM_OC1_SetConfig+0xa8>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a3c      	ldr	r2, [pc, #240]	@ (800647c <TIM_OC1_SetConfig+0x16c>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d013      	beq.n	80063b8 <TIM_OC1_SetConfig+0xa8>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a3b      	ldr	r2, [pc, #236]	@ (8006480 <TIM_OC1_SetConfig+0x170>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d00f      	beq.n	80063b8 <TIM_OC1_SetConfig+0xa8>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a3a      	ldr	r2, [pc, #232]	@ (8006484 <TIM_OC1_SetConfig+0x174>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d00b      	beq.n	80063b8 <TIM_OC1_SetConfig+0xa8>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a39      	ldr	r2, [pc, #228]	@ (8006488 <TIM_OC1_SetConfig+0x178>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d007      	beq.n	80063b8 <TIM_OC1_SetConfig+0xa8>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a38      	ldr	r2, [pc, #224]	@ (800648c <TIM_OC1_SetConfig+0x17c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d003      	beq.n	80063b8 <TIM_OC1_SetConfig+0xa8>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a37      	ldr	r2, [pc, #220]	@ (8006490 <TIM_OC1_SetConfig+0x180>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d10c      	bne.n	80063d2 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f023 0308 	bic.w	r3, r3, #8
 80063be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f023 0304 	bic.w	r3, r3, #4
 80063d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a25      	ldr	r2, [pc, #148]	@ (800646c <TIM_OC1_SetConfig+0x15c>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d023      	beq.n	8006422 <TIM_OC1_SetConfig+0x112>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a24      	ldr	r2, [pc, #144]	@ (8006470 <TIM_OC1_SetConfig+0x160>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d01f      	beq.n	8006422 <TIM_OC1_SetConfig+0x112>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a23      	ldr	r2, [pc, #140]	@ (8006474 <TIM_OC1_SetConfig+0x164>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d01b      	beq.n	8006422 <TIM_OC1_SetConfig+0x112>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a22      	ldr	r2, [pc, #136]	@ (8006478 <TIM_OC1_SetConfig+0x168>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d017      	beq.n	8006422 <TIM_OC1_SetConfig+0x112>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a21      	ldr	r2, [pc, #132]	@ (800647c <TIM_OC1_SetConfig+0x16c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d013      	beq.n	8006422 <TIM_OC1_SetConfig+0x112>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a20      	ldr	r2, [pc, #128]	@ (8006480 <TIM_OC1_SetConfig+0x170>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d00f      	beq.n	8006422 <TIM_OC1_SetConfig+0x112>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a1f      	ldr	r2, [pc, #124]	@ (8006484 <TIM_OC1_SetConfig+0x174>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00b      	beq.n	8006422 <TIM_OC1_SetConfig+0x112>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a1e      	ldr	r2, [pc, #120]	@ (8006488 <TIM_OC1_SetConfig+0x178>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d007      	beq.n	8006422 <TIM_OC1_SetConfig+0x112>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a1d      	ldr	r2, [pc, #116]	@ (800648c <TIM_OC1_SetConfig+0x17c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d003      	beq.n	8006422 <TIM_OC1_SetConfig+0x112>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a1c      	ldr	r2, [pc, #112]	@ (8006490 <TIM_OC1_SetConfig+0x180>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d111      	bne.n	8006446 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4313      	orrs	r3, r2
 8006444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	621a      	str	r2, [r3, #32]
}
 8006460:	bf00      	nop
 8006462:	371c      	adds	r7, #28
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	40012c00 	.word	0x40012c00
 8006470:	50012c00 	.word	0x50012c00
 8006474:	40013400 	.word	0x40013400
 8006478:	50013400 	.word	0x50013400
 800647c:	40014000 	.word	0x40014000
 8006480:	50014000 	.word	0x50014000
 8006484:	40014400 	.word	0x40014400
 8006488:	50014400 	.word	0x50014400
 800648c:	40014800 	.word	0x40014800
 8006490:	50014800 	.word	0x50014800

08006494 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	f023 0210 	bic.w	r2, r3, #16
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	021b      	lsls	r3, r3, #8
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	4313      	orrs	r3, r2
 80064da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f023 0320 	bic.w	r3, r3, #32
 80064e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	011b      	lsls	r3, r3, #4
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a36      	ldr	r2, [pc, #216]	@ (80065cc <TIM_OC2_SetConfig+0x138>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00b      	beq.n	8006510 <TIM_OC2_SetConfig+0x7c>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a35      	ldr	r2, [pc, #212]	@ (80065d0 <TIM_OC2_SetConfig+0x13c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d007      	beq.n	8006510 <TIM_OC2_SetConfig+0x7c>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a34      	ldr	r2, [pc, #208]	@ (80065d4 <TIM_OC2_SetConfig+0x140>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d003      	beq.n	8006510 <TIM_OC2_SetConfig+0x7c>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a33      	ldr	r2, [pc, #204]	@ (80065d8 <TIM_OC2_SetConfig+0x144>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d10d      	bne.n	800652c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	011b      	lsls	r3, r3, #4
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	4313      	orrs	r3, r2
 8006522:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800652a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a27      	ldr	r2, [pc, #156]	@ (80065cc <TIM_OC2_SetConfig+0x138>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d023      	beq.n	800657c <TIM_OC2_SetConfig+0xe8>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a26      	ldr	r2, [pc, #152]	@ (80065d0 <TIM_OC2_SetConfig+0x13c>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d01f      	beq.n	800657c <TIM_OC2_SetConfig+0xe8>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a25      	ldr	r2, [pc, #148]	@ (80065d4 <TIM_OC2_SetConfig+0x140>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d01b      	beq.n	800657c <TIM_OC2_SetConfig+0xe8>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a24      	ldr	r2, [pc, #144]	@ (80065d8 <TIM_OC2_SetConfig+0x144>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d017      	beq.n	800657c <TIM_OC2_SetConfig+0xe8>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a23      	ldr	r2, [pc, #140]	@ (80065dc <TIM_OC2_SetConfig+0x148>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d013      	beq.n	800657c <TIM_OC2_SetConfig+0xe8>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a22      	ldr	r2, [pc, #136]	@ (80065e0 <TIM_OC2_SetConfig+0x14c>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d00f      	beq.n	800657c <TIM_OC2_SetConfig+0xe8>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a21      	ldr	r2, [pc, #132]	@ (80065e4 <TIM_OC2_SetConfig+0x150>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00b      	beq.n	800657c <TIM_OC2_SetConfig+0xe8>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a20      	ldr	r2, [pc, #128]	@ (80065e8 <TIM_OC2_SetConfig+0x154>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d007      	beq.n	800657c <TIM_OC2_SetConfig+0xe8>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a1f      	ldr	r2, [pc, #124]	@ (80065ec <TIM_OC2_SetConfig+0x158>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d003      	beq.n	800657c <TIM_OC2_SetConfig+0xe8>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a1e      	ldr	r2, [pc, #120]	@ (80065f0 <TIM_OC2_SetConfig+0x15c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d113      	bne.n	80065a4 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006582:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800658a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	4313      	orrs	r3, r2
 8006596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	621a      	str	r2, [r3, #32]
}
 80065be:	bf00      	nop
 80065c0:	371c      	adds	r7, #28
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	40012c00 	.word	0x40012c00
 80065d0:	50012c00 	.word	0x50012c00
 80065d4:	40013400 	.word	0x40013400
 80065d8:	50013400 	.word	0x50013400
 80065dc:	40014000 	.word	0x40014000
 80065e0:	50014000 	.word	0x50014000
 80065e4:	40014400 	.word	0x40014400
 80065e8:	50014400 	.word	0x50014400
 80065ec:	40014800 	.word	0x40014800
 80065f0:	50014800 	.word	0x50014800

080065f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0303 	bic.w	r3, r3, #3
 800662e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	021b      	lsls	r3, r3, #8
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	4313      	orrs	r3, r2
 800664c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a35      	ldr	r2, [pc, #212]	@ (8006728 <TIM_OC3_SetConfig+0x134>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d00b      	beq.n	800666e <TIM_OC3_SetConfig+0x7a>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a34      	ldr	r2, [pc, #208]	@ (800672c <TIM_OC3_SetConfig+0x138>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d007      	beq.n	800666e <TIM_OC3_SetConfig+0x7a>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a33      	ldr	r2, [pc, #204]	@ (8006730 <TIM_OC3_SetConfig+0x13c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d003      	beq.n	800666e <TIM_OC3_SetConfig+0x7a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a32      	ldr	r2, [pc, #200]	@ (8006734 <TIM_OC3_SetConfig+0x140>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d10d      	bne.n	800668a <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006674:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	021b      	lsls	r3, r3, #8
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	4313      	orrs	r3, r2
 8006680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a26      	ldr	r2, [pc, #152]	@ (8006728 <TIM_OC3_SetConfig+0x134>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d023      	beq.n	80066da <TIM_OC3_SetConfig+0xe6>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a25      	ldr	r2, [pc, #148]	@ (800672c <TIM_OC3_SetConfig+0x138>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d01f      	beq.n	80066da <TIM_OC3_SetConfig+0xe6>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a24      	ldr	r2, [pc, #144]	@ (8006730 <TIM_OC3_SetConfig+0x13c>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d01b      	beq.n	80066da <TIM_OC3_SetConfig+0xe6>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a23      	ldr	r2, [pc, #140]	@ (8006734 <TIM_OC3_SetConfig+0x140>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d017      	beq.n	80066da <TIM_OC3_SetConfig+0xe6>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a22      	ldr	r2, [pc, #136]	@ (8006738 <TIM_OC3_SetConfig+0x144>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d013      	beq.n	80066da <TIM_OC3_SetConfig+0xe6>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a21      	ldr	r2, [pc, #132]	@ (800673c <TIM_OC3_SetConfig+0x148>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d00f      	beq.n	80066da <TIM_OC3_SetConfig+0xe6>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a20      	ldr	r2, [pc, #128]	@ (8006740 <TIM_OC3_SetConfig+0x14c>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d00b      	beq.n	80066da <TIM_OC3_SetConfig+0xe6>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006744 <TIM_OC3_SetConfig+0x150>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d007      	beq.n	80066da <TIM_OC3_SetConfig+0xe6>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a1e      	ldr	r2, [pc, #120]	@ (8006748 <TIM_OC3_SetConfig+0x154>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d003      	beq.n	80066da <TIM_OC3_SetConfig+0xe6>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a1d      	ldr	r2, [pc, #116]	@ (800674c <TIM_OC3_SetConfig+0x158>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d113      	bne.n	8006702 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	011b      	lsls	r3, r3, #4
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685a      	ldr	r2, [r3, #4]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	621a      	str	r2, [r3, #32]
}
 800671c:	bf00      	nop
 800671e:	371c      	adds	r7, #28
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr
 8006728:	40012c00 	.word	0x40012c00
 800672c:	50012c00 	.word	0x50012c00
 8006730:	40013400 	.word	0x40013400
 8006734:	50013400 	.word	0x50013400
 8006738:	40014000 	.word	0x40014000
 800673c:	50014000 	.word	0x50014000
 8006740:	40014400 	.word	0x40014400
 8006744:	50014400 	.word	0x50014400
 8006748:	40014800 	.word	0x40014800
 800674c:	50014800 	.word	0x50014800

08006750 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006750:	b480      	push	{r7}
 8006752:	b087      	sub	sp, #28
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800677e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800678a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	021b      	lsls	r3, r3, #8
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	4313      	orrs	r3, r2
 8006796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800679e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	031b      	lsls	r3, r3, #12
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a36      	ldr	r2, [pc, #216]	@ (8006888 <TIM_OC4_SetConfig+0x138>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00b      	beq.n	80067cc <TIM_OC4_SetConfig+0x7c>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a35      	ldr	r2, [pc, #212]	@ (800688c <TIM_OC4_SetConfig+0x13c>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d007      	beq.n	80067cc <TIM_OC4_SetConfig+0x7c>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a34      	ldr	r2, [pc, #208]	@ (8006890 <TIM_OC4_SetConfig+0x140>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d003      	beq.n	80067cc <TIM_OC4_SetConfig+0x7c>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a33      	ldr	r2, [pc, #204]	@ (8006894 <TIM_OC4_SetConfig+0x144>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d10d      	bne.n	80067e8 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80067d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	031b      	lsls	r3, r3, #12
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	4313      	orrs	r3, r2
 80067de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a27      	ldr	r2, [pc, #156]	@ (8006888 <TIM_OC4_SetConfig+0x138>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d023      	beq.n	8006838 <TIM_OC4_SetConfig+0xe8>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a26      	ldr	r2, [pc, #152]	@ (800688c <TIM_OC4_SetConfig+0x13c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d01f      	beq.n	8006838 <TIM_OC4_SetConfig+0xe8>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a25      	ldr	r2, [pc, #148]	@ (8006890 <TIM_OC4_SetConfig+0x140>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d01b      	beq.n	8006838 <TIM_OC4_SetConfig+0xe8>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a24      	ldr	r2, [pc, #144]	@ (8006894 <TIM_OC4_SetConfig+0x144>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d017      	beq.n	8006838 <TIM_OC4_SetConfig+0xe8>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a23      	ldr	r2, [pc, #140]	@ (8006898 <TIM_OC4_SetConfig+0x148>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d013      	beq.n	8006838 <TIM_OC4_SetConfig+0xe8>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a22      	ldr	r2, [pc, #136]	@ (800689c <TIM_OC4_SetConfig+0x14c>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d00f      	beq.n	8006838 <TIM_OC4_SetConfig+0xe8>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a21      	ldr	r2, [pc, #132]	@ (80068a0 <TIM_OC4_SetConfig+0x150>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d00b      	beq.n	8006838 <TIM_OC4_SetConfig+0xe8>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a20      	ldr	r2, [pc, #128]	@ (80068a4 <TIM_OC4_SetConfig+0x154>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d007      	beq.n	8006838 <TIM_OC4_SetConfig+0xe8>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a1f      	ldr	r2, [pc, #124]	@ (80068a8 <TIM_OC4_SetConfig+0x158>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d003      	beq.n	8006838 <TIM_OC4_SetConfig+0xe8>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a1e      	ldr	r2, [pc, #120]	@ (80068ac <TIM_OC4_SetConfig+0x15c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d113      	bne.n	8006860 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800683e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006846:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	019b      	lsls	r3, r3, #6
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	4313      	orrs	r3, r2
 8006852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	019b      	lsls	r3, r3, #6
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	4313      	orrs	r3, r2
 800685e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	621a      	str	r2, [r3, #32]
}
 800687a:	bf00      	nop
 800687c:	371c      	adds	r7, #28
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	40012c00 	.word	0x40012c00
 800688c:	50012c00 	.word	0x50012c00
 8006890:	40013400 	.word	0x40013400
 8006894:	50013400 	.word	0x50013400
 8006898:	40014000 	.word	0x40014000
 800689c:	50014000 	.word	0x50014000
 80068a0:	40014400 	.word	0x40014400
 80068a4:	50014400 	.word	0x50014400
 80068a8:	40014800 	.word	0x40014800
 80068ac:	50014800 	.word	0x50014800

080068b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b087      	sub	sp, #28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80068f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	041b      	lsls	r3, r3, #16
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	4313      	orrs	r3, r2
 8006900:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a21      	ldr	r2, [pc, #132]	@ (800698c <TIM_OC5_SetConfig+0xdc>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d023      	beq.n	8006952 <TIM_OC5_SetConfig+0xa2>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a20      	ldr	r2, [pc, #128]	@ (8006990 <TIM_OC5_SetConfig+0xe0>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d01f      	beq.n	8006952 <TIM_OC5_SetConfig+0xa2>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a1f      	ldr	r2, [pc, #124]	@ (8006994 <TIM_OC5_SetConfig+0xe4>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d01b      	beq.n	8006952 <TIM_OC5_SetConfig+0xa2>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a1e      	ldr	r2, [pc, #120]	@ (8006998 <TIM_OC5_SetConfig+0xe8>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d017      	beq.n	8006952 <TIM_OC5_SetConfig+0xa2>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a1d      	ldr	r2, [pc, #116]	@ (800699c <TIM_OC5_SetConfig+0xec>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d013      	beq.n	8006952 <TIM_OC5_SetConfig+0xa2>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a1c      	ldr	r2, [pc, #112]	@ (80069a0 <TIM_OC5_SetConfig+0xf0>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d00f      	beq.n	8006952 <TIM_OC5_SetConfig+0xa2>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a1b      	ldr	r2, [pc, #108]	@ (80069a4 <TIM_OC5_SetConfig+0xf4>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d00b      	beq.n	8006952 <TIM_OC5_SetConfig+0xa2>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a1a      	ldr	r2, [pc, #104]	@ (80069a8 <TIM_OC5_SetConfig+0xf8>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d007      	beq.n	8006952 <TIM_OC5_SetConfig+0xa2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a19      	ldr	r2, [pc, #100]	@ (80069ac <TIM_OC5_SetConfig+0xfc>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d003      	beq.n	8006952 <TIM_OC5_SetConfig+0xa2>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a18      	ldr	r2, [pc, #96]	@ (80069b0 <TIM_OC5_SetConfig+0x100>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d109      	bne.n	8006966 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006958:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	021b      	lsls	r3, r3, #8
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	4313      	orrs	r3, r2
 8006964:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	621a      	str	r2, [r3, #32]
}
 8006980:	bf00      	nop
 8006982:	371c      	adds	r7, #28
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	40012c00 	.word	0x40012c00
 8006990:	50012c00 	.word	0x50012c00
 8006994:	40013400 	.word	0x40013400
 8006998:	50013400 	.word	0x50013400
 800699c:	40014000 	.word	0x40014000
 80069a0:	50014000 	.word	0x50014000
 80069a4:	40014400 	.word	0x40014400
 80069a8:	50014400 	.word	0x50014400
 80069ac:	40014800 	.word	0x40014800
 80069b0:	50014800 	.word	0x50014800

080069b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	021b      	lsls	r3, r3, #8
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	051b      	lsls	r3, r3, #20
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a22      	ldr	r2, [pc, #136]	@ (8006a94 <TIM_OC6_SetConfig+0xe0>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d023      	beq.n	8006a58 <TIM_OC6_SetConfig+0xa4>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a21      	ldr	r2, [pc, #132]	@ (8006a98 <TIM_OC6_SetConfig+0xe4>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d01f      	beq.n	8006a58 <TIM_OC6_SetConfig+0xa4>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a20      	ldr	r2, [pc, #128]	@ (8006a9c <TIM_OC6_SetConfig+0xe8>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d01b      	beq.n	8006a58 <TIM_OC6_SetConfig+0xa4>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a1f      	ldr	r2, [pc, #124]	@ (8006aa0 <TIM_OC6_SetConfig+0xec>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d017      	beq.n	8006a58 <TIM_OC6_SetConfig+0xa4>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8006aa4 <TIM_OC6_SetConfig+0xf0>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d013      	beq.n	8006a58 <TIM_OC6_SetConfig+0xa4>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a1d      	ldr	r2, [pc, #116]	@ (8006aa8 <TIM_OC6_SetConfig+0xf4>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d00f      	beq.n	8006a58 <TIM_OC6_SetConfig+0xa4>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8006aac <TIM_OC6_SetConfig+0xf8>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d00b      	beq.n	8006a58 <TIM_OC6_SetConfig+0xa4>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a1b      	ldr	r2, [pc, #108]	@ (8006ab0 <TIM_OC6_SetConfig+0xfc>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d007      	beq.n	8006a58 <TIM_OC6_SetConfig+0xa4>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a1a      	ldr	r2, [pc, #104]	@ (8006ab4 <TIM_OC6_SetConfig+0x100>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d003      	beq.n	8006a58 <TIM_OC6_SetConfig+0xa4>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a19      	ldr	r2, [pc, #100]	@ (8006ab8 <TIM_OC6_SetConfig+0x104>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d109      	bne.n	8006a6c <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	029b      	lsls	r3, r3, #10
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	621a      	str	r2, [r3, #32]
}
 8006a86:	bf00      	nop
 8006a88:	371c      	adds	r7, #28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	40012c00 	.word	0x40012c00
 8006a98:	50012c00 	.word	0x50012c00
 8006a9c:	40013400 	.word	0x40013400
 8006aa0:	50013400 	.word	0x50013400
 8006aa4:	40014000 	.word	0x40014000
 8006aa8:	50014000 	.word	0x50014000
 8006aac:	40014400 	.word	0x40014400
 8006ab0:	50014400 	.word	0x50014400
 8006ab4:	40014800 	.word	0x40014800
 8006ab8:	50014800 	.word	0x50014800

08006abc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	f023 0201 	bic.w	r2, r3, #1
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	011b      	lsls	r3, r3, #4
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f023 030a 	bic.w	r3, r3, #10
 8006af8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	621a      	str	r2, [r3, #32]
}
 8006b0e:	bf00      	nop
 8006b10:	371c      	adds	r7, #28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b087      	sub	sp, #28
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	f023 0210 	bic.w	r2, r3, #16
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	031b      	lsls	r3, r3, #12
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	011b      	lsls	r3, r3, #4
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	621a      	str	r2, [r3, #32]
}
 8006b6e:	bf00      	nop
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006b90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	f043 0307 	orr.w	r3, r3, #7
 8006ba0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	609a      	str	r2, [r3, #8]
}
 8006ba8:	bf00      	nop
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
 8006bc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	021a      	lsls	r2, r3, #8
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	609a      	str	r2, [r3, #8]
}
 8006be8:	bf00      	nop
 8006bea:	371c      	adds	r7, #28
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	f003 031f 	and.w	r3, r3, #31
 8006c06:	2201      	movs	r2, #1
 8006c08:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6a1a      	ldr	r2, [r3, #32]
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	43db      	mvns	r3, r3
 8006c16:	401a      	ands	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6a1a      	ldr	r2, [r3, #32]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	f003 031f 	and.w	r3, r3, #31
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	fa01 f303 	lsl.w	r3, r1, r3
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	621a      	str	r2, [r3, #32]
}
 8006c32:	bf00      	nop
 8006c34:	371c      	adds	r7, #28
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
	...

08006c40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d101      	bne.n	8006c58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c54:	2302      	movs	r3, #2
 8006c56:	e0a1      	b.n	8006d9c <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a4a      	ldr	r2, [pc, #296]	@ (8006da8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d00e      	beq.n	8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a49      	ldr	r2, [pc, #292]	@ (8006dac <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d009      	beq.n	8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a47      	ldr	r2, [pc, #284]	@ (8006db0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d004      	beq.n	8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a46      	ldr	r2, [pc, #280]	@ (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d108      	bne.n	8006cb2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006ca6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006cb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a34      	ldr	r2, [pc, #208]	@ (8006da8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d04a      	beq.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a33      	ldr	r2, [pc, #204]	@ (8006dac <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d045      	beq.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cec:	d040      	beq.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006cf6:	d03b      	beq.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a2e      	ldr	r2, [pc, #184]	@ (8006db8 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d036      	beq.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a2d      	ldr	r2, [pc, #180]	@ (8006dbc <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d031      	beq.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a2b      	ldr	r2, [pc, #172]	@ (8006dc0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d02c      	beq.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a2a      	ldr	r2, [pc, #168]	@ (8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d027      	beq.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a28      	ldr	r2, [pc, #160]	@ (8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d022      	beq.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a27      	ldr	r2, [pc, #156]	@ (8006dcc <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d01d      	beq.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a1d      	ldr	r2, [pc, #116]	@ (8006db0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d018      	beq.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a1c      	ldr	r2, [pc, #112]	@ (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d013      	beq.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a20      	ldr	r2, [pc, #128]	@ (8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00e      	beq.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a1f      	ldr	r2, [pc, #124]	@ (8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d009      	beq.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a1d      	ldr	r2, [pc, #116]	@ (8006dd8 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d004      	beq.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d10c      	bne.n	8006d8a <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr
 8006da8:	40012c00 	.word	0x40012c00
 8006dac:	50012c00 	.word	0x50012c00
 8006db0:	40013400 	.word	0x40013400
 8006db4:	50013400 	.word	0x50013400
 8006db8:	40000400 	.word	0x40000400
 8006dbc:	50000400 	.word	0x50000400
 8006dc0:	40000800 	.word	0x40000800
 8006dc4:	50000800 	.word	0x50000800
 8006dc8:	40000c00 	.word	0x40000c00
 8006dcc:	50000c00 	.word	0x50000c00
 8006dd0:	40001800 	.word	0x40001800
 8006dd4:	50001800 	.word	0x50001800
 8006dd8:	40014000 	.word	0x40014000
 8006ddc:	50014000 	.word	0x50014000

08006de0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006dea:	2300      	movs	r3, #0
 8006dec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d101      	bne.n	8006dfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006df8:	2302      	movs	r3, #2
 8006dfa:	e07d      	b.n	8006ef8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e62:	4313      	orrs	r3, r2
 8006e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	041b      	lsls	r3, r3, #16
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a1e      	ldr	r2, [pc, #120]	@ (8006f04 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d00e      	beq.n	8006eac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a1d      	ldr	r2, [pc, #116]	@ (8006f08 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d009      	beq.n	8006eac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8006f0c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d004      	beq.n	8006eac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a1a      	ldr	r2, [pc, #104]	@ (8006f10 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d11c      	bne.n	8006ee6 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb6:	051b      	lsls	r3, r3, #20
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3714      	adds	r7, #20
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	40012c00 	.word	0x40012c00
 8006f08:	50012c00 	.word	0x50012c00
 8006f0c:	40013400 	.word	0x40013400
 8006f10:	50013400 	.word	0x50013400

08006f14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e042      	b.n	8006fac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d106      	bne.n	8006f3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f83b 	bl	8006fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2224      	movs	r2, #36	@ 0x24
 8006f42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 0201 	bic.w	r2, r2, #1
 8006f54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fa20 	bl	80073a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f82f 	bl	8006fc8 <UART_SetConfig>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e01b      	b.n	8006fac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0201 	orr.w	r2, r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fa9f 	bl	80074e8 <UART_CheckIdleState>
 8006faa:	4603      	mov	r3, r0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fcc:	b094      	sub	sp, #80	@ 0x50
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	4b78      	ldr	r3, [pc, #480]	@ (80071c0 <UART_SetConfig+0x1f8>)
 8006fde:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	431a      	orrs	r2, r3
 8006fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4971      	ldr	r1, [pc, #452]	@ (80071c4 <UART_SetConfig+0x1fc>)
 8007000:	4019      	ands	r1, r3
 8007002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007008:	430b      	orrs	r3, r1
 800700a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800700c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007018:	68d9      	ldr	r1, [r3, #12]
 800701a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	ea40 0301 	orr.w	r3, r0, r1
 8007022:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800702a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	4b64      	ldr	r3, [pc, #400]	@ (80071c0 <UART_SetConfig+0x1f8>)
 8007030:	429a      	cmp	r2, r3
 8007032:	d009      	beq.n	8007048 <UART_SetConfig+0x80>
 8007034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	4b63      	ldr	r3, [pc, #396]	@ (80071c8 <UART_SetConfig+0x200>)
 800703a:	429a      	cmp	r2, r3
 800703c:	d004      	beq.n	8007048 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800703e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007040:	6a1a      	ldr	r2, [r3, #32]
 8007042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007044:	4313      	orrs	r3, r2
 8007046:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8007052:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8007056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800705c:	430b      	orrs	r3, r1
 800705e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007066:	f023 000f 	bic.w	r0, r3, #15
 800706a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800706c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800706e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	ea40 0301 	orr.w	r3, r0, r1
 8007076:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	4b53      	ldr	r3, [pc, #332]	@ (80071cc <UART_SetConfig+0x204>)
 800707e:	429a      	cmp	r2, r3
 8007080:	d102      	bne.n	8007088 <UART_SetConfig+0xc0>
 8007082:	2301      	movs	r3, #1
 8007084:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007086:	e066      	b.n	8007156 <UART_SetConfig+0x18e>
 8007088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	4b50      	ldr	r3, [pc, #320]	@ (80071d0 <UART_SetConfig+0x208>)
 800708e:	429a      	cmp	r2, r3
 8007090:	d102      	bne.n	8007098 <UART_SetConfig+0xd0>
 8007092:	2302      	movs	r3, #2
 8007094:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007096:	e05e      	b.n	8007156 <UART_SetConfig+0x18e>
 8007098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	4b4d      	ldr	r3, [pc, #308]	@ (80071d4 <UART_SetConfig+0x20c>)
 800709e:	429a      	cmp	r2, r3
 80070a0:	d102      	bne.n	80070a8 <UART_SetConfig+0xe0>
 80070a2:	2304      	movs	r3, #4
 80070a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070a6:	e056      	b.n	8007156 <UART_SetConfig+0x18e>
 80070a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	4b4a      	ldr	r3, [pc, #296]	@ (80071d8 <UART_SetConfig+0x210>)
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d102      	bne.n	80070b8 <UART_SetConfig+0xf0>
 80070b2:	2308      	movs	r3, #8
 80070b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070b6:	e04e      	b.n	8007156 <UART_SetConfig+0x18e>
 80070b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	4b47      	ldr	r3, [pc, #284]	@ (80071dc <UART_SetConfig+0x214>)
 80070be:	429a      	cmp	r2, r3
 80070c0:	d102      	bne.n	80070c8 <UART_SetConfig+0x100>
 80070c2:	2310      	movs	r3, #16
 80070c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070c6:	e046      	b.n	8007156 <UART_SetConfig+0x18e>
 80070c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	4b44      	ldr	r3, [pc, #272]	@ (80071e0 <UART_SetConfig+0x218>)
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d102      	bne.n	80070d8 <UART_SetConfig+0x110>
 80070d2:	2320      	movs	r3, #32
 80070d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070d6:	e03e      	b.n	8007156 <UART_SetConfig+0x18e>
 80070d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	4b41      	ldr	r3, [pc, #260]	@ (80071e4 <UART_SetConfig+0x21c>)
 80070de:	429a      	cmp	r2, r3
 80070e0:	d102      	bne.n	80070e8 <UART_SetConfig+0x120>
 80070e2:	2340      	movs	r3, #64	@ 0x40
 80070e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070e6:	e036      	b.n	8007156 <UART_SetConfig+0x18e>
 80070e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	4b3e      	ldr	r3, [pc, #248]	@ (80071e8 <UART_SetConfig+0x220>)
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d102      	bne.n	80070f8 <UART_SetConfig+0x130>
 80070f2:	2380      	movs	r3, #128	@ 0x80
 80070f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070f6:	e02e      	b.n	8007156 <UART_SetConfig+0x18e>
 80070f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	4b3b      	ldr	r3, [pc, #236]	@ (80071ec <UART_SetConfig+0x224>)
 80070fe:	429a      	cmp	r2, r3
 8007100:	d103      	bne.n	800710a <UART_SetConfig+0x142>
 8007102:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007106:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007108:	e025      	b.n	8007156 <UART_SetConfig+0x18e>
 800710a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	4b38      	ldr	r3, [pc, #224]	@ (80071f0 <UART_SetConfig+0x228>)
 8007110:	429a      	cmp	r2, r3
 8007112:	d103      	bne.n	800711c <UART_SetConfig+0x154>
 8007114:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007118:	64bb      	str	r3, [r7, #72]	@ 0x48
 800711a:	e01c      	b.n	8007156 <UART_SetConfig+0x18e>
 800711c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	4b34      	ldr	r3, [pc, #208]	@ (80071f4 <UART_SetConfig+0x22c>)
 8007122:	429a      	cmp	r2, r3
 8007124:	d103      	bne.n	800712e <UART_SetConfig+0x166>
 8007126:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800712a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800712c:	e013      	b.n	8007156 <UART_SetConfig+0x18e>
 800712e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	4b31      	ldr	r3, [pc, #196]	@ (80071f8 <UART_SetConfig+0x230>)
 8007134:	429a      	cmp	r2, r3
 8007136:	d103      	bne.n	8007140 <UART_SetConfig+0x178>
 8007138:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800713c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800713e:	e00a      	b.n	8007156 <UART_SetConfig+0x18e>
 8007140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	4b1e      	ldr	r3, [pc, #120]	@ (80071c0 <UART_SetConfig+0x1f8>)
 8007146:	429a      	cmp	r2, r3
 8007148:	d103      	bne.n	8007152 <UART_SetConfig+0x18a>
 800714a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800714e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007150:	e001      	b.n	8007156 <UART_SetConfig+0x18e>
 8007152:	2300      	movs	r3, #0
 8007154:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	4b19      	ldr	r3, [pc, #100]	@ (80071c0 <UART_SetConfig+0x1f8>)
 800715c:	429a      	cmp	r2, r3
 800715e:	d005      	beq.n	800716c <UART_SetConfig+0x1a4>
 8007160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	4b18      	ldr	r3, [pc, #96]	@ (80071c8 <UART_SetConfig+0x200>)
 8007166:	429a      	cmp	r2, r3
 8007168:	f040 8094 	bne.w	8007294 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800716c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800716e:	2200      	movs	r2, #0
 8007170:	623b      	str	r3, [r7, #32]
 8007172:	627a      	str	r2, [r7, #36]	@ 0x24
 8007174:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007178:	f7fb fffc 	bl	8003174 <HAL_RCCEx_GetPeriphCLKFreq>
 800717c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800717e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 80f7 	beq.w	8007374 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718a:	4a1c      	ldr	r2, [pc, #112]	@ (80071fc <UART_SetConfig+0x234>)
 800718c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007190:	461a      	mov	r2, r3
 8007192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007194:	fbb3 f3f2 	udiv	r3, r3, r2
 8007198:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800719a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	4613      	mov	r3, r2
 80071a0:	005b      	lsls	r3, r3, #1
 80071a2:	4413      	add	r3, r2
 80071a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d305      	bcc.n	80071b6 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d924      	bls.n	8007200 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80071bc:	e069      	b.n	8007292 <UART_SetConfig+0x2ca>
 80071be:	bf00      	nop
 80071c0:	44002400 	.word	0x44002400
 80071c4:	cfff69f3 	.word	0xcfff69f3
 80071c8:	54002400 	.word	0x54002400
 80071cc:	40013800 	.word	0x40013800
 80071d0:	40004400 	.word	0x40004400
 80071d4:	40004800 	.word	0x40004800
 80071d8:	40004c00 	.word	0x40004c00
 80071dc:	40005000 	.word	0x40005000
 80071e0:	40006400 	.word	0x40006400
 80071e4:	40007800 	.word	0x40007800
 80071e8:	40007c00 	.word	0x40007c00
 80071ec:	40008000 	.word	0x40008000
 80071f0:	40006800 	.word	0x40006800
 80071f4:	40006c00 	.word	0x40006c00
 80071f8:	40008400 	.word	0x40008400
 80071fc:	08007878 	.word	0x08007878
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007200:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007202:	2200      	movs	r2, #0
 8007204:	61bb      	str	r3, [r7, #24]
 8007206:	61fa      	str	r2, [r7, #28]
 8007208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800720a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800720c:	4a64      	ldr	r2, [pc, #400]	@ (80073a0 <UART_SetConfig+0x3d8>)
 800720e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007212:	b29b      	uxth	r3, r3
 8007214:	2200      	movs	r2, #0
 8007216:	613b      	str	r3, [r7, #16]
 8007218:	617a      	str	r2, [r7, #20]
 800721a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800721e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007222:	f7f9 f833 	bl	800028c <__aeabi_uldivmod>
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	4610      	mov	r0, r2
 800722c:	4619      	mov	r1, r3
 800722e:	f04f 0200 	mov.w	r2, #0
 8007232:	f04f 0300 	mov.w	r3, #0
 8007236:	020b      	lsls	r3, r1, #8
 8007238:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800723c:	0202      	lsls	r2, r0, #8
 800723e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007240:	6849      	ldr	r1, [r1, #4]
 8007242:	0849      	lsrs	r1, r1, #1
 8007244:	2000      	movs	r0, #0
 8007246:	460c      	mov	r4, r1
 8007248:	4605      	mov	r5, r0
 800724a:	eb12 0804 	adds.w	r8, r2, r4
 800724e:	eb43 0905 	adc.w	r9, r3, r5
 8007252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	60bb      	str	r3, [r7, #8]
 800725a:	60fa      	str	r2, [r7, #12]
 800725c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007260:	4640      	mov	r0, r8
 8007262:	4649      	mov	r1, r9
 8007264:	f7f9 f812 	bl	800028c <__aeabi_uldivmod>
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	4613      	mov	r3, r2
 800726e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007272:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007276:	d308      	bcc.n	800728a <UART_SetConfig+0x2c2>
 8007278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800727a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800727e:	d204      	bcs.n	800728a <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8007280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007286:	60da      	str	r2, [r3, #12]
 8007288:	e003      	b.n	8007292 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8007290:	e070      	b.n	8007374 <UART_SetConfig+0x3ac>
 8007292:	e06f      	b.n	8007374 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007296:	69db      	ldr	r3, [r3, #28]
 8007298:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800729c:	d13c      	bne.n	8007318 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800729e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072a0:	2200      	movs	r2, #0
 80072a2:	603b      	str	r3, [r7, #0]
 80072a4:	607a      	str	r2, [r7, #4]
 80072a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072aa:	f7fb ff63 	bl	8003174 <HAL_RCCEx_GetPeriphCLKFreq>
 80072ae:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d05e      	beq.n	8007374 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ba:	4a39      	ldr	r2, [pc, #228]	@ (80073a0 <UART_SetConfig+0x3d8>)
 80072bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072c0:	461a      	mov	r2, r3
 80072c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80072c8:	005a      	lsls	r2, r3, #1
 80072ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	085b      	lsrs	r3, r3, #1
 80072d0:	441a      	add	r2, r3
 80072d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072de:	2b0f      	cmp	r3, #15
 80072e0:	d916      	bls.n	8007310 <UART_SetConfig+0x348>
 80072e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072e8:	d212      	bcs.n	8007310 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	f023 030f 	bic.w	r3, r3, #15
 80072f2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072f6:	085b      	lsrs	r3, r3, #1
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	f003 0307 	and.w	r3, r3, #7
 80072fe:	b29a      	uxth	r2, r3
 8007300:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007302:	4313      	orrs	r3, r2
 8007304:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8007306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800730c:	60da      	str	r2, [r3, #12]
 800730e:	e031      	b.n	8007374 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007316:	e02d      	b.n	8007374 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007318:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800731a:	2200      	movs	r2, #0
 800731c:	469a      	mov	sl, r3
 800731e:	4693      	mov	fp, r2
 8007320:	4650      	mov	r0, sl
 8007322:	4659      	mov	r1, fp
 8007324:	f7fb ff26 	bl	8003174 <HAL_RCCEx_GetPeriphCLKFreq>
 8007328:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800732a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800732c:	2b00      	cmp	r3, #0
 800732e:	d021      	beq.n	8007374 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007334:	4a1a      	ldr	r2, [pc, #104]	@ (80073a0 <UART_SetConfig+0x3d8>)
 8007336:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800733a:	461a      	mov	r2, r3
 800733c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800733e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	085b      	lsrs	r3, r3, #1
 8007348:	441a      	add	r2, r3
 800734a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007352:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007356:	2b0f      	cmp	r3, #15
 8007358:	d909      	bls.n	800736e <UART_SetConfig+0x3a6>
 800735a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800735c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007360:	d205      	bcs.n	800736e <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007364:	b29a      	uxth	r2, r3
 8007366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	60da      	str	r2, [r3, #12]
 800736c:	e002      	b.n	8007374 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007376:	2201      	movs	r2, #1
 8007378:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800737c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800737e:	2201      	movs	r2, #1
 8007380:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007386:	2200      	movs	r2, #0
 8007388:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800738a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800738c:	2200      	movs	r2, #0
 800738e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007390:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007394:	4618      	mov	r0, r3
 8007396:	3750      	adds	r7, #80	@ 0x50
 8007398:	46bd      	mov	sp, r7
 800739a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800739e:	bf00      	nop
 80073a0:	08007878 	.word	0x08007878

080073a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b0:	f003 0308 	and.w	r3, r3, #8
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00a      	beq.n	80073ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f4:	f003 0302 	and.w	r3, r3, #2
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00a      	beq.n	8007412 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	430a      	orrs	r2, r1
 8007410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007416:	f003 0304 	and.w	r3, r3, #4
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00a      	beq.n	8007434 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007438:	f003 0310 	and.w	r3, r3, #16
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00a      	beq.n	8007456 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	430a      	orrs	r2, r1
 8007454:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800745a:	f003 0320 	and.w	r3, r3, #32
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00a      	beq.n	8007478 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	430a      	orrs	r2, r1
 8007476:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800747c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007480:	2b00      	cmp	r3, #0
 8007482:	d01a      	beq.n	80074ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800749e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074a2:	d10a      	bne.n	80074ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	430a      	orrs	r2, r1
 80074b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00a      	beq.n	80074dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	430a      	orrs	r2, r1
 80074da:	605a      	str	r2, [r3, #4]
  }
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b098      	sub	sp, #96	@ 0x60
 80074ec:	af02      	add	r7, sp, #8
 80074ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074f8:	f7f9 fed4 	bl	80012a4 <HAL_GetTick>
 80074fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0308 	and.w	r3, r3, #8
 8007508:	2b08      	cmp	r3, #8
 800750a:	d12f      	bne.n	800756c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800750c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007514:	2200      	movs	r2, #0
 8007516:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f88e 	bl	800763c <UART_WaitOnFlagUntilTimeout>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d022      	beq.n	800756c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752e:	e853 3f00 	ldrex	r3, [r3]
 8007532:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007536:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800753a:	653b      	str	r3, [r7, #80]	@ 0x50
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	461a      	mov	r2, r3
 8007542:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007544:	647b      	str	r3, [r7, #68]	@ 0x44
 8007546:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007548:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800754a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800754c:	e841 2300 	strex	r3, r2, [r1]
 8007550:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1e6      	bne.n	8007526 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2220      	movs	r2, #32
 800755c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e063      	b.n	8007634 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0304 	and.w	r3, r3, #4
 8007576:	2b04      	cmp	r3, #4
 8007578:	d149      	bne.n	800760e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800757a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007582:	2200      	movs	r2, #0
 8007584:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f857 	bl	800763c <UART_WaitOnFlagUntilTimeout>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d03c      	beq.n	800760e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	623b      	str	r3, [r7, #32]
   return(result);
 80075a2:	6a3b      	ldr	r3, [r7, #32]
 80075a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80075b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075ba:	e841 2300 	strex	r3, r2, [r1]
 80075be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1e6      	bne.n	8007594 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3308      	adds	r3, #8
 80075cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f023 0301 	bic.w	r3, r3, #1
 80075dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3308      	adds	r3, #8
 80075e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075e6:	61fa      	str	r2, [r7, #28]
 80075e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	69b9      	ldr	r1, [r7, #24]
 80075ec:	69fa      	ldr	r2, [r7, #28]
 80075ee:	e841 2300 	strex	r3, r2, [r1]
 80075f2:	617b      	str	r3, [r7, #20]
   return(result);
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e5      	bne.n	80075c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2220      	movs	r2, #32
 80075fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e012      	b.n	8007634 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2220      	movs	r2, #32
 8007612:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2220      	movs	r2, #32
 800761a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3758      	adds	r7, #88	@ 0x58
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	603b      	str	r3, [r7, #0]
 8007648:	4613      	mov	r3, r2
 800764a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800764c:	e04f      	b.n	80076ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007654:	d04b      	beq.n	80076ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007656:	f7f9 fe25 	bl	80012a4 <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	69ba      	ldr	r2, [r7, #24]
 8007662:	429a      	cmp	r2, r3
 8007664:	d302      	bcc.n	800766c <UART_WaitOnFlagUntilTimeout+0x30>
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e04e      	b.n	800770e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0304 	and.w	r3, r3, #4
 800767a:	2b00      	cmp	r3, #0
 800767c:	d037      	beq.n	80076ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	2b80      	cmp	r3, #128	@ 0x80
 8007682:	d034      	beq.n	80076ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2b40      	cmp	r3, #64	@ 0x40
 8007688:	d031      	beq.n	80076ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	f003 0308 	and.w	r3, r3, #8
 8007694:	2b08      	cmp	r3, #8
 8007696:	d110      	bne.n	80076ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2208      	movs	r2, #8
 800769e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 f838 	bl	8007716 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2208      	movs	r2, #8
 80076aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e029      	b.n	800770e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	69db      	ldr	r3, [r3, #28]
 80076c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076c8:	d111      	bne.n	80076ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80076d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 f81e 	bl	8007716 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2220      	movs	r2, #32
 80076de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e00f      	b.n	800770e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	69da      	ldr	r2, [r3, #28]
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	4013      	ands	r3, r2
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	bf0c      	ite	eq
 80076fe:	2301      	moveq	r3, #1
 8007700:	2300      	movne	r3, #0
 8007702:	b2db      	uxtb	r3, r3
 8007704:	461a      	mov	r2, r3
 8007706:	79fb      	ldrb	r3, [r7, #7]
 8007708:	429a      	cmp	r2, r3
 800770a:	d0a0      	beq.n	800764e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007716:	b480      	push	{r7}
 8007718:	b095      	sub	sp, #84	@ 0x54
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007726:	e853 3f00 	ldrex	r3, [r3]
 800772a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800772c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007732:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	461a      	mov	r2, r3
 800773a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800773c:	643b      	str	r3, [r7, #64]	@ 0x40
 800773e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007740:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007742:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007744:	e841 2300 	strex	r3, r2, [r1]
 8007748:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800774a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1e6      	bne.n	800771e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	3308      	adds	r3, #8
 8007756:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007758:	6a3b      	ldr	r3, [r7, #32]
 800775a:	e853 3f00 	ldrex	r3, [r3]
 800775e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007766:	f023 0301 	bic.w	r3, r3, #1
 800776a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	3308      	adds	r3, #8
 8007772:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007774:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007776:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007778:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800777a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800777c:	e841 2300 	strex	r3, r2, [r1]
 8007780:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1e3      	bne.n	8007750 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800778c:	2b01      	cmp	r3, #1
 800778e:	d118      	bne.n	80077c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	e853 3f00 	ldrex	r3, [r3]
 800779c:	60bb      	str	r3, [r7, #8]
   return(result);
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	f023 0310 	bic.w	r3, r3, #16
 80077a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	461a      	mov	r2, r3
 80077ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077ae:	61bb      	str	r3, [r7, #24]
 80077b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b2:	6979      	ldr	r1, [r7, #20]
 80077b4:	69ba      	ldr	r2, [r7, #24]
 80077b6:	e841 2300 	strex	r3, r2, [r1]
 80077ba:	613b      	str	r3, [r7, #16]
   return(result);
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1e6      	bne.n	8007790 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80077d6:	bf00      	nop
 80077d8:	3754      	adds	r7, #84	@ 0x54
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <memset>:
 80077e2:	4402      	add	r2, r0
 80077e4:	4603      	mov	r3, r0
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d100      	bne.n	80077ec <memset+0xa>
 80077ea:	4770      	bx	lr
 80077ec:	f803 1b01 	strb.w	r1, [r3], #1
 80077f0:	e7f9      	b.n	80077e6 <memset+0x4>
	...

080077f4 <__libc_init_array>:
 80077f4:	b570      	push	{r4, r5, r6, lr}
 80077f6:	4d0d      	ldr	r5, [pc, #52]	@ (800782c <__libc_init_array+0x38>)
 80077f8:	2600      	movs	r6, #0
 80077fa:	4c0d      	ldr	r4, [pc, #52]	@ (8007830 <__libc_init_array+0x3c>)
 80077fc:	1b64      	subs	r4, r4, r5
 80077fe:	10a4      	asrs	r4, r4, #2
 8007800:	42a6      	cmp	r6, r4
 8007802:	d109      	bne.n	8007818 <__libc_init_array+0x24>
 8007804:	4d0b      	ldr	r5, [pc, #44]	@ (8007834 <__libc_init_array+0x40>)
 8007806:	2600      	movs	r6, #0
 8007808:	4c0b      	ldr	r4, [pc, #44]	@ (8007838 <__libc_init_array+0x44>)
 800780a:	f000 f817 	bl	800783c <_init>
 800780e:	1b64      	subs	r4, r4, r5
 8007810:	10a4      	asrs	r4, r4, #2
 8007812:	42a6      	cmp	r6, r4
 8007814:	d105      	bne.n	8007822 <__libc_init_array+0x2e>
 8007816:	bd70      	pop	{r4, r5, r6, pc}
 8007818:	f855 3b04 	ldr.w	r3, [r5], #4
 800781c:	3601      	adds	r6, #1
 800781e:	4798      	blx	r3
 8007820:	e7ee      	b.n	8007800 <__libc_init_array+0xc>
 8007822:	f855 3b04 	ldr.w	r3, [r5], #4
 8007826:	3601      	adds	r6, #1
 8007828:	4798      	blx	r3
 800782a:	e7f2      	b.n	8007812 <__libc_init_array+0x1e>
 800782c:	08007898 	.word	0x08007898
 8007830:	08007898 	.word	0x08007898
 8007834:	08007898 	.word	0x08007898
 8007838:	0800789c 	.word	0x0800789c

0800783c <_init>:
 800783c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783e:	bf00      	nop
 8007840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007842:	bc08      	pop	{r3}
 8007844:	469e      	mov	lr, r3
 8007846:	4770      	bx	lr

08007848 <_fini>:
 8007848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784a:	bf00      	nop
 800784c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800784e:	bc08      	pop	{r3}
 8007850:	469e      	mov	lr, r3
 8007852:	4770      	bx	lr
